searchState.loadedDescShard("twitch_api", 1, "The time the poll started.\nThe time the poll started.\nThe status of the poll.\nQuestion displayed for the poll.\nQuestion displayed for the poll.\nQuestion displayed for the poll.\n<code>channel.poll.begin</code>: a poll begins on the specified channel.\n<code>channel.poll.begin</code> response payload.\nThe Bits voting settings for the poll.\nThe broadcaster user ID of the channel for which “poll …\nThe broadcaster user ID of the channel for which “poll …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelPollBeginV1</code>. On the …\nThe Channel Points voting settings for the poll.\nAn array of choices for the poll.\nThe time the poll will end.\nID of the poll.\nThe time the poll started.\nQuestion displayed for the poll.\n<code>channel.poll.end</code>: a poll ends on the specified channel.\n<code>channel.poll.end</code> response payload.\nThe Bits voting settings for the poll.\nThe broadcaster user ID of the channel for which “poll …\nThe broadcaster user ID of the channel for which “poll …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelPollEndV1</code>. On the …\nThe Channel Points voting settings for the poll.\nAn array of choices for the poll. Includes vote counts.\nThe time the poll ended.\nID of the poll.\nThe time the poll started.\nThe status of the poll.\nQuestion displayed for the poll.\n<code>channel.poll.progress</code>: an user responds to a poll on the …\n<code>channel.poll.progress</code> response payload.\nThe Bits voting settings for the poll.\nThe broadcaster user ID of the channel for which “poll …\nThe broadcaster user ID of the channel for which “poll …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelPollProgressV1</code>. On …\nThe Channel Points voting settings for the poll.\nAn array of choices for the poll. Includes vote counts.\nThe time the poll will end.\nID of the poll.\nThe time the poll started.\nQuestion displayed for the poll.\n<code>channel.prediction.begin</code>: a Prediction begins on the …\n<code>channel.prediction.begin</code> response payload.\n<code>channel.prediction.end</code>: a Prediction ends on the specified …\n<code>channel.prediction.end</code> response payload.\n<code>channel.prediction.lock</code>: an user responds to a prediction …\n<code>channel.prediction.lock</code> response payload.\n<code>channel.prediction.progress</code>: an user responds to a …\n<code>channel.prediction.progress</code> response payload.\nA Prediction begins on the specified channel\nThe broadcaster user ID of the channel for which …\nThe requested broadcaster ID.\nThe broadcaster user ID of the channel for which …\nThe requested broadcaster ID.\nThe broadcaster user ID of the channel for which …\nThe requested broadcaster ID.\nThe broadcaster user ID of the channel for which …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nA Prediction ends on the specified channel.\nThe time the Channel Points Prediction ended.\nChannel Points Prediction ID.\nChannel Points Prediction ID.\nChannel Points Prediction ID.\nChannel Points Prediction ID.\nA user responds to a prediction on the specified channel\nThe time the Channel Points Prediction will automatically …\nThe time the Channel Points Prediction will automatically …\nThe time the Channel Points Prediction will automatically …\nAn array of outcomes for the Channel Points Prediction.\nAn array of outcomes for the Channel Points Prediction. …\nAn array of outcomes for the Channel Points Prediction. …\nAn array of outcomes for the Channel Points Prediction. …\nA user responds to a prediction on the specified channel\nThe time the Channel Points Prediction started.\nThe time the Channel Points Prediction started.\nThe time the Channel Points Prediction started.\nThe time the Channel Points Prediction started.\nThe status of the Channel Points Prediction. Valid values …\nTitle for the Channel Points Prediction.\nTitle for the Channel Points Prediction.\nTitle for the Channel Points Prediction.\nTitle for the Channel Points Prediction.\nID of the winning outcome.\n<code>channel.prediction.begin</code>: a Prediction begins on the …\n<code>channel.prediction.begin</code> response payload.\nThe broadcaster user ID of the channel for which …\nThe broadcaster user ID of the channel for which …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelPredictionBeginV1</code>. On …\nChannel Points Prediction ID.\nThe time the Channel Points Prediction will automatically …\nAn array of outcomes for the Channel Points Prediction.\nThe time the Channel Points Prediction started.\nTitle for the Channel Points Prediction.\n<code>channel.prediction.end</code>: a Prediction ends on the specified …\n<code>channel.prediction.end</code> response payload.\nThe broadcaster user ID of the channel for which …\nThe broadcaster user ID of the channel for which …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelPredictionEndV1</code>. On …\nThe time the Channel Points Prediction ended.\nChannel Points Prediction ID.\nAn array of outcomes for the Channel Points Prediction. …\nThe time the Channel Points Prediction started.\nThe status of the Channel Points Prediction. Valid values …\nTitle for the Channel Points Prediction.\nID of the winning outcome.\n<code>channel.prediction.lock</code>: an user responds to a prediction …\n<code>channel.prediction.lock</code> response payload.\nThe broadcaster user ID of the channel for which …\nThe broadcaster user ID of the channel for which …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelPredictionLockV1</code>. On …\nChannel Points Prediction ID.\nThe time the Channel Points Prediction will automatically …\nAn array of outcomes for the Channel Points Prediction. …\nThe time the Channel Points Prediction started.\nTitle for the Channel Points Prediction.\n<code>channel.prediction.progress</code>: an user responds to a …\n<code>channel.prediction.progress</code> response payload.\nThe broadcaster user ID of the channel for which …\nThe broadcaster user ID of the channel for which …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelPredictionProgressV1</code>. …\nChannel Points Prediction ID.\nThe time the Channel Points Prediction will automatically …\nAn array of outcomes for the Channel Points Prediction. …\nThe time the Channel Points Prediction started.\nTitle for the Channel Points Prediction.\n<code>channel.raid</code>: a a broadcaster raids another …\n<code>channel.raid</code> response payload.\nCreate a builder for building <code>ChannelRaidV1</code>. On the …\nThe broadcaster user ID that created the channel raid you …\nThe broadcaster user ID that created the channel raid you …\nThe broadcaster ID that created the raid.\nThe broadcaster login that created the raid.\nThe broadcaster display name that created the raid.\nThe broadcaster user ID that received the channel raid you …\nThe broadcaster user ID that received the channel raid you …\nThe broadcaster ID that received the raid.\nThe broadcaster login that received the raid.\nThe broadcaster display name that received the raid.\nThe number of viewers in the raid.\n<code>channel.shared_chat.begin</code>: a channel becomes active in an …\n<code>channel.shared_chat.begin</code> response payload.\n<code>channel.shared_chat.end</code>: a channel leaves a shared chat …\n<code>channel.shared_chat.end</code> response payload.\n<code>channel.shared_chat.update</code>: the active shared chat session …\n<code>channel.shared_chat.update</code> response payload.\nA participant in a shared chat session\nA channel becomes active in an active shared chat session.\nThe User ID of the channel to receive shared chat session …\nThe User ID of the channel in the subscription condition …\nThe User ID of the channel to receive shared chat session …\nThe User ID of the channel in the subscription condition …\nThe User ID of the channel to receive shared chat session …\nThe User ID of the channel in the subscription condition.\nThe User ID of the participant channel.\nThe user login of the channel in the subscription …\nThe user login of the channel in the subscription …\nThe user login of the channel in the subscription …\nThe user login of the participant channel.\nThe display name of the channel in the subscription …\nThe display name of the channel in the subscription …\nThe display name of the channel in the subscription …\nThe display name of the participant channel.\nA channel leaves a shared chat session or the session ends.\nReturns the argument unchanged.\nThe User ID of the host channel.\nThe User ID of the host channel.\nThe User ID of the host channel.\nThe user login of the host channel.\nThe user login of the host channel.\nThe user login of the host channel.\nThe display name of the host channel.\nThe display name of the host channel.\nThe display name of the host channel.\nCalls <code>U::from(self)</code>.\nThe list of participants in the session.\nThe list of participants in the session.\nThe unique identifier for the shared chat session.\nThe unique identifier for the shared chat session.\nThe unique identifier for the shared chat session.\nThe active shared chat session the channel is in changed.\n<code>channel.shared_chat.begin</code>: a channel becomes active in an …\n<code>channel.shared_chat.begin</code> response payload.\nThe User ID of the channel to receive shared chat session …\nThe User ID of the channel to receive shared chat session …\nThe User ID of the channel in the subscription condition …\nThe user login of the channel in the subscription …\nThe display name of the channel in the subscription …\nCreate a builder for building <code>ChannelSharedChatBeginV1</code>. On …\nThe User ID of the host channel.\nThe user login of the host channel.\nThe display name of the host channel.\nThe list of participants in the session.\nThe unique identifier for the shared chat session.\n<code>channel.shared_chat.end</code>: a channel leaves a shared chat …\n<code>channel.shared_chat.end</code> response payload.\nThe User ID of the channel to receive shared chat session …\nThe User ID of the channel to receive shared chat session …\nThe User ID of the channel in the subscription condition …\nThe user login of the channel in the subscription …\nThe display name of the channel in the subscription …\nCreate a builder for building <code>ChannelSharedChatEndV1</code>. On …\nThe User ID of the host channel.\nThe user login of the host channel.\nThe display name of the host channel.\nThe unique identifier for the shared chat session.\n<code>channel.shared_chat.update</code>: the active shared chat session …\n<code>channel.shared_chat.update</code> response payload.\nThe User ID of the channel to receive shared chat session …\nThe User ID of the channel to receive shared chat session …\nThe User ID of the channel in the subscription condition.\nThe user login of the channel in the subscription …\nThe display name of the channel in the subscription …\nCreate a builder for building <code>ChannelSharedChatUpdateV1</code>. …\nThe User ID of the host channel.\nThe user login of the host channel.\nThe display name of the host channel.\nThe list of participants in the session.\nThe unique identifier for the shared chat session.\n<code>channel.shield_mode.begin</code>: an user responds to a …\n<code>channel.shield_mode.begin</code> response payload.\n<code>channel.shield_mode.end</code>: an user responds to a prediction …\n<code>channel.shield_mode.end</code> response payload.\nA channel activates Shield Mode\nThe ID of the broadcaster that you want to receive …\nAn ID that identifies the broadcaster whose Shield Mode …\nThe ID of the broadcaster that you want to receive …\nAn ID that identifies the broadcaster whose Shield Mode …\nThe broadcaster’s login name.\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nThe broadcaster’s display name.\nA channel deactivates Shield Mode\nThe UTC timestamp (in RFC3339 format) of when the …\nThe ID of the broadcaster or one of the broadcaster’s …\nAn ID that identifies the moderator that updated the …\nThe ID of the broadcaster or one of the broadcaster’s …\nAn ID that identifies the moderator that updated the …\nThe moderator’s login name.\nThe moderator’s login name.\nThe moderator’s display name.\nThe moderator’s display name.\nThe UTC timestamp (in RFC3339 format) of when the …\n<code>channel.shield_mode.begin</code>: an user responds to a …\n<code>channel.shield_mode.begin</code> response payload.\nThe ID of the broadcaster that you want to receive …\nAn ID that identifies the broadcaster whose Shield Mode …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nCreate a builder for building <code>ChannelShieldModeBeginV1</code>. On …\nThe ID of the broadcaster or one of the broadcaster’s …\nAn ID that identifies the moderator that updated the …\nThe moderator’s login name.\nThe moderator’s display name.\nGet shield mode begin events for this channel as moderator\nThe UTC timestamp (in RFC3339 format) of when the …\n<code>channel.shield_mode.end</code>: an user responds to a prediction …\n<code>channel.shield_mode.end</code> response payload.\nThe ID of the broadcaster that you want to receive …\nAn ID that identifies the broadcaster whose Shield Mode …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nCreate a builder for building <code>ChannelShieldModeEndV1</code>. On …\nThe UTC timestamp (in RFC3339 format) of when the …\nThe ID of the broadcaster or one of the broadcaster’s …\nAn ID that identifies the moderator that updated the …\nThe moderator’s login name.\nThe moderator’s display name.\nGet shield mode end events for this channel as moderator\n<code>channel.shoutout.create</code>: a Prediction begins on the …\n<code>channel.shoutout.create</code> response payload.\n<code>channel.shoutout.receive</code>: a Prediction begins on the …\n<code>channel.shoutout.receive</code> response payload.\nThe ID of the broadcaster that you want to receive …\nAn ID that identifies the broadcaster that sent the …\nThe ID of the broadcaster that you want to receive …\nAn ID that identifies the broadcaster that received the …\nThe broadcaster’s login name.\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nThe broadcaster’s display name.\nThe UTC timestamp (in RFC3339 format) of when the …\nA specified broadcaster sends a Shoutout.\nAn ID that identifies the broadcaster that sent the …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nThe ID of the broadcaster that gave the Shoutout or one of …\nAn ID that identifies the moderator that sent the …\nThe ID of the broadcaster that received the Shoutout or …\nThe moderator’s login name.\nThe moderator’s display name.\nA specified broadcaster receives a Shoutout.\nThe UTC timestamp (in RFC3339 format) of when the …\nThe UTC timestamp (in RFC3339 format) of when the …\nThe UTC timestamp (in RFC3339 format) of when the …\nAn ID that identifies the broadcaster that received the …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nThe number of users that were watching the broadcaster’s …\nThe number of users that were watching the …\n<code>channel.shoutout.create</code>: a Prediction begins on the …\n<code>channel.shoutout.create</code> response payload.\nThe ID of the broadcaster that you want to receive …\nAn ID that identifies the broadcaster that sent the …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nCreate a builder for building <code>ChannelShoutoutCreateV1</code>. On …\nThe UTC timestamp (in RFC3339 format) of when the …\nThe ID of the broadcaster that gave the Shoutout or one of …\nAn ID that identifies the moderator that sent the …\nThe moderator’s login name.\nThe moderator’s display name.\nCreate a new <code>ChannelShoutoutCreateV1</code>\nThe UTC timestamp (in RFC3339 format) of when the …\nThe UTC timestamp (in RFC3339 format) of when the …\nAn ID that identifies the broadcaster that received the …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nThe number of users that were watching the broadcaster’s …\n<code>channel.shoutout.receive</code>: a Prediction begins on the …\n<code>channel.shoutout.receive</code> response payload.\nThe ID of the broadcaster that you want to receive …\nAn ID that identifies the broadcaster that received the …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nCreate a builder for building <code>ChannelShoutoutReceiveV1</code>. On …\nAn ID that identifies the broadcaster that sent the …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nThe ID of the broadcaster that received the Shoutout or …\nCreate a new <code>ChannelShoutoutReceiveV1</code>\nThe UTC timestamp (in RFC3339 format) of when the …\nThe number of users that were watching the …\n<code>channel.subscribe</code>: a specified channel receives a …\n<code>channel.subscribe</code> response payload.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID for the channel you want to get …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelSubscribeV1</code>. On the …\nWhether the subscription is a gift.\nThe tier of the subscription. Valid values are 1000, 2000, …\nThe user ID for the user who subscribed to the specified …\nThe user login for the user who subscribed to the …\nThe user display name for the user who subscribed to the …\n<code>channel.subscription.end</code>: a subscription to the specified …\n<code>channel.subscription.end</code> response payload.\n<code>channel.subscription.gift</code>: a subscription to the specified …\n<code>channel.subscription.gift</code> response payload.\n<code>channel.subscription.message</code>: a subscription to the …\n<code>channel.subscription.message</code> response payload.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID.\nThe broadcaster login.\nThe broadcaster login.\nThe broadcaster login.\nThe broadcaster display name.\nThe broadcaster display name.\nThe broadcaster display name.\nThe total number of months the user has been subscribed to …\nThe number of subscriptions gifted by this user in the …\nThe month duration of the subscription.\nA subscription to the specified channel expires.\nA user gives one or more gifted subscriptions in a channel.\nWhether the subscription gift was anonymous.\nWhether the subscription was a gift.\nA user sends a resubscription chat message in a specific …\nAn object that contains the resubscription message and …\nThe number of consecutive months the user’s current …\nThe tier of the subscription that ended. Valid values are …\nThe tier of subscriptions in the subscription gift.\nThe tier of the user’s subscription.\nThe number of subscriptions in the subscription gift.\nThe user ID for the user whose subscription ended.\nThe user ID of the user who sent the subscription gift. …\nThe user ID of the user who sent a resubscription chat …\nThe user login for the user whose subscription ended.\nThe user login of the user who sent the gift. Set to null …\nThe user login of the user who sent a resubscription chat …\nThe user display name for the user whose subscription …\nThe user display name of the user who sent the gift. Set …\nThe user display name of the user who a resubscription …\n<code>channel.subscription.end</code>: a subscription to the specified …\n<code>channel.subscription.end</code> response payload.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID.\nThe broadcaster login.\nThe broadcaster display name.\nCreate a builder for building <code>ChannelSubscriptionEndV1</code>. On …\nWhether the subscription was a gift.\nThe tier of the subscription that ended. Valid values are …\nThe user ID for the user whose subscription ended.\nThe user login for the user whose subscription ended.\nThe user display name for the user whose subscription …\n<code>channel.subscription.gift</code>: a subscription to the specified …\n<code>channel.subscription.gift</code> response payload.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID.\nThe broadcaster login.\nThe broadcaster display name.\nCreate a builder for building <code>ChannelSubscriptionGiftV1</code>. …\nThe number of subscriptions gifted by this user in the …\nWhether the subscription gift was anonymous.\nThe tier of subscriptions in the subscription gift.\nThe number of subscriptions in the subscription gift.\nThe user ID of the user who sent the subscription gift. …\nThe user login of the user who sent the gift. Set to null …\nThe user display name of the user who sent the gift. Set …\n<code>channel.subscription.message</code>: a subscription to the …\n<code>channel.subscription.message</code> response payload.\nA message attached to a <code>ChannelSubscriptionMessageV1Payload</code>\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID.\nThe broadcaster login.\nThe broadcaster display name.\nCreate a builder for building <code>ChannelSubscriptionMessageV1</code>.\nThe total number of months the user has been subscribed to …\nThe month duration of the subscription.\nAn array that includes the emote ID and start and end …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn object that contains the resubscription message and …\nThe number of consecutive months the user’s current …\nThe text of the resubscription chat message.\nThe tier of the user’s subscription.\nThe user ID of the user who sent a resubscription chat …\nThe user login of the user who sent a resubscription chat …\nThe user display name of the user who a resubscription …\n<code>channel.unban</code>: a viewer is unbanned from the specified …\n<code>channel.unban</code> response payload.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID for the channel you want to get …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelUnbanV1</code>. On the …\nThe user ID of the issuer of the unban.\nThe user login of the issuer of the unban.\nThe user name of the issuer of the unban.\nThe user id for the user who was unbanned on the specified …\nThe user login for the user who was unbanned on the …\nThe user display name for the user who was unbanned on the …\nversion 1 of <code>channel.update</code> subscription type sends …\n<code>channel.update</code> response payload.\n<code>channel.update</code> subscription type sends notifications when …\n<code>channel.update</code> response payload.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster’s user ID.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster’s user ID.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe broadcaster’s user display name.\nThe broadcaster’s user display name.\nCreate a builder for building <code>ChannelUpdateV2</code>. On the …\nCreate a builder for building <code>ChannelUpdateV1</code>. On the …\nThe channel’s category ID.\nThe channel’s category ID.\nThe category name.\nThe category name.\nArray of content classification label IDs currently …\nA boolean identifying whether the channel is flagged as …\nThe channel’s broadcast language.\nThe channel’s broadcast language.\nThe channel’s stream title.\nThe channel’s stream title.\n<code>conduit.shard.disabled</code>\n<code>conduit.shard.disabled</code> response payload.\nYour application’s client id. The provided client_id …\nOptional. The conduit ID to receive events for. If …\nThe conduit ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSubscription types regarding conduit shards.\nThe shard ID within the conduit.\nThe status of the disabled shard.\nThe transport details about the disable shard.\nA conduit shard is disabled by twitch.\n<code>conduit.shard.disabled</code>\n<code>conduit.shard.disabled</code> response payload.\nCreate a builder for building <code>ConduitShardDisabledV1</code>. On …\nYour application’s client id. The provided client_id …\nYour application’s client id. The provided client_id …\nThe conduit ID to receive events for. If omitted, events …\nOptional. The conduit ID to receive events for. If …\nThe conduit ID.\nThe shard ID within the conduit.\nThe status of the disabled shard.\nThe transport details about the disable shard.\n<code>automod.message.hold</code>: a message was caught by automod for …\nAutomod Message Hold V1 Event\nAutomod Message Hold V2 Event\n<code>automod.message.update</code>: a message in the automod queue had …\nAutomod Message Update V1 Event\nAutomod Message Update V2 Event\n<code>automod.settings.update</code>: a notification is sent when a …\nAutomod Settings Update V1 Event\n<code>automod.terms.update</code>: a notification is sent when a …\nAutomod Terms Update V1 Event\n<code>channel.ad_break.begin</code>: a user runs a midroll commercial …\nChannel Ad Break Begin V1 Event\n<code>channel.ban</code>: a viewer is banned from the specified channel.\nChannel Ban V1 Event\n<code>channel.charity_campaign.donate</code>: a user donates to the …\nChannel Charity Campaign Donate V1 Event\n<code>channel.charity_campaign.progress</code>: progress is made …\nChannel Charity Campaign Progress V1 Event\n<code>channel.charity_campaign.start</code>: a broadcaster starts a …\nChannel Charity Campaign Start V1 Event\n<code>channel.charity_campaign.stop</code>: a broadcaster stops a …\nChannel Charity Campaign Stop V1 Event\n<code>channel.chat.clear</code>: a moderator or bot clears all messages …\n<code>channel.chat.clear_user_messages</code>: a moderator or bot …\nChannel Chat ClearUserMessages V1 Event\nChannel Chat Clear V1 Event\n<code>channel.chat.message</code>: any user sends a message to a …\n<code>channel.chat.message_delete</code>: a moderator removes a …\nChannel Chat MessageDelete V1 Event\nChannel Chat Message V1 Event\n<code>channel.chat.notification</code>: an event that appears in chat …\nChannel Chat Notification V1 Event\n<code>channel.chat.user_message_hold</code>: a user’s message is …\nChannel Chat UserMessageHold V1 Event\n<code>channel.chat.user_message_update</code>: a user’s message’s …\nChannel Chat UserMessageUpdate V1 Event\n<code>channel.cheer</code>: a user cheers on the specified channel.\nChannel Cheer V1 Event\n<code>channel.follow</code>: a specified channel receives a follow.\nChannel Follow V1 Event\nChannel Follow V2 Event\n<code>channel.goal.begin</code>: a goal begins on the specified channel.\nChannel Goal Begin V1 Event\n<code>channel.goal.end</code>: a goal ends on the specified channel.\nChannel Goal End V1 Event\n<code>channel.goal.progress</code>: a goal makes progress on the …\nChannel Goal Progress V1 Event\n<code>channel.hype_train.begin</code>: a hype train begins on the …\nChannel Hype Train Begin V1 Event\n<code>channel.hype_train.end</code>: a hype train ends on the specified …\nChannel Hype Train End V1 Event\n<code>channel.hype_train.progress</code>: a hype train makes progress …\nChannel Hype Train Progress V1 Event\n<code>channel.channel_points_automatic_reward_redemption.add</code>: a …\nChannel Points Automatic Reward Redemption Add V1 Event\n<code>channel.channel_points_custom_reward.add</code>: a custom channel …\nChannel Points Custom Reward Add V1 Event\n<code>channel.channel_points_custom_reward_redemption.add</code>: a …\nChannel Points Custom Reward Redemption Add V1 Event\n<code>channel.channel_points_custom_reward_redemption.update</code>: a …\nChannel Points Custom Reward Redemption Update V1 Event\n<code>channel.channel_points_custom_reward.remove</code>: a custom …\nChannel Points Custom Reward Remove V1 Event\n<code>channel.channel_points_custom_reward.update</code>: a custom …\nChannel Points Custom Reward Update V1 Event\n<code>channel.poll.begin</code>: a poll begins on the specified channel.\nChannel Poll Begin V1 Event\n<code>channel.poll.end</code>: a poll ends on the specified channel.\nChannel Poll End V1 Event\n<code>channel.poll.progress</code>: a user responds to a poll on the …\nChannel Poll Progress V1 Event\n<code>channel.prediction.begin</code>: a Prediction begins on the …\nChannel Prediction Begin V1 Event\n<code>channel.prediction.end</code>: a Prediction ends on the specified …\nChannel Prediction End V1 Event\n<code>channel.prediction.lock</code>: a Prediction is locked on the …\nChannel Prediction Lock V1 Event\n<code>channel.prediction.progress</code>: a user participates in a …\nChannel Prediction Progress V1 Event\n<code>channel.raid</code>: a broadcaster raids another broadcaster’s …\nChannel Raid V1 Event\n<code>channel.shared_chat.begin</code>: a channel becomes active in an …\nChannel SharedChat Begin V1 Event\n<code>channel.shared_chat.end</code>: a channel leaves a shared chat …\nChannel SharedChat End V1 Event\n<code>channel.shared_chat.update</code>: the active shared chat session …\nChannel SharedChat Update V1 Event\n<code>channel.shield_mode.begin</code>: a channel activates shield mode\nChannel ShieldMode Begin V1 Event\n<code>channel.shield_mode.end</code>: a channel deactivates shield mode\nChannel ShieldMode End V1 Event\n<code>channel.shoutout.create</code>: a specified broadcaster sends a …\nChannel Shoutout Create V1 Event\n<code>channel.shoutout.receive</code>: a specified broadcaster receives …\nChannel Shoutout Receive V1 Event\n<code>channel.subscribe</code>: a specified channel receives a …\nChannel Subscribe V1 Event\n<code>channel.subscription.end</code>: a subscription to the specified …\nChannel Subscription End V1 Event\n<code>channel.subscription.gift</code>: a user gives one or more gifted …\nChannel Subscription Gift V1 Event\n<code>channel.subscription.message</code>: a user sends a …\nChannel Subscription Message V1 Event\n<code>channel.unban</code>: a viewer is unbanned from the specified …\nChannel Unban V1 Event\n<code>channel.update</code>: subscription type sends notifications when …\nChannel Update V1 Event\nChannel Update V2 Event\n<code>conduit.shard.disabled</code>: sends a notification when eventsub …\nConduit Shard Disabled V1 Event\nA notification with an event payload. Enumerates all …\nEvent Types\nError when parsing an event-type string.\n<code>stream.offline</code>: the specified broadcaster stops a stream.\nStreamOffline V1 Event\n<code>stream.online</code>: the specified broadcaster starts a stream.\nStreamOnline V1 Event\n<code>user.authorization.grant</code>: a user’s authorization has …\nUser Authorization Grant V1 Event\n<code>user.authorization.revoke</code>: a user has revoked …\nUser Authorization Revoke V1 Event\n<code>user.update</code>: user updates their account.\nUser Update V1 Event\nReturns the argument unchanged.\nIf this event is a <code>VerificationRequest</code>, return the …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the message in the <code>Payload</code> is <code>Notification</code>.\nReturns <code>true</code> if the message in the <code>Payload</code> is <code>Revocation</code>.\nReturns <code>true</code> if the message in the <code>Payload</code> is …\nParse string slice as an <code>Event</code>. Consider using …\nParse a http payload as an <code>Event</code>\nParse a websocket frame as an <code>EventsubWebsocketData</code>\nMake a <code>EventSubSubscription</code> from this notification.\nGet the event string of this event.\nVerify that this event is authentic using <code>HMAC-SHA256</code>.\nTypes for Eventsub websocket\nMetadata for a websocket event\nDefines the message that the EventSub WebSocket server …\nDefines the message that the EventSub WebSocket server …\nDefines a message that the EventSub WebSocket server sends …\nDefines a message that the EventSub WebSocket server sends …\nDefines the message that the EventSub WebSocket server …\nDefines the message that the EventSub WebSocket server …\nDefines the message that the EventSub WebSocket server …\nDefines the message that the EventSub WebSocket server …\nDefines the message that the EventSub WebSocket server …\nSession information sent with the welcome\nDefines the first message that the EventSub WebSocket …\nDefines the first message that the EventSub WebSocket …\nDefines the first message that the EventSub WebSocket …\nThe UTC date and time that the connection was created.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn ID that uniquely identifies this WebSocket connection. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum number of seconds that you should expect …\nGet message id\nGet message id\nAn ID that uniquely identifies the message. Twitch sends …\nAn ID that uniquely identifies the message. Twitch sends …\nAn ID that uniquely identifies the message. Twitch sends …\nAn ID that uniquely identifies the message. Twitch sends …\nAn ID that uniquely identifies the message. Twitch sends …\nGet message timestamp\nGet message timestamp\nThe UTC date and time that the message was sent.\nThe UTC date and time that the message was sent.\nThe UTC date and time that the message was sent.\nThe UTC date and time that the message was sent.\nThe UTC date and time that the message was sent.\nGet metadata for the event\nThe URL to reconnect to if you get a Reconnect message. Is …\nSession information\nSession data\nThe connection’s status, which is set to connected.\nThe type of event sent in the message.\nThe type of event sent in the message.\nThe version number of the subscription type’s …\nThe version number of the subscription type’s …\n<code>stream.offline</code>: the specified broadcaster stops a stream.\n<code>stream.offline</code> response payload.\n<code>stream.online</code>: the specified broadcaster starts a stream\n<code>stream.online</code> response payload.\nThe broadcaster user ID you want to get stream offline …\nThe broadcaster’s user id.\nThe broadcaster user ID you want to get stream online …\nThe broadcaster’s user id.\nThe broadcaster’s user login.\nThe broadcaster’s user login.\nThe broadcaster’s user display name.\nThe broadcaster’s user display name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe id of the stream.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe specified broadcaster stops a stream.\nThe specified broadcaster starts a stream\nThe timestamp at which the stream went online at.\nThe stream type. Valid values are: live, playlist, …\n<code>stream.offline</code>: the specified broadcaster stops a stream.\n<code>stream.offline</code> response payload.\nThe broadcaster user ID you want to get stream offline …\nThe broadcaster user ID you want to get stream offline …\nThe broadcaster’s user id.\nThe broadcaster’s user login.\nThe broadcaster’s user display name.\nCreate a builder for building <code>StreamOfflineV1</code>. On the …\n<code>stream.online</code>: the specified broadcaster starts a stream\n<code>stream.online</code> response payload.\nThe broadcaster user ID you want to get stream online …\nThe broadcaster user ID you want to get stream online …\nThe broadcaster’s user id.\nThe broadcaster’s user login.\nThe broadcaster’s user display name.\nCreate a builder for building <code>StreamOnlineV1</code>. On the …\nThe id of the stream.\nThe timestamp at which the stream went online at.\nThe stream type. Valid values are: live, playlist, …\n<code>user.authorization.grant</code>: a user’s authorization has …\n<code>user.authorization.grant</code> response payload.\n<code>user.authorization.revoke</code>: a user has revoked …\n<code>user.authorization.revoke</code> response payload.\n<code>user.update</code>: user updates their account.\n<code>user.update</code> response payload.\nAuthorization from a user has been granted or revoked to a …\nYour application’s client id. The provided client_id …\nThe client_id of the application that was granted user …\nYour application’s client id. The provided client_id …\nThe client_id of the application with revoked user access.\nThe user’s description.\nThe user’s email. Only included if you have the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpecified user updates their account.\nThe user id for the user who has granted authorization for …\nThe user id for the user who has revoked authorization for …\nThe user ID for the user you want update notifications for.\nThe user’s user id.\nThe user login for the user who has granted authorization …\nThe user login for the user who has revoked authorization …\nThe user’s user login.\nThe user display name for the user who has granted …\nThe user name for the user who has revoked authorization …\nThe user’s user display name.\n<code>user.authorization.grant</code>: a user’s authorization has …\n<code>user.authorization.grant</code> response payload.\n<code>user.authorization.revoke</code>: a user has revoked …\n<code>user.authorization.revoke</code> response payload.\nYour application’s client id. The provided client_id …\nThe client_id of the application that was granted user …\nYour application’s client id. The provided client_id …\nThe client_id of the application with revoked user access.\nA user’s authorization has been granted to your client …\nA user has revoked authorization for your client id.\nThe user id for the user who has granted authorization for …\nThe user id for the user who has revoked authorization for …\nThe user login for the user who has granted authorization …\nThe user login for the user who has revoked authorization …\nThe user display name for the user who has granted …\nThe user name for the user who has revoked authorization …\n<code>user.authorization.grant</code>: a user’s authorization has …\n<code>user.authorization.grant</code> response payload.\nCreate a builder for building <code>UserAuthorizationGrantV1</code>. On …\nYour application’s client id. The provided client_id …\nThe client_id of the application that was granted user …\nYour application’s client id. The provided client_id …\nThe user id for the user who has granted authorization for …\nThe user login for the user who has granted authorization …\nThe user display name for the user who has granted …\n<code>user.authorization.revoke</code>: a user has revoked …\n<code>user.authorization.revoke</code> response payload.\nCreate a builder for building <code>UserAuthorizationRevokeV1</code>. …\nYour application’s client id. The provided client_id …\nThe client_id of the application with revoked user access.\nYour application’s client id. The provided client_id …\nThe user id for the user who has revoked authorization for …\nThe user login for the user who has revoked authorization …\nThe user name for the user who has revoked authorization …\n<code>user.update</code>: user updates their account.\n<code>user.update</code> response payload.\nCreate a builder for building <code>UserUpdateV1</code>. On the …\nThe user’s description.\nThe user’s email. Only included if you have the …\nThe user ID for the user you want update notifications for.\nThe user ID for the user you want update notifications for.\nThe user’s user id.\nThe user’s user login.\nThe user’s user display name.\nValid colors for announcements\nAn error for an invalid AnnouncementColor\nThe color blue\nRepresents a donation “amount”\nThe color green\nThe color orange\nThe primary color for the broadcaster\nThe color purple\nThe ISO-4217 three-letter currency code that identifies …\nThe number of decimal places used by the currency. For …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe monetary amount.\nBody parameters\nBody parameters\nBody parameters\nErrors that can happen when creating a body\nHttp client error\nError type to combine a http client error with a other …\nErrors for <code>HelixClient::req_get</code> and similar functions.\nCould not create request\nCould not create request\nA cursor is a pointer to the current “page” in the …\nA cursor is a pointer to the current “page” in the …\nCustom error\n{0}\n{0}\ndeserialization failed when processing request response …\ndeserialization failed when processing request response …\ndeserialization failed when processing request response …\ndeserialization failed when processing request response …\nAn empty body.\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nfield serializer only supports strings, sequences, …\nClient for Helix or the New Twitch API\nCreate a body. Used for specializing request bodies\nCould not parse DELETE response\nGot error from DELETE response\nCould not parse GET response\nGot error from GET response\nCould not parse PATCH response\nGot error from PATCH response\nCould not parse POST response\nGot error from POST response\nCould not parse PUT response\nGot error from PUT response\nhttp crate returned an error\nRequest failed from reqwests side\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\nErrors that can happen when creating <code>http::Uri</code> for <code>Request</code>\ncould not assemble URI for request\nuri is invalid\ncould not serialize as json\nNo pagination found\nOptional scopes needed by this endpoint\nOther error\nThe path to the endpoint relative to the helix root. eg. …\nA request that can be paginated.\npair serializer only supports strings, integers, floats, …\ncould not serialize request to query\ncould not serialize to query\nA request is a Twitch endpoint, see New Twitch API …\nHelix endpoint DELETEs information\nRequest failed from reqwests side\nHelix endpoint GETs information\nHelix endpoint PATCHs information\nHelix endpoint POSTs information\nHelix endpoint PUTs information\nResponse retrieved from endpoint. Data is the type in …\nResponse type. twitch’s response will  deserialize to …\nScopes needed for this endpoint\nErrors from the query serializer\nserialization of body failed\nserializer only supports structs and maps on top-level\nURI could not be parsed\ncould not assemble URI for request\ncould not parse response as utf8 when calling <code>GET {2}</code>\ncould not parse response as utf8 when calling <code>PUT {2}</code>\ncould not parse response as utf8 when calling <code>POST {2}</code>\ncould not parse response as utf8 when calling <code>POST {2}</code>\ncould not parse response as utf8 when calling <code>DELETE {2}</code>\nvalue serializer only supports primitive types\nGet a borrowed <code>Cow&lt;&#39;_, CursorRef&gt;</code>\nProvides access to the underlying value as a string slice.\nHelix endpoints regarding bits\nHelix endpoints regarding content classification cabels\nHelix endpoints regarding channels\nHelix endpoints regarding charities\nHelix endpoints regarding chat\nClient for Helix endpoints\nHelix endpoints regarding clips\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nTwitch’s response field for <code>data</code>.\nHelix endpoints regarding EventSub\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new Cursor from a static reference\nTransparently reinterprets the static string slice as a …\nTransparently reinterprets the string slice as a …\nHelix endpoints regarding games\nReturns bare URI for the request, NOT including query …\nReturns full URI for the request, including query …\nHelix endpoints regarding creator goals\nHelix endpoints regarding hype trains\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>Cursor</code> into a <code>Box&lt;CursorRef&gt;</code>\nConverts a <code>Box&lt;CursorRef&gt;</code> into a <code>Cursor</code> without copying or …\nMake a paginate-able request into a stream\nHelix endpoints regarding moderation\nConstructs a new Cursor\nFields which are not part of the data response, but are …\nA cursor value, to be used in a subsequent request to …\nParse a response string into the response.\nParse a response string into the response.\nParse a response string into the response.\nParse a response string into the response.\nParse a response string into the response.\nParse response.\nParse response.\nParse response.\nParse response.\nParse response.\nHelix endpoints regarding channel points/redeems\nThe current number of subscriber points earned by this …\nHelix endpoints regarding channel polls\nHelix endpoints regarding channel predictions\nDefines layout of the url parameters.\nHelix endpoints regarding channel raids\nRequests for driving the API\nThe request that was sent, used for pagination.\nResponses contains the return values of a request.\nHelix endpoints regarding stream schedules\nHelix endpoints regarding search\nShould returns the current pagination cursor.\nHelix endpoints regarding streams\nHelix endpoints regarding subscriptions\nHelix endpoints regarding tags\nUnwraps the underlying <code>String</code> value\nHelix endpoints regarding subscriptions\nResponse would return this many results if fully …\nCreate the body\nHelix endpoints regarding users\nHelix endpoints regarding videos\nHelix endpoints regarding whispers\nBody sent to DELETE response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nBody sent to POST response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nBody sent to POST response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nBody sent to PUT response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nLocation where this was triggered\nLocation where this was triggered\nLocation where this was triggered\nLocation where this was triggered\nReturn Values for Get Bits Leaderboard\nReturn Values for Get Cheermotes\nQuery Parameters for Get Bits Leaderboard\nQuery Parameters for Get Cheermotes\nGet Cheermotes in a specific broadcasters channel.\nID for the broadcaster who might own specialized …\nCreate a builder for building <code>GetBitsLeaderboardRequest</code>. …\nCreate a builder for building <code>GetCheermotesRequest</code>. On the …\nNumber of results to be returned. Maximum: 100. Default: …\nNumber of results to be returned. Maximum: 100. Default: …\nPeriod over which the returned data is aggregated.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a ranked list of Bits leaderboard information for an …\nRetrieves the list of available Cheermotes, animated …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether or not this emote provides a charity …\nThe data when this Cheermote was last updated.\nLeaderboard\nReturns an new <code>GetBitsLeaderboardRequest</code>\nGet available Cheermotes.\nOrder of the emotes as shown in the bits card, in …\nGet loaderboard for this period. Valid values: <code>&quot;day&quot;</code>, …\nTime period over which data is aggregated (PST time zone). …\nPrefix for cheermote\nGet leaderboard starting at this timestamp\nTimestamp for the period over which the returned data is …\nAn array of Cheermotes with their metadata.\nTotal number of results (users) returned. This is count or …\nShows whether the emote is <code>global_first_party</code>,  …\nGet leaderboard where this user is included (if they are …\nID of the user whose results are returned; i.e., the …\nReturn Values for Get Bits Leaderboard\nPeriod over which the returned data is aggregated.\nQuery Parameters for Get Bits Leaderboard\nInformation about user in leaderboard\nNumber of results to be returned. Maximum: 100. Default: …\nPeriod over which the returned data is aggregated.\nEnd of the date range for the returned data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLeaderboard\nTime period over which data is aggregated (PST time zone). …\nLeaderboard rank of the user.\nLeaderboard score (number of Bits) of the user\nTimestamp for the period over which the returned data is …\nStart of the date range for the returned data.\nTotal number of results (users) returned. This is count or …\nID of the user whose results are returned; i.e., the …\nID of the user (viewer) in the leaderboard entry.\nUser login name.\nDisplay name corresponding to user_id.\nCustom channel cheermote\nReturn Values for Get Cheermotes\nURLs to the same image, animated or static.\nImages in sizes\nImages for different themes\nTypes of cheermotes\nDisplay only\nQuery Parameters for Get Cheermotes\nGlobal cheermote\nGlobal third party cheermote\nLevel of cheermote image\nSponsored cheermote\nInformation about tier of emote\nAnimated GIFs\nID for the broadcaster who might own specialized …\nIndicates whether or not emote information is accessible …\nHex code for the color associated with the bits of that …\nDark mode\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the emote tier. Possible tiers are: …\nStructure containing both animated and static image sets, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether or not this emote provides a charity …\nThe data when this Cheermote was last updated.\nLight mode\nMinimum number of bits needed to be used to hit the given …\nOrder of the emotes as shown in the bits card, in …\nPrefix for cheermote\nIndicates whether or not we hide the emote from the bits …\nStatic PNGs\nAn array of Cheermotes with their metadata.\nShows whether the emote is <code>global_first_party</code>,  …\nURL to image in size 42 × 42\nURL to image in size 28 × 28\nURL to image in size 56 × 56\nURL to image in size 84 × 84\nURL to image in size 112 × 112\nReturn Values for Get Content Classification Labels\nQuery Parameters for Get Content Classification Labels\nCreate a builder for building …\nLocalized description of the CCL.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets information about Twitch content classification …\nUnique identifier for the CCL.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRequest content classification labels for some locale\nLocale for the Content Classification Labels. You may …\nLocalized name of the CCL.\nReturns an new <code>GetContentClassificationLabelsRequest</code>\nReturn Values for Get Content Classification Labels\nQuery Parameters for Get Content Classification Labels\nLocalized description of the CCL.\nUnique identifier for the CCL.\nLocale for the Content Classification Labels. You may …\nLocalized name of the CCL.\nReturn Values for Get Ad Schedule\nQuery Parameters for Add Channel Vip\nReturn Values for Add Channel Vip\nReturn Values for Get Channel Information\nList of labels that should be set as the Channel’s CCLs.\nReturn Values for Get Channel Editors\nReturn Values for Get Followed Channels\nReturn Values for Get Channel Followers\nQuery Parameters for Get Ad Schedule\nQuery Parameters for Get Channel Editors\nQuery Parameters for Get Channel Followers\nQuery Parameters for Get Channel Information\nQuery Parameters for Get Followed Channels\nQuery Parameters for Get VIPs\nReturn Values for Modify Channel Information\nBody Parameters for Modify Channel Information\nQuery Parameters for Modify Channel Information\nQuery Parameters for Remove Channel VIP\nReturn Values for Remove Channel VIP\nQuery Parameters for Snooze Next Ad\nReturn Values for Snooze Next Ad\nReturn Values for Start Commercial\nBody Parameters for Start Commercial\nQuery Parameters for Start Commercial\nSuccessfully added the VIP.\n204 - Channel/Stream updated successfully\nSuccessfully removed the VIP.\nReturn Values for Get VIPs\nAdds a VIP to the broadcaster’s chat room. …\nCursor for forward pagination: tells the server where to …\nCursor for forward pagination: tells the server where to …\nThe cursor used to get the next page of results. The …\nGet specified broadcasters ad schedule information\nGet specified broadcasters channel editors\nGet specified broadcasters channel editors\nCheck if the user is following this broadcaster\nGet channel VIPs in channel\nModify specified broadcasters channel\nModify specified broadcasters channel\nThe ID of the broadcaster that’s granting VIP status to …\nBroadcaster’s user ID associated with the channel.\nBroadcaster’s user ID associated with the channel.\nBroadcaster’s user ID associated with the channel.\nID of the channel\nTwitch User ID of this channel owner\nFollowedBroadcaster’s user ID associated with the …\nAn ID that uniquely identifies the broadcaster that this …\nThe ID of the broadcaster whose list of VIPs you want to …\nID of the channel\nThe ID of the broadcaster that’s removing VIP status …\nID of the channel\nID of the channel requesting a commercial\nGet channel information for specific broadcasters.\nLanguage of the channel\nLanguage of the channel\nLanguage of the channel\nTwitch User login of this channel owner\nThe broadcaster’s login name.\nTwitch user display name of this channel owner\nThe broadcaster’s display name.\nCreate a builder for building <code>AddChannelVipRequest</code>. On the …\nCreate a builder for building <code>GetAdScheduleRequest</code>. On the …\nCreate a builder for building <code>GetChannelEditorsRequest</code>. On …\nCreate a builder for building <code>GetChannelFollowersRequest</code>. …\nCreate a builder for building <code>GetChannelInformationRequest</code>.\nCreate a builder for building <code>GetFollowedChannels</code>. On the …\nCreate a builder for building <code>GetVipsRequest</code>. On the …\nCreate a builder for building …\nCreate a builder for building <code>ModifyChannelInformationBody</code>.\nCreate a builder for building <code>RemoveChannelVipRequest</code>. On …\nCreate a builder for building <code>SnoozeNextAdRequest</code>. On the …\nCreate a builder for building <code>StartCommercialBody</code>. On the …\nList of labels that should be set as the Channel’s CCLs.\nThe CCLs applied to the channel.\nList of labels that should be set as the Channel’s CCLs.\nDate and time the editor was given editor permissions.\nThe number of seconds you want your broadcast buffered …\nStream delay in seconds\nThe number of seconds you want your broadcast buffered …\nDescription of the stream\nThe length in seconds of the scheduled upcoming ad break.\nSet amount of results returned per page.\nSet amount of results returned per page.\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100. …\nMaximum number of objects to return. Maximum: 100. …\nThe maximum number of items to return per page in the …\nThe UTC timestamp when the user started following the …\nThe UTC timestamp when the user started following the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCurrent game ID being played on the channel. Use “0” …\nCurrent game ID being played on the channel\nCurrent game ID being played on the channel. Use “0” …\nName of the game being played on the channel\nGets ad schedule related information, including snooze, …\nGets a list of users who have editor permissions for a …\nGets a list of users that follow the specified …\nGets channel information for users. <code>get-channel-information</code>\nGets a list of broadcasters that the specified user …\nGets a list of the channel’s VIPs. <code>get-vips</code>\nID of the Content Classification Labels that must be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBoolean flag indicating if the channel has branded content.\nBoolean flag indicating if the channel has branded content.\nBoolean flag indicating if the channel has branded content.\nBoolean flag indicating whether the label should be …\nThe UTC timestamp of the broadcaster’s last ad-break, in …\nDesired length of the commercial in seconds. Valid options …\nLength of the triggered commercial\nProvides contextual information on why the request failed\nModify channel information for users. …\nAdd a channel VIP\nData to set on the stream.\nCreate a new <code>ContentClassificationLabel</code>\nRemove channel VIP\nCreate a new <code>StartCommercialRequest</code>\nStart a commercial in this broadcasters channel\nThe UTC timestamp of the broadcaster’s next scheduled …\nThe UTC timestamp of the broadcaster’s next scheduled …\nThe amount of pre-roll free time remaining for the channel …\nRemoves a VIP from the broadcaster’s chat room. …\nSeconds until the next commercial can be served on this …\nThe number of snoozes available for the broadcaster.\nThe number of snoozes available for the broadcaster.\nIf available, pushes back the timestamp of the upcoming …\nThe UTC timestamp when the broadcaster will gain an …\nThe UTC timestamp when the broadcaster will gain an …\nStarts a commercial on a specified channel. …\nA list of channel-defined tags to apply to the channel. To …\nThe tags applied to the channel.\nA list of channel-defined tags to apply to the channel. To …\nTitle of the stream. Value must not be an empty string.\nTitle of the stream\nTitle of the stream. Value must not be an empty string.\nCheck if this user id is following the broadcaster\nGet specified users followed channels\nThe ID of the user to add as a VIP in the broadcaster’s …\nUser ID of the editor.\nA user’s ID. Use this parameter to see whether the user …\nAn ID that uniquely identifies the user that’s following …\nA user’s ID. Use this parameter to see whether the user …\nFilters the list for specific VIPs. To specify more than …\nAn ID that uniquely identifies the VIP user.\nThe ID of the user to remove as a VIP from the …\nFilter response with these IDs\nThe user’s login name.\nThe user’s login name.\nDisplay name of the editor.\nThe user’s display name.\nThe user’s display name.\nQuery Parameters for Add Channel Vip\nReturn Values for Add Channel Vip\nSuccessfully added the VIP.\nThe ID of the broadcaster that’s granting VIP status to …\nThe ID of the user to add as a VIP in the broadcaster’s …\nReturn Values for Get Ad Schedule\nQuery Parameters for Get Ad Schedule\nBroadcaster’s user ID associated with the channel.\nThe length in seconds of the scheduled upcoming ad break.\nThe UTC timestamp of the broadcaster’s last ad-break, in …\nThe UTC timestamp of the broadcaster’s next scheduled …\nThe amount of pre-roll free time remaining for the channel …\nThe number of snoozes available for the broadcaster.\nThe UTC timestamp when the broadcaster will gain an …\nReturn Values for Get Channel Editors\nQuery Parameters for Get Channel Editors\nBroadcaster’s user ID associated with the channel.\nDate and time the editor was given editor permissions.\nUser ID of the editor.\nDisplay name of the editor.\nReturn Values for Get Channel Followers\nQuery Parameters for Get Channel Followers\nCursor for forward pagination: tells the server where to …\nBroadcaster’s user ID associated with the channel.\nMaximum number of objects to return. Maximum: 100. …\nThe UTC timestamp when the user started following the …\nA user’s ID. Use this parameter to see whether the user …\nAn ID that uniquely identifies the user that’s following …\nThe user’s login name.\nThe user’s display name.\nReturn Values for Get Channel Information\nQuery Parameters for Get Channel Information\nID of the channel\nTwitch User ID of this channel owner\nLanguage of the channel\nTwitch User login of this channel owner\nTwitch user display name of this channel owner\nThe CCLs applied to the channel.\nStream delay in seconds\nDescription of the stream\nCurrent game ID being played on the channel\nName of the game being played on the channel\nBoolean flag indicating if the channel has branded content.\nThe tags applied to the channel.\nTitle of the stream\nReturn Values for Get Followed Channels\nQuery Parameters for Get Followed Channels\nCursor for forward pagination: tells the server where to …\nFollowedBroadcaster’s user ID associated with the …\nAn ID that uniquely identifies the broadcaster that this …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nMaximum number of objects to return. Maximum: 100. …\nThe UTC timestamp when the user started following the …\nA user’s ID. Use this parameter to see whether the user …\nQuery Parameters for Get VIPs\nReturn Values for Get VIPs\nThe cursor used to get the next page of results. The …\nThe ID of the broadcaster whose list of VIPs you want to …\nThe maximum number of items to return per page in the …\nFilters the list for specific VIPs. To specify more than …\nAn ID that uniquely identifies the VIP user.\nThe user’s login name.\nThe user’s display name.\nList of labels that should be set as the Channel’s CCLs.\nReturn Values for Modify Channel Information\nBody Parameters for Modify Channel Information\nQuery Parameters for Modify Channel Information\n204 - Channel/Stream updated successfully\nID of the channel\nLanguage of the channel\nList of labels that should be set as the Channel’s CCLs.\nThe number of seconds you want your broadcast buffered …\nCurrent game ID being played on the channel. Use “0” …\nID of the Content Classification Labels that must be …\nBoolean flag indicating if the channel has branded content.\nBoolean flag indicating whether the label should be …\nA list of channel-defined tags to apply to the channel. To …\nTitle of the stream. Value must not be an empty string.\nQuery Parameters for Remove Channel VIP\nReturn Values for Remove Channel VIP\nSuccessfully removed the VIP.\nThe ID of the broadcaster that’s removing VIP status …\nThe ID of the user to remove as a VIP from the …\nQuery Parameters for Snooze Next Ad\nReturn Values for Snooze Next Ad\nID of the channel\nThe UTC timestamp of the broadcaster’s next scheduled …\nThe number of snoozes available for the broadcaster.\nThe UTC timestamp when the broadcaster will gain an …\nReturn Values for Start Commercial\nBody Parameters for Start Commercial\nQuery Parameters for Start Commercial\nID of the channel requesting a commercial\nDesired length of the commercial in seconds. Valid options …\nLength of the triggered commercial\nProvides contextual information on why the request failed\nSeconds until the next commercial can be served on this …\nReturn Values for Get Charity Campaign\nReturn Values for Get Charity Campaign Donations\nQuery Parameters for Get Charity Campaign Donations\nQuery Parameters for Get Charity Campaign\nThe cursor used to get the next page of results. The …\nAn object that contains the amount of money that the user …\nGets information about the charity campaign that a …\nGets information about the charity campaign that a …\nThe ID of the broadcaster that’s actively running a …\nAn ID that uniquely identifies the broadcaster that’s …\nThe ID of the broadcaster that’s currently running a …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nCreate a builder for building <code>GetCharityCampaignRequest</code>. …\nCreate a builder for building …\nAn ID that identifies the charity campaign that the …\nA description of the charity.\nA URL to an image of the charity’s logo. The image’s …\nThe charity’s name.\nA URL to the charity\nThe current amount of donations that the campaign has …\nSet amount of results returned per page.\nThe maximum number of items to return per page in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets information about the charity campaign that a …\nGets the list of donations that users have made to the …\nAn ID that uniquely identifies the charity campaign.\nAn ID that identifies the donation. The ID is unique …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn object that contains the amount of money that the …\nAn ID that identifies a user that donated money to the …\nThe user’s login name.\nThe user’s display name.\nReturn Values for Get Charity Campaign\nQuery Parameters for Get Charity Campaign\nThe ID of the broadcaster that’s actively running a …\nAn ID that uniquely identifies the broadcaster that’s …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nA description of the charity.\nA URL to an image of the charity’s logo. The image’s …\nThe charity’s name.\nA URL to the charity\nThe current amount of donations that the campaign has …\nAn ID that uniquely identifies the charity campaign.\nAn object that contains the amount of money that the …\nReturn Values for Get Charity Campaign Donations\nQuery Parameters for Get Charity Campaign Donations\nThe cursor used to get the next page of results. The …\nAn object that contains the amount of money that the user …\nThe ID of the broadcaster that’s currently running a …\nAn ID that identifies the charity campaign that the …\nThe maximum number of items to return per page in the …\nAn ID that identifies the donation. The ID is unique …\nAn ID that identifies a user that donated money to the …\nThe user’s login name.\nThe user’s display name.\nValid colors for announcements\nA set of badges\nThe color blue\nA chat emote\nA chat Badge\nCode for why a message was dropped.\nA drop reason of a sent message.\nChat settings\nReturn Values for Get Chatters\nQuery Parameters for Get Channel Chat Badges\nQuery Parameters for Get Channel Emotes\nQuery Parameters for Get Chat Settings\nQuery Parameters for Get Chatters\nQuery Parameters for Get Channel Emotes\nQuery Parameters for Get Global Chat Badges\nQuery Parameters for Get Channel Emotes\nQuery Parameters for Get Shared Chat Session\nQuery Parameters for Get Chatters\nQuery Parameters for Get User Emotes\nA chat emote\nThe color green\nYour message was not sent because it contained too many …\nYou are permanently banned from talking in <code>&lt;channel&gt;</code>.\nYour message was not sent because your account is not in …\nThis channel does not exist or has been suspended.\nYour message was not sent because it is identical to the …\nThis room is in emote-only mode. You can find your …\nThis room is in <code>&lt;duration&gt;</code> followers-only mode. Follow …\nThis room is in <code>&lt;duration1&gt;</code> followers-only mode. You have …\nThis room is in followers-only mode. Follow <code>&lt;channel&gt;</code> to …\nThis room is in unique-chat mode and the message you …\nYour message was not sent because you are sending messages …\nHey! Your message is being checked by mods and has not …\nYour message wasn’t posted due to conflicts with the …\nA verified phone number is required to chat in this …\nThis room is in slow mode and you are sending messages too …\nThis room is in subscribers only mode. To talk, purchase a …\nYou don’t have permission to perform that action.\nYou are timed out for <code>&lt;number&gt;</code> more seconds.\nThis room requires a verified account to chat. Please …\nThe color orange\nThe primary color for the broadcaster\nThe color purple\nQuery Parameters for Send A Shoutout\nReturn Values for Send A Shoutout\nBody Parameters for Send Chat Announcement\nQuery Parameters for Send Chat Announcement\nReturn Values for Send Chat Announcement\nBody Parameters for Send Chat message\nQuery Parameters for Send Chat message\nReturn Values for Send Chat message\nA participant in a shared chat session\nReturn Values for Get Shared Chat Session\nShoutout successful\nSuccessfully sent the announcement.\nSuccessfully updated the user’s chat color.\nAn unknown drop-code.\nBody Parameters for Update Chat Settings\nQuery Parameters for Update Chat Settings\nQuery Parameters for Update Chat Settings\nReturn Values for Update Chat Settings\nReturn Values for Get Chatters\nReturn Values for Get User Emotes\nThe cursor used to get the next page of results. The …\nThe cursor used to get the next page of results. The …\nGet chat badges for the specified broadcaster.\nGet emotes in a specific broadcasters channel.\nGet chat settings for broadcasters channel\nRetrieve the active shared chat session for a channel\nThe broadcaster whose chat badges are being requested. …\nThe broadcaster whose emotes are being requested.\nThe ID of the broadcaster whose chat settings you want to …\nThe ID of the broadcaster whose list of chatters you want …\nThe User ID of the channel broadcaster.\nThe User ID of the participant channel.\nThe User ID of a broadcaster you wish to get follower …\nThe ID of the broadcaster that owns the chat room to send …\nThe ID of the broadcaster whose chat room the message will …\nThe ID of the broadcaster whose chat settings you want to …\nThe ID of the broadcaster specified in the request.\nCreate a builder for building <code>GetChannelChatBadgesRequest</code>. …\nCreate a builder for building <code>GetChannelEmotesRequest</code>. On …\nCreate a builder for building <code>GetChatSettingsRequest</code>. On …\nCreate a builder for building <code>GetChattersRequest</code>. On the …\nCreate a builder for building <code>GetEmoteSetsRequest</code>. On the …\nCreate a builder for building <code>GetGlobalChatBadgesRequest</code>. …\nCreate a builder for building <code>GetGlobalEmotesRequest</code>. On …\nCreate a builder for building <code>GetSharedChatSessionRequest</code>. …\nCreate a builder for building <code>GetUserChatColorRequest</code>. On …\nCreate a builder for building <code>GetUserEmotesRequest</code>. On the …\nCreate a builder for building <code>SendAShoutoutRequest</code>. On the …\nCreate a builder for building <code>SendChatAnnouncementRequest</code>. …\nCreate a builder for building <code>SendChatAnnouncementBody</code>. On …\nCreate a builder for building <code>SendChatMessageBody</code>. On the …\nCreate a builder for building <code>UpdateChatSettingsRequest</code>. …\nCreate a builder for building <code>UpdateChatSettingsBody</code>. On …\nCreate a builder for building <code>UpdateUserChatColorRequest</code>. …\nCode for why the message was dropped.\nThe Hex color code that the user uses in chat for their …\nThe color used to highlight the announcement. Possible …\nThe color to use for the user’s name in chat.\nThe UTC date and time (in RFC3339 format) for when the …\nDescrition of the badge\nThe reason the message was dropped, if any.\nA Boolean value that determines whether chat messages must …\nA Boolean value that determines whether chat messages must …\nThe broadcaster whose emotes are being requested. Minimum: …\nID of the emote set the emote belongs to.\nID of the emote set the emote belongs to.\nGet emotes in these sets\nThe type of emote.\nThe type of emote.\nSet amount of results returned per page.\nThe maximum number of items to return per page in the …\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nThe length of time, in minutes, that the followers must …\nThe length of time, in minutes, that the followers must …\nThe formats that the emote is available in.\nThe formats that the emote is available in.\nThe formats that the emote is available in.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ID of the broadcaster that’s sending the Shoutout.\nGets a list of custom chat badges that can be used in chat …\nGets all custom emotes for a specific Twitch channel …\nGets the broadcaster’s chat settings. <code>get-chat-settings</code>\nGets the list of users that are connected to the specified …\nGets all Twitch emotes for one or more specific emote sets.\nGets a list of chat badges that can be used in chat for …\nGets all global emotes. Global emotes are Twitch-specific …\nRetrieves the active shared chat session for a channel. …\nGets the color used for the user’s name in chat. …\nRetrieves emotes available to the user across all channels.\nThe User ID of the host channel.\nEmote ID.\nID of the chat badge version.\nID of the emote.\nID of the emote.\nURL to png of size 28x28\nURL to png of size 56x56\nURL to png of size 112x112\nObject of image URLs for the emote.\nObject of image URLs for the emote.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the message passed all checks and was sent.\nThe announcement to make in the broadcaster’s chat room. …\nThe message to send.\nMessage for why the message was dropped.\nThe message id for the message that was sent.\nThe ID of a user that has permission to moderate the …\nRequired only to access the <code>non_moderator_chat_delay</code> or …\nThe ID of the moderator or the specified broadcaster …\nThe ID of the broadcaster or a user that is one of the …\nThe ID of a user who has permission to moderate the …\nThe ID of a user that has permission to moderate the …\nThe ID of the moderator specified in the request for chat …\nName of the emote a viewer types into Twitch chat for the …\nName of the emote a viewer types into Twitch chat for the …\nName of the emote a viewer types into Twitch chat for the …\nGet chatters in broadcasters channel\nGet global chat badges\nGet global emotes\nCreate a new <code>SendAShoutoutRequest</code>\nSend announcement in channel as this moderator\nCreate a new announcement with specified color\nCreate a new <code>SendChatMessageRequest</code>\nSend a message in the broadcaster’s channel\nUpdate the chat settings for the specified broadcaster as …\nUpdate the users chat color\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nThe amount of time, in seconds, that messages are delayed …\nThe amount of time, in seconds, that messages are delayed …\nUser ID of the broadcaster who owns the emote.\nThe list of participants in the session.\nSet the reply parent message-id\nThe ID of the chat message being replied to.\nThe sizes that the emote is available in.\nThe sizes that the emote is available in.\nThe sizes that the emote is available in.\nSends a Shoutout to the specified broadcaster. …\nSends an announcement to the broadcaster’s chat room. …\nSends an message in the broadcaster’s chat room. …\nThe ID of the user sending the message. This ID must match …\nThe unique identifier for the shared chat session.\nID for the chat badge set.\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nThe amount of time, in seconds, that users need to wait …\nThe amount of time, in seconds, that users need to wait …\nA Boolean value that determines whether only users that …\nA Boolean value that determines whether only users that …\nThe background themes that the emote is available in.\nThe background themes that the emote is available in.\nThe background themes that the emote is available in.\nIf the emote_type is “subscriptions”, this indicates …\nTitle of the badge\nThe ID of the broadcaster that’s receiving the Shoutout.\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nUpdates the broadcaster’s chat settings. …\nUpdates the color used for the user’s name in chat.\nThe UTC date and time (in RFC3339 format) for when the …\nCreate an emote builder for this emote.\nCreate an emote builder for this emote.\nGet emotes available to the user across all channels.\nThe ID of a user that’s connected to the broadcaster’s …\nThe ID of the user whose color you want to get.\nThe ID of the user.\nThe ID of the user. This ID must match the user ID in the …\nThe ID of the user whose chat color you want to update.\nGet chat colors of specified users\nThe user’s login name.\nThe user’s login name.\nThe user’s display name.\nThe user’s display name.\nContains chat badge objects for the set.\nQuery Parameters for Get Channel Chat Badges\nReturn Values for Get Channel Chat Badges\nThe broadcaster whose chat badges are being requested. …\nID for the chat badge set.\nContains chat badge objects for the set.\nQuery Parameters for Get Channel Emotes\nReturn Values for Get Channel Emotes\nThe broadcaster whose emotes are being requested.\nID of the emote set the emote belongs to.\nThe type of emote.\nThe formats that the emote is available in.\nID of the emote.\nObject of image URLs for the emote.\nName of the emote a viewer types into Twitch chat for the …\nThe sizes that the emote is available in.\nThe background themes that the emote is available in.\nIf the emote_type is “subscriptions”, this indicates …\nQuery Parameters for Get Chat Settings\nThe ID of the broadcaster whose chat settings you want to …\nRequired only to access the <code>non_moderator_chat_delay</code> or …\nReturn Values for Get Chatters\nQuery Parameters for Get Chatters\nThe cursor used to get the next page of results. The …\nThe ID of the broadcaster whose list of chatters you want …\nThe maximum number of items to return per page in the …\nThe ID of the moderator or the specified broadcaster …\nThe ID of a user that’s connected to the broadcaster’s …\nThe user’s login name.\nThe user’s display name.\nReturn Values for Get Channel Emotes\nQuery Parameters for Get Channel Emotes\nThe broadcaster whose emotes are being requested. Minimum: …\nID of the emote set the emote belongs to.\nThe type of emote.\nThe formats that the emote is available in.\nReturns the argument unchanged.\nEmote ID.\nObject of image URLs for the emote.\nCalls <code>U::from(self)</code>.\nName of the emote a viewer types into Twitch chat for the …\nUser ID of the broadcaster who owns the emote.\nThe sizes that the emote is available in.\nThe background themes that the emote is available in.\nCreate an emote builder for this emote.\nQuery Parameters for Get Global Chat Badges\nReturn Values for Get Global Chat Badges\nID for the chat badge set.\nContains chat badge objects for the set.\nReturn Values for Get Channel Emotes\nQuery Parameters for Get Channel Emotes\nThe formats that the emote is available in.\nID of the emote.\nObject of image URLs for the emote.\nName of the emote a viewer types into Twitch chat for the …\nThe sizes that the emote is available in.\nThe background themes that the emote is available in.\nQuery Parameters for Get Shared Chat Session\nA participant in a shared chat session\nReturn Values for Get Shared Chat Session\nThe User ID of the channel broadcaster.\nThe User ID of the participant channel.\nThe UTC date and time (in RFC3339 format) for when the …\nThe User ID of the host channel.\nThe list of participants in the session.\nThe unique identifier for the shared chat session.\nThe UTC date and time (in RFC3339 format) for when the …\nQuery Parameters for Get Chatters\nReturn Values for Get Chatters\nThe Hex color code that the user uses in chat for their …\nThe ID of the user whose color you want to get.\nThe ID of the user.\nThe user’s login name.\nThe user’s display name.\nQuery Parameters for Get User Emotes\nReturn Values for Get User Emotes\nThe cursor used to get the next page of results. The …\nThe User ID of a broadcaster you wish to get follower …\nID of the emote set the emote belongs to.\nThe type of emote.\nThe formats that the emote is available in.\nEmote ID.\nName of the emote a viewer types into Twitch chat for the …\nUser ID of the broadcaster who owns the emote.\nThe sizes that the emote is available in.\nThe background themes that the emote is available in.\nThe ID of the user. This ID must match the user ID in the …\nQuery Parameters for Send A Shoutout\nReturn Values for Send A Shoutout\nShoutout successful\nThe ID of the broadcaster that’s sending the Shoutout.\nThe ID of the broadcaster or a user that is one of the …\nThe ID of the broadcaster that’s receiving the Shoutout.\nBody Parameters for Send Chat Announcement\nQuery Parameters for Send Chat Announcement\nReturn Values for Send Chat Announcement\nSuccessfully sent the announcement.\nThe ID of the broadcaster that owns the chat room to send …\nThe color used to highlight the announcement. Possible …\nThe announcement to make in the broadcaster’s chat room. …\nThe ID of a user who has permission to moderate the …\nCode for why a message was dropped.\nA drop reason of a sent message.\nYour message was not sent because it contained too many …\nYou are permanently banned from talking in <code>&lt;channel&gt;</code>.\nYour message was not sent because your account is not in …\nThis channel does not exist or has been suspended.\nYour message was not sent because it is identical to the …\nThis room is in emote-only mode. You can find your …\nThis room is in <code>&lt;duration&gt;</code> followers-only mode. Follow …\nThis room is in <code>&lt;duration1&gt;</code> followers-only mode. You have …\nThis room is in followers-only mode. Follow <code>&lt;channel&gt;</code> to …\nThis room is in unique-chat mode and the message you …\nYour message was not sent because you are sending messages …\nHey! Your message is being checked by mods and has not …\nYour message wasn’t posted due to conflicts with the …\nA verified phone number is required to chat in this …\nThis room is in slow mode and you are sending messages too …\nThis room is in subscribers only mode. To talk, purchase a …\nYou don’t have permission to perform that action.\nYou are timed out for <code>&lt;number&gt;</code> more seconds.\nThis room requires a verified account to chat. Please …\nBody Parameters for Send Chat message\nQuery Parameters for Send Chat message\nReturn Values for Send Chat message\nAn unknown drop-code.\nThe ID of the broadcaster whose chat room the message will …\nCode for why the message was dropped.\nThe reason the message was dropped, if any.\nIf the message passed all checks and was sent.\nThe message to send.\nMessage for why the message was dropped.\nThe message id for the message that was sent.\nThe ID of the chat message being replied to.\nThe ID of the user sending the message. This ID must match …\nBody Parameters for Update Chat Settings\nQuery Parameters for Update Chat Settings\nReturn Values for Update Chat Settings\nThe ID of the broadcaster specified in the request.\nThe ID of the broadcaster whose chat settings you want to …\nA Boolean value that determines whether chat messages must …\nA Boolean value that determines whether chat messages must …\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nThe length of time, in minutes, that the followers must …\nThe length of time, in minutes, that the followers must …\nThe ID of the moderator specified in the request for chat …\nThe ID of a user that has permission to moderate the …\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nThe amount of time, in seconds, that messages are delayed …\nThe amount of time, in seconds, that messages are delayed …\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nThe amount of time, in seconds, that users need to wait …\nThe amount of time, in seconds, that users need to wait …\nA Boolean value that determines whether only users that …\nA Boolean value that determines whether only users that …\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nSuccessfully updated the user’s chat color.\nQuery Parameters for Update Chat Settings\nReturn Values for Update Chat Settings\nThe color to use for the user’s name in chat.\nThe ID of the user whose chat color you want to update.\nHttp client error\nError type to combine a http client error with a other …\nClient for Helix or the New Twitch API\nOther error\nRetrieve a clone of the <code>HttpClient</code> inside this <code>HelixClient</code>\nRetrieve a reference of the <code>HttpClient</code> inside this …\nCreate a new <code>HelixClient</code> with a default <code>HttpClient</code>\nRequest on a valid <code>RequestDelete</code> endpoint\nRequest on a valid <code>RequestGet</code> endpoint\nRequest on a valid <code>RequestPatch</code> endpoint\nRequest on a valid <code>RequestPost</code> endpoint\nRequest on a valid <code>RequestPut</code> endpoint\nCreate a new client with an existing client\nReturn Values for Get Clips\nQuery Parameters for Create Clip\nReturn Value for Create Clip\nQuery Parameters for Get Clips\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nBroadcaster for whom clips are returned.\nCreate a new <code>CreateClipRequest</code> with the given …\nID of the broadcaster for whom clips are returned. The …\nUser ID of the stream from which the clip was created.\nThe ID of the broadcaster whose stream you want to create …\nDisplay name corresponding to broadcaster_id.\nCreate a builder for building <code>GetClipsRequest</code>. On the …\nCreate a builder for building <code>CreateClipRequest</code>. On the …\nIDs of clips being queried\nCreate Clip using Broadcaster ID (one only) <code>create-clip</code>\nDate when the clip was created.\nID of the user who created the clip.\nDisplay name corresponding to creator_id.\nDuration of the Clip in seconds (up to 0.1 precision).\nA URL that you can use to edit the clip’s title, …\nURL to embed the clip.\nAn empty request\nEnding date/time for the returned clips\nEnding date/time for returned clips, in RFC3339 format. …\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGame for which clips are returned.\nID of the game for which clips are returned. The number of …\nID of the game assigned to the stream when the clip was …\nGets clip information by clip ID (one or more), …\nSets the has_delay parameter\nA Boolean value that determines whether the API captures …\nID of the clip being queried. Limit: 100.\nID of the clip being queried.\nID of the created clip.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines whether the response includes featured clips. …\nIndicates if the clip is featured or not.\nLanguage of the stream from which the clip was created.\nEnding date/time for the returned clips\nStarting date/time for returned clips, in RFC3339 format. …\nURL of the clip thumbnail.\nTitle of the clip.\nURL where the clip can be viewed.\nID of the video from which the clip was created.\nNumber of times the clip has been viewed.\nThe zero-based offset, in seconds, to where the clip …\nQuery Parameters for Create Clip\nReturn Value for Create Clip\nThe ID of the broadcaster whose stream you want to create …\nA URL that you can use to edit the clip’s title, …\nA Boolean value that determines whether the API captures …\nID of the created clip.\nReturn Values for Get Clips\nQuery Parameters for Get Clips\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nID of the broadcaster for whom clips are returned. The …\nUser ID of the stream from which the clip was created.\nDisplay name corresponding to broadcaster_id.\nDate when the clip was created.\nID of the user who created the clip.\nDisplay name corresponding to creator_id.\nDuration of the Clip in seconds (up to 0.1 precision).\nURL to embed the clip.\nEnding date/time for returned clips, in RFC3339 format. …\nMaximum number of objects to return. Maximum: 100. …\nID of the game for which clips are returned. The number of …\nID of the game assigned to the stream when the clip was …\nID of the clip being queried. Limit: 100.\nID of the clip being queried.\nDetermines whether the response includes featured clips. …\nIndicates if the clip is featured or not.\nLanguage of the stream from which the clip was created.\nStarting date/time for returned clips, in RFC3339 format. …\nURL of the clip thumbnail.\nTitle of the clip.\nURL where the clip can be viewed.\nID of the video from which the clip was created.\nNumber of times the clip has been viewed.\nThe zero-based offset, in seconds, to where the clip …\nReturn Values for Get Conduit Shards\nBody Parameters for Create Conduit\nQuery Parameters for Create Conduit\nReturn Values for Create EventSub Subscription\nBody Parameters for Create EventSub Subscription\nQuery Parameters for Create EventSub Subscription\nQuery Parameters for Delete Conduit\nReturn Values for Delete Conduit\nReturn Values for Delete EventSub Subscriptions\nQuery Parameters for Delete EventSub Subscriptions\nReturn Values for Get EventSub Subscriptions\nQuery Parameters for Get Conduit Shards\nQuery Parameters for Get Conduits\nQuery Parameters for Get EventSub Subscriptions\n204 - Conduit deleted\n204 - Subscription deleted\nBody Parameters for Update Conduit\nQuery Parameters for Update Conduit\nBody Parameters for Update Conduit Shards\nQuery Parameters for Update Conduit Shards\nThe structured response for Update Conduit Shards\nSet the cursor to get a page of results\nThe cursor used to get the next page of results. The …\nCursor for forward pagination\nCreate a builder for building <code>CreateConduitRequest</code>. On the …\nCreate a builder for building <code>CreateConduitBody</code>. On the …\nCreate a builder for building …\nCreate a builder for building …\nCreate a builder for building <code>DeleteConduitRequest</code>. On the …\nCreate a builder for building …\nCreate a builder for building <code>GetConduitShardsRequest</code>. On …\nCreate a builder for building <code>GetConduitsRequest</code>. On the …\nCreate a builder for building …\nCreate a builder for building <code>UpdateConduitRequest</code>. On the …\nCreate a builder for building <code>UpdateConduitBody</code>. On the …\nCreate a builder for building <code>UpdateConduitShardsRequest</code>. …\nCreate a builder for building <code>UpdateConduitShardsBody</code>. On …\nJSON object specifying custom parameters for the …\nConduit ID.\nConduit ID.\nHow much the subscription counts against your limit.\nCreates a new conduit for your Client. <code>create-conduit</code>\nCreates an EventSub subscription.\nRFC3339 timestamp indicating when the subscription was …\nDeletes a specified conduit. <code>delete-conduit</code>\nDelete an EventSub subscription.\nList of unsuccessful updates.\nGet eventsub subscriptions by this type\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a list of all shards for a conduit. <code>get-conduit-shards</code>\nGet the conduits for your Client. <code>get-conduits</code>\nGet a list of your EventSub subscriptions.\nDelete this eventsub subscription.\nID of the subscription created.\nConduit ID.\nThe subscription ID for the subscription you want to …\nConduit ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum total cost allowed for all of the …\nThe maximum total cost allowed for all of the …\nConduit body settings\nCreate a new eventsub subscription\nCreate a new <code>CreateEventSubSubscriptionBody</code>\nDelete a specific conduit\nRequest the shards of a conduit\nConduit body settings\nConduit body settings\nThe number of shards to create for this conduit.\nThe new number of shards for this conduit.\nList of information about a conduit’s shards.\nList of successful shard updates.\nList of shards to update.\nFilter shards by a specific status\nGet eventsub subscriptions by this status\nStatus of the subscription.\nStatus to filter by.\nInclude this parameter to filter subscriptions by their …\nSubscription that will be created\nArray containing subscriptions.\nTotal number of subscriptions for the client ID that made …\nTotal number of subscriptions for the client ID that made …\nTotal cost of all the subscriptions for the client ID that …\nTotal cost of all the subscriptions for the client ID that …\nThe notification delivery specific information\nJSON object indicating the notification delivery specific …\nThe category of the subscription that was created.\nFilter subscriptions by subscription type (e.g., …\nUpdates a conduit’s shard count. <code>update-conduit</code>\nUpdates shard(s) for a conduit. <code>update-conduit-shards</code>\nFilter subscriptions by user ID.\nThe version of the subscription type that was created.\nBody Parameters for Create Conduit\nQuery Parameters for Create Conduit\nThe number of shards to create for this conduit.\nReturn Values for Create EventSub Subscription\nBody Parameters for Create EventSub Subscription\nQuery Parameters for Create EventSub Subscription\nJSON object specifying custom parameters for the …\nHow much the subscription counts against your limit.\nRFC3339 timestamp indicating when the subscription was …\nID of the subscription created.\nThe maximum total cost allowed for all of the …\nStatus of the subscription.\nSubscription that will be created\nTotal number of subscriptions for the client ID that made …\nTotal cost of all the subscriptions for the client ID that …\nThe notification delivery specific information\nJSON object indicating the notification delivery specific …\nThe category of the subscription that was created.\nThe version of the subscription type that was created.\nQuery Parameters for Delete Conduit\nReturn Values for Delete Conduit\n204 - Conduit deleted\nConduit ID.\nReturn Values for Delete EventSub Subscriptions\nQuery Parameters for Delete EventSub Subscriptions\n204 - Subscription deleted\nThe subscription ID for the subscription you want to …\nReturn Values for Get Conduit Shards\nQuery Parameters for Get Conduit Shards\nThe cursor used to get the next page of results. The …\nConduit ID.\nList of information about a conduit’s shards.\nStatus to filter by.\nQuery Parameters for Get Conduits\nReturn Values for Get EventSub Subscriptions\nQuery Parameters for Get EventSub Subscriptions\nCursor for forward pagination\nMaximum number of objects to return. Maximum: 100. …\nThe maximum total cost allowed for all of the …\nInclude this parameter to filter subscriptions by their …\nArray containing subscriptions.\nTotal number of subscriptions for the client ID that made …\nTotal cost of all the subscriptions for the client ID that …\nFilter subscriptions by subscription type (e.g., …\nFilter subscriptions by user ID.\nBody Parameters for Update Conduit\nQuery Parameters for Update Conduit\nConduit ID.\nThe new number of shards for this conduit.\nBody Parameters for Update Conduit Shards\nQuery Parameters for Update Conduit Shards\nThe structured response for Update Conduit Shards\nConduit ID.\nList of unsuccessful updates.\nList of successful shard updates.\nList of shards to update.\nA game or category as defined by Twitch\nQuery Parameters for Get Games\nQuery Parameters for Get Top Games\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nTemplate URL for the game’s box art.\nCreate a builder for building <code>GetGamesRequest</code>. On the …\nCreate a builder for building <code>GetTopGamesRequest</code>. On the …\nReturns an empty <code>GetGamesRequest</code>\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets game information by game ID or name. <code>get-games</code>\nGets games sorted by number of current viewers on Twitch, …\nGame or category ID.\nGame ID. At most 100 id values can be specified.\nGet games with specific exact id match.\nThe ID that IGDB uses to identify this game.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGame name.\nGame name. The name must be an exact match. For instance, …\nGet games with specific exact name match.\nReturn Values for Get Games\nQuery Parameters for Get Games\nTemplate URL for the game’s box art.\nGame or category ID.\nGame ID. At most 100 id values can be specified.\nThe ID that IGDB uses to identify this game.\nGame name.\nGame name. The name must be an exact match. For instance, …\nReturn Values for Get Top Games\nQuery Parameters for Get Top Games\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nTemplate URL for the game’s box art.\nMaximum number of objects to return. Maximum: 100. …\nGame or category ID.\nThe ID that IGDB uses to identify this game.\nGame name.\nReturn Values for Get Creator Goals\nQuery Parameters for Get Creator Goals\nGets the broadcaster’s list of active goals.\nMust match the User ID in the Bearer token.\nAn ID that uniquely identifies the broadcaster.\nThe broadcaster’s user handle.\nThe broadcaster’s display name.\nCreate a builder for building <code>GetCreatorGoalsRequest</code>. On …\nThe UTC timestamp in RFC 3339 format, which indicates when …\nThe current value.\nCursor for forward pagination: tells the server where to …\nA description of the goal, if specified. The description …\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the broadcaster’s list of active goals. Use this to …\nRetreive a single event by event ID\nAn ID that uniquely identifies this goal.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe goal’s target value. For example, if the broadcaster …\nThe type of goal.\nReturn Values for Get Creator Goals\nQuery Parameters for Get Creator Goals\nMust match the User ID in the Bearer token.\nAn ID that uniquely identifies the broadcaster.\nThe broadcaster’s user handle.\nThe broadcaster’s display name.\nThe UTC timestamp in RFC 3339 format, which indicates when …\nThe current value.\nCursor for forward pagination: tells the server where to …\nA description of the goal, if specified. The description …\nMaximum number of objects to return. Maximum: 100. …\nRetreive a single event by event ID\nAn ID that uniquely identifies this goal.\nThe goal’s target value. For example, if the broadcaster …\nThe type of goal.\nBits\nA contribution to a hype train\nType of contribution to a hype train\nQuery Parameters for Get Hype Train Events\nCovers other contribution methods not listed.\nChannel Subscriptions. Either gifted or not.\nGet hypetrain evens\nMust match the User ID in the Bearer token.\nCreate a builder for building <code>GetHypeTrainEventsRequest</code>. …\nCursor for forward pagination: tells the server where to …\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the information of the most recent Hype Train of the …\nRetreive a single event by event ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe total contributed.\nType of contribution. Valid values include bits, …\nThe ID of the user.\nQuery Parameters for Get Hype Train Events\nReturn Values for Get Hype Train Events\nEvent data for\nType of Hype Train event\nProgression\nMust match the User ID in the Bearer token.\nThe requested broadcaster ID.\nRFC3339 formatted timestamp of when another hype train can …\nCursor for forward pagination: tells the server where to …\nReturns <code>broadcaster_id</code>, <code>broadcaster_name</code>, <code>user_id</code>, …\nRFC3339 formatted timestamp for events.\nDisplays hypetrain.{event_name}, currently only …\nThe time at which the hype train expires. The expiration …\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe number of points required to reach the next level.\nRetreive a single event by event ID\nEvent ID\nThe distinct ID of this Hype Train\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe most recent contribution.\nCurrent level of hype train event.\nThe timestamp at which the hype train started.\nThe contributors with the most points contributed.\nTotal points contributed to the hype train.\nReturns the version of the endpoint.\nThe request has been approved and the user acknowledged …\nBody Parameters for Add Blocked Term\nQuery Parameters for Add Blocked Term\nQuery Parameters for Add Channel Moderator\nReturn Values for Add Channel Moderator\nQuery Parameters for Add Channel Vip\nReturn Values for Add Channel Vip\nAllow the message\nThe request has been approved by a moderator/broadcaster\nAction to take for a message.\nReturn Values for Get AutoMod Settings\nReturn Values for Ban User\nBody Parameters for Ban User\nQuery Parameters for Ban User\nReturn Values for Get Banned Users\nA blocked term in automod\nThe user cancelled the request\nReturn Values for Check AutoMod Status\nBody Parameters for Check AutoMod Status\nQuery Parameters for Check AutoMod Status\nQuery Parameters for Delete Chat Messages\nReturn Values for Delete Chat Messages\nThe request has been denied by a moderator/broadcaster\nDeny the message\nQuery Parameters for Get AutoMod Settings\nQuery Parameters for Get Banned Users\nQuery Parameters for Get Moderated Channels\nQuery Parameters for Get Moderators\nQuery Parameters for Get Shield Mode Status\nQuery Parameters for Get Unban Requests\nQuery Parameters for Get VIPs\nSet the individual levels for each setting\nInformation about a shield mode\nReturn Values for Manage Held AutoMod Messages\nBody Parameters for Manage Held AutoMod Messages\nQuery Parameters for Manage Held AutoMod Messages\nReturn Values for Get Moderated Channels\nReturn Values for Get Moderators\nSet the <code>overall_level</code>\nThe request has been created, but not yet resolved\nReturn Values for Remove Blocked Terms\nQuery Parameters for Remove Blocked Terms\nQuery Parameters for Remove Channel Moderator\nReturn Values for Remove Channel Moderator\nQuery Parameters for Remove Channel VIP\nReturn Values for Remove Channel VIP\nQuery Parameters for Resolve Unban Request\nReturn Values for Get Shield Mode Status\nSuccessfully added the VIP.\nSuccessfully removed the VIP.\nSuccessfully added the moderator.\nSuccessfully removed the specified messages.\nSuccessfully approved or denied the message\n204 - Term removed successfully.\nSuccessfully removed the moderator.\nUnban was successful\nReturn Values for Get Unban Requests\nThe status of an unban request\nQuery Parameters for Unban User\nReturn Values for Unban User\nBody Parameters for Update AutoMod Settings\nSet the individual levels for each setting\nQuery Parameters for Update AutoMod Settings\nReturn Values for Get VIPs\nReturn Values for Warn Chat User\nBody Parameters for Warn Chat User\nQuery Parameters for Warn Chat User\nThe action to take for the message. Must be “ALLOW” or …\nAdds a word or phrase to the broadcaster’s list of …\nAdds a moderator to the broadcaster’s moderation room. …\nAdds a VIP to the broadcaster’s chat room. …\nThe cursor used to get the next page of results. The …\nCursor for forward pagination: tells the server where to …\nThe cursor used to get the next page of results. The …\nCursor for forward pagination: tells the server where to …\nCursor used to get next page of results. Pagination object …\nThe Automod level for hostility involving aggression.\nThe Automod level for hostility involving aggression.\nApprove an unban request\nBans a user from participating in a broadcaster’s chat …\nCursor for backward pagination: tells the server where to …\nCheck automod status in this broadcasters channel.\nGet banned users in a broadcasters channel.\nGet moderators in a broadcasters channel.\nThe ID of the broadcaster that’s granting VIP status to …\nThe ID of the broadcaster whose list of VIPs you want to …\nThe ID of the broadcaster that’s removing VIP status …\nThe ID of the broadcaster that owns the list of blocked …\nThe ID of the broadcaster that owns the chat room.\nThe ID of the broadcaster whose chat room the user is …\nThe broadcaster whose chat room the user was banned from …\nMust match the User ID in the Bearer token.\nThe ID of the broadcaster that owns the chat room to …\nThe ID of the broadcaster whose AutoMod settings you want …\nThe broadcaster’s ID.\nMust match the User ID in the Bearer token.\nAn ID that uniquely identifies the channel this user can …\nMust match the User ID in the Bearer token.\nThe ID of the broadcaster whose Shield Mode activation …\nThe ID of the broadcaster whose channel is receiving unban …\nUser ID of broadcaster whose channel is receiving the …\nThe ID of the broadcaster that owns the list of blocked …\nThe ID of the broadcaster that owns the chat room.\nThe ID of the broadcaster whose channel is approving or …\nThe ID of the broadcaster whose chat room the user is …\nThe ID of the broadcaster whose AutoMod settings you want …\nThe ID of the broadcaster whose chat room the user is …\nThe broadcaster whose chat room the user was warned in.\nThe broadcaster that owns the list of blocked terms.\nThe channel’s login name.\nThe broadcaster’s login name.\nThe channels’ display name.\nThe broadcaster’s display name.\nCreate a builder for building <code>AddBlockedTermRequest</code>. On …\nCreate a builder for building <code>AddBlockedTermBody</code>. On the …\nCreate a builder for building <code>AddChannelModeratorRequest</code>. …\nCreate a builder for building <code>BanUserRequest</code>. On the …\nCreate a builder for building <code>BanUserBody</code>. On the builder, …\nCreate a builder for building <code>CheckAutoModStatusRequest</code>. …\nCreate a builder for building <code>CheckAutoModStatusBody</code>. On …\nCreate a builder for building <code>DeleteChatMessagesRequest</code>. …\nCreate a builder for building <code>GetAutoModSettingsRequest</code>. …\nCreate a builder for building <code>GetBannedUsersRequest</code>. On …\nCreate a builder for building <code>GetModeratedChannelsRequest</code>. …\nCreate a builder for building <code>GetModeratorsRequest</code>. On the …\nCreate a builder for building <code>GetShieldModeStatusRequest</code>. …\nCreate a builder for building <code>GetUnbanRequestsRequest</code>. On …\nCreate a builder for building …\nCreate a builder for building <code>ManageHeldAutoModMessagesBody</code>…\nCreate a builder for building <code>RemoveBlockedTermRequest</code>. On …\nCreate a builder for building <code>RemoveChannelModeratorRequest</code>…\nCreate a builder for building <code>ResolveUnbanRequest</code>. On the …\nCreate a builder for building <code>UnbanUserRequest</code>. On the …\nCreate a builder for building <code>UpdateAutoModSettingsRequest</code>.\nCreate a builder for building …\nCreate a builder for building <code>WarnChatUserRequest</code>. On the …\nCreate a builder for building <code>WarnChatUserBody</code>. On the …\nThe Automod level for hostility involving name calling or …\nThe Automod level for hostility involving name calling or …\nDetermines whether a string message meets the channel’s …\nThe UTC date and time (in RFC3999 format) when the ban was …\nTimestamp of when the unban request was created.\nThe UTC date and time (in RFC3339 format) of when the term …\nRemoves a single chat message or all chat messages from …\nDeny an unban request\nThe Automod level for discrimination against disability.\nThe Automod level for discrimination against disability.\nDuration of the (optional) timeout in seconds.\nThe UTC date and time (in RFC3339 format) that the timeout …\nRFC3339 formatted timestamp for timeouts; empty string for …\nThe UTC date and time (in RFC3339 format) of when the …\nSet amount of results returned per page.\nSet amount of results returned per page.\nSet amount of results returned per page.\nSet amount of results returned per page.\nThe maximum number of items to return per page in the …\nNumber of values to be returned per page. Limit: 100. …\nThe maximum number of items to return per page in the …\nNumber of values to be returned per page. Limit: 100. …\nThe maximum number of items to return per page in response\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an <code>Individual</code> from AutoModSettings\nConstructs an update on individual settings from …\nGets the broadcaster’s AutoMod settings. …\nReturns all banned and timed-out users in a channel. …\nGets the broadcaster’s list of non-private, blocked …\nGets a list of channels that the specified user has …\nReturns all moderators in a channel. <code>get-moderators</code>\nGets the broadcaster’s Shield Mode activation status. …\nGets a list of unban requests for a broadcaster’s …\nGets a list of the channel’s VIPs. <code>get-vips</code>\nUnban request ID.\nThe ID of the blocked term you want to delete.\nAn ID that uniquely identifies this blocked term.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA Boolean value that determines whether Shield Mode is …\nIndicates if this message meets AutoMod requirements.\nThe UTC timestamp (in RFC3339 format) of when Shield Mode …\nInformation about the last activated shield mode\nAllow or deny a message that was held for review by …\nA specific message to remove\nThe ID of the message to remove.\nThe Automod level for discrimination against women.\nThe Automod level for discrimination against women.\nThe ID of a user that has permission to moderate the …\nThe ID of the user to add as a moderator in the …\nThe ID of a user that has permission to moderate the …\nThe moderator that banned or put the user in the timeout.\nThe ID of a user that has permission to moderate the …\nThe ID of the broadcaster or a user that has permission to …\nThe moderator’s ID.\nUser ID of the moderator who initiated the ban.\nThe ID of the broadcaster or a user that is one of the …\nAn ID that identifies the moderator that last activated …\nThe ID of the broadcaster or a user that has permission to …\nUser ID of moderator who approved/denied the request.\nThe ID of a user that has permission to moderate the …\nThe ID of the user to remove as a moderator from the …\nThe ID of the broadcaster or a user that has permission to …\nThe ID of a user that has permission to moderate the …\nThe ID of the broadcaster or a user that has permission to …\nThe ID of a user that has permission to moderate the …\nThe moderator that warned the user.\nThe moderator that blocked the word or phrase from being …\nLogin of the moderator who initiated the ban.\nThe moderator’s login name.\nThe moderator’s login name.\nDisplay name of the moderator who initiated the ban.\nThe moderator’s display name.\nThe moderator’s display name.\nDeveloper-generated identifier for mapping messages to …\nThe msg_id passed in the body of the POST message. Maps …\nID of the message to be allowed or denied. These message …\nMessage text.\nWhere to add blocked term\nCreate a new <code>AddBlockedTermBody</code>\nAdd moderator on channel\nBan a user on this channel\nCreate a new <code>BanUserBody</code>\nCreate a new <code>CheckAutoModStatusBody</code>\nRemove chat message(s)\nGet AutoMod settings in a broadcasters channel as …\nGet shield mode status in a broadcasters channel as …\nGet Unban Requests in a broadcasters channel filtered by a …\nCreate a new <code>ManageHeldAutoModMessagesRequest</code>\nCreate a new <code>ManageHeldAutoModMessagesBody</code>\nRemove blocked term\nRemove moderator\nResolve an unban request\nRemove the ban or timeout that was placed on the specified …\nUpdate the AutoMod settings on the specified channel as …\nWarn a user on this channel\nCreate a new <code>WarnChatUserBody</code>\nSet the <code>overall_level</code>\nThe default AutoMod level for the broadcaster. This field …\nThe Automod level for racial discrimination.\nThe Automod level for racial discrimination.\nThe reason the user is being banned or put in a timeout. …\nThe reason for the ban if provided by the moderator.\nThe reason the user is being warned.\nThe reason provided for the warning.\nRemoves the word or phrase that the broadcaster is …\nRemoves a moderator from the broadcaster’s chat room. …\nRemoves a VIP from the broadcaster’s chat room. …\nSet the resolution text for a request\nText input by the resolver (moderator) of the unban. …\nMessage supplied by the unban request resolver. The …\nResolves an unban request by approving or denying it.\nTimestamp of when moderator/broadcaster approved or denied …\nThe Automod level for sexual content.\nThe Automod level for sexual content.\nThe AutoMod level for discrimination based on sexuality, …\nThe AutoMod level for discrimination based on sexuality, …\nFilter by a status.\nStatus of the request.\nResolution status.\nThe Automod level for profanity.\nThe Automod level for profanity.\nThe word or phrase to block from being used in the …\nText of the request from the requesting user.\nThe blocked word or phrase.\nThe ID of the Unban Request to resolve.\nRemoves the ban or timeout that was placed on the …\nUpdates the broadcaster’s AutoMod settings.\nActivates or deactivates the broadcaster’s Shield Mode.\nThe UTC date and time (in RFC3339 format) of when the term …\nFilter for unban requests from a specific user\nGet Moderated Channels for an authenticated user.\nThe ID of the user to add as a VIP in the broadcaster’s …\nFilters the list for specific VIPs. To specify more than …\nAn ID that uniquely identifies the VIP user.\nThe ID of the user to remove as a VIP from the …\nThe ID of the user to ban or put in a timeout.\nThe user that was banned or was put in a timeout.\nUser ID of the sender.\nFilters the results and only returns a status object for …\nUser ID of a user who has been banned.\nA user’s ID. Returns the list of channels that this user …\nFilters the results and only returns a status object for …\nUser ID of a moderator in the channel.\nThe ID used to filter what unban requests are returned.\nUser ID of the requestor who is asking for an unban.\nThe moderator who is approving or rejecting the held …\nThe ID of the user to remove the ban or timeout from.\nThe ID of the user to warn.\nThe user that was warned.\nFilter the results for specific users.\nThe user’s login name.\nLogin of a user who has been banned.\nLogin of a moderator in the channel.\nThe user’s login name.\nThe user’s display name.\nDisplay name of a user who has been banned.\nDisplay name of a moderator in the channel.\nThe user’s display name.\nCheck if supplied users are banned.\nWarns a user in a broadcaster’s chat room, preventing …\nThe default AutoMod level for the broadcaster.\nBody Parameters for Add Blocked Term\nQuery Parameters for Add Blocked Term\nReturn Values for Add Blocked Term\nThe broadcaster that owns the list of blocked terms.\nThe ID of the broadcaster that owns the list of blocked …\nThe UTC date and time (in RFC3339 format) of when the term …\nThe UTC date and time (in RFC3339 format) of when the …\nAn ID that uniquely identifies this blocked term.\nThe moderator that blocked the word or phrase from being …\nThe ID of a user that has permission to moderate the …\nThe blocked word or phrase.\nThe word or phrase to block from being used in the …\nThe UTC date and time (in RFC3339 format) of when the term …\nQuery Parameters for Add Channel Moderator\nReturn Values for Add Channel Moderator\nSuccessfully added the moderator.\nThe ID of the broadcaster that owns the chat room.\nThe ID of the user to add as a moderator in the …\nQuery Parameters for Add Channel Vip\nReturn Values for Add Channel Vip\nSuccessfully added the VIP.\nThe ID of the broadcaster that’s granting VIP status to …\nThe ID of the user to add as a VIP in the broadcaster’s …\nReturn Values for Ban User\nBody Parameters for Ban User\nQuery Parameters for Ban User\nThe ID of the broadcaster whose chat room the user is …\nThe broadcaster whose chat room the user was banned from …\nThe UTC date and time (in RFC3999 format) when the ban was …\nDuration of the (optional) timeout in seconds.\nThe UTC date and time (in RFC3339 format) that the timeout …\nThe ID of a user that has permission to moderate the …\nThe moderator that banned or put the user in the timeout.\nThe reason the user is being banned or put in a timeout. …\nThe ID of the user to ban or put in a timeout.\nThe user that was banned or was put in a timeout.\nReturn Values for Check AutoMod Status\nBody Parameters for Check AutoMod Status\nQuery Parameters for Check AutoMod Status\nMust match the User ID in the Bearer token.\nIndicates if this message meets AutoMod requirements.\nDeveloper-generated identifier for mapping messages to …\nThe msg_id passed in the body of the POST message. Maps …\nMessage text.\nUser ID of the sender.\nQuery Parameters for Delete Chat Messages\nReturn Values for Delete Chat Messages\nSuccessfully removed the specified messages.\nThe ID of the broadcaster that owns the chat room to …\nThe ID of the message to remove.\nThe ID of a user that has permission to moderate the …\nReturn Values for Get AutoMod Settings\nQuery Parameters for Get AutoMod Settings\nThe Automod level for hostility involving aggression.\nThe ID of the broadcaster whose AutoMod settings you want …\nThe broadcaster’s ID.\nThe Automod level for hostility involving name calling or …\nThe Automod level for discrimination against disability.\nThe Automod level for discrimination against women.\nThe ID of the broadcaster or a user that has permission to …\nThe moderator’s ID.\nThe default AutoMod level for the broadcaster. This field …\nThe Automod level for racial discrimination.\nThe Automod level for sexual content.\nThe AutoMod level for discrimination based on sexuality, …\nThe Automod level for profanity.\nReturn Values for Get Banned Users\nQuery Parameters for Get Banned Users\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nMust match the User ID in the Bearer token.\nRFC3339 formatted timestamp for timeouts; empty string for …\nNumber of values to be returned per page. Limit: 100. …\nUser ID of the moderator who initiated the ban.\nLogin of the moderator who initiated the ban.\nDisplay name of the moderator who initiated the ban.\nThe reason for the ban if provided by the moderator.\nFilters the results and only returns a status object for …\nUser ID of a user who has been banned.\nLogin of a user who has been banned.")