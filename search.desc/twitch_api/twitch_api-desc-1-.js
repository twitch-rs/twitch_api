searchState.loadedDescShard("twitch_api", 1, "Calls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the chatter is <code>Anonymous</code>.\nReturns <code>true</code> if the gifter is <code>Anonymous</code>.\nReturns <code>true</code> if the chatter is <code>Chatter</code>.\nWhether or not the resub was a result of a gift.\nReturns <code>true</code> if the gifter is <code>Gifter</code>.\nIndicates if the subscription was obtained through Amazon …\nIndicates if the resub was obtained through Amazon Prime.\nThe structured chat message\nA UUID that identifies the message.\nGet chat notifications on broadcasters channel reading …\nThe notification\nProfile image URL of the broadcaster raiding this channel.\nThe user ID of the subscription gift recipient.\nThe user ID of the subscription gift recipient.\nThe user login of the subscription gift recipient.\nThe user login of the subscription gift recipient.\nThe user name of the subscription gift recipient.\nThe user name of the subscription gift recipient.\nOnly present when in a shared chat session. The list of …\nOnly present when in a shared chat session. The …\nOnly present when in a shared chat session. The login of …\nOnly present when in a shared chat session. The user name …\nOnly present when in a shared chat session. The UUID that …\nThe number of consecutive months the user has subscribed.\nThe type of subscription plan being used. Possible values …\nThe type of subscription plan being used. Possible values …\nThe type of subscription plan being used. Possible values …\nThe type of subscription plan being used. Possible values …\nThe type of subscription plan being used. Possible values …\nThe message Twitch shows in the chat room for this notice.\nThe tier of the Bits badge the user just earned. For …\nNumber of subscriptions being gifted.\nThe user ID to read chat as.\nThe user ID of the broadcaster raiding this channel.\nThe login name of the broadcaster raiding this channel.\nThe user name of the broadcaster raiding this channel.\nThe number of viewers raiding this channel from the …\nThe user ID of the user that sent the message.\nThe user login of the user that sent the message.\nThe user name of the user that sent the message.\nThe color of the user’s name in the chat room. This is a …\nThe user ID of the subscription gifter. Null if anonymous.\nThe user login of the subscription gifter. Null if …\nThe user name of the subscription gifter. Null if …\n<code>channel.chat.user_message_hold</code>: a user’s message is …\n<code>channel.chat.user_message_hold</code> response payload.\nUser ID of the channel to receive chat message events for.\nThe ID of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nCreate a builder for building <code>ChannelChatUserMessageHoldV1</code>.\nThe body of the message.\nThe ID of the message that was flagged by automod.\nGet user message hold events on a broadcasters channel …\nThe user ID to read chat as.\nThe User ID of the message sender.\nThe message sender’s login.\nThe message sender’s display name.\n<code>channel.chat.user_message_update</code>: a user’s message’s …\n<code>channel.chat.user_message_update</code> response payload.\nUser ID of the channel to receive chat message events for.\nThe ID of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nCreate a builder for building …\nThe body of the message.\nThe ID of the message that was flagged by automod.\nGet user message update events on a broadcasters channel …\nThe message’s status\nThe user ID to read chat as.\nThe User ID of the message sender.\nThe message sender’s login.\nThe message sender’s display name.\n<code>channel.chat_settings.update</code>: a broadcaster’s chat …\n<code>channel.chat_settings.update</code> response payload.\nUser ID of the channel to receive chat settings update …\nThe ID of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nA Boolean value that determines whether chat messages must …\nA Boolean value that determines whether the broadcaster …\nThe length of time, in minutes, that the followers must …\nA Boolean value that determines whether the broadcaster …\nThe amount of time, in seconds, that users need to wait …\nA Boolean value that determines whether only users that …\nA Boolean value that determines whether the broadcaster …\na broadcaster’s chat settings are updated.\nThe user ID to read chat as.\n<code>channel.chat_settings.update</code>: a broadcaster’s chat …\n<code>channel.chat_settings.update</code> response payload.\nUser ID of the channel to receive chat settings update …\nThe ID of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nCreate a builder for building <code>ChannelChatSettingsUpdateV1</code>. …\nA Boolean value that determines whether chat messages must …\nA Boolean value that determines whether the broadcaster …\nThe length of time, in minutes, that the followers must …\nGet notifications for updates on chat settings in this …\nA Boolean value that determines whether the broadcaster …\nThe amount of time, in seconds, that users need to wait …\nA Boolean value that determines whether only users that …\nA Boolean value that determines whether the broadcaster …\nThe user ID to read chat as.\n<code>channel.cheer</code>: a user cheers on the specified channel.\n<code>channel.cheer</code> response payload.\nThe number of bits cheered.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID for the channel you want to get …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelCheerV1</code>. On the …\nWhether the user cheered anonymously or not.\nThe message sent with the cheer.\nThe user ID for the user who cheered on the specified …\nThe user login for the user who cheered on the specified …\nThe user display name for the user who cheered on the …\n<code>channel.follow</code> v1: a specified channel receives a follow.\n<code>channel.follow</code> response payload.\n<code>channel.follow</code> v2: a specified channel receives a follow.\n<code>channel.follow</code> response payload.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID for the channel you want to get …\nThe requested broadcaster ID.\nThe broadcaster user ID for the channel you want to get …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelFollowV1</code>. On the …\nCreate a builder for building <code>ChannelFollowV2</code>. On the …\nRFC3339 timestamp of when the follow occurred.\nRFC3339 timestamp of when the follow occurred.\nThe ID of the moderator of the channel you want to get …\nCreate a new ChannelFollowV2 subscription\nThe user ID for the user now following the specified …\nThe user ID for the user now following the specified …\nThe user login for the user now following the specified …\nThe user login for the user now following the specified …\nThe user display name for the user now following the …\nThe user display name for the user now following the …\n<code>channel.goal.begin</code>: a specified broadcaster begins a goal.\n<code>channel.goal.begin</code> response payload.\n<code>channel.goal.end</code>: a specified broadcaster ends a goal.\n<code>channel.goal.end</code> response payload.\n<code>channel.goal.progress</code>: progress is made towards the …\n<code>channel.goal.progress</code> response payload.\nA specified broadcaster begins a goal.\nThe ID of the broadcaster to get notified about.\nAn ID that uniquely identifies the broadcaster.\nThe ID of the broadcaster to get notified about.\nAn ID that uniquely identifies the broadcaster.\nThe ID of the broadcaster to get notified about.\nAn ID that uniquely identifies the broadcaster.\nThe broadcaster’s user handle.\nThe broadcaster’s user handle.\nThe broadcaster’s user handle.\nThe broadcaster’s display name.\nThe broadcaster’s display name.\nThe broadcaster’s display name.\nThe current value.\nThe current value.\nThe current value.\nA description of the goal, if specified. The description …\nA description of the goal, if specified. The description …\nA description of the goal, if specified. The description …\nA specified broadcaster ends a goal.\nThe UTC timestamp in RFC 3339 format, which indicates when …\nAn ID that uniquely identifies this goal.\nAn ID that uniquely identifies this goal.\nAn ID that uniquely identifies this goal.\nIndicates whether the broadcaster achieved their goal.\nProgress is made towards the specified broadcaster’s …\nThe UTC timestamp in RFC 3339 format, which indicates when …\nThe UTC timestamp in RFC 3339 format, which indicates when …\nThe UTC timestamp in RFC 3339 format, which indicates when …\nThe goal’s target value. For example, if the broadcaster …\nThe goal’s target value.\nThe goal’s target value. For example, if the broadcaster …\nThe type of goal.\nThe type of goal.\nThe type of goal.\n<code>channel.goal.begin</code>: a specified broadcaster begins a goal.\n<code>channel.goal.begin</code> response payload.\nThe ID of the broadcaster to get notified about.\nThe ID of the broadcaster to get notified about.\nAn ID that uniquely identifies the broadcaster.\nThe broadcaster’s user handle.\nThe broadcaster’s display name.\nCreate a builder for building <code>ChannelGoalBeginV1</code>. On the …\nThe current value.\nA description of the goal, if specified. The description …\nAn ID that uniquely identifies this goal.\nThe UTC timestamp in RFC 3339 format, which indicates when …\nThe goal’s target value. For example, if the broadcaster …\nThe type of goal.\n<code>channel.goal.end</code>: a specified broadcaster ends a goal.\n<code>channel.goal.end</code> response payload.\nThe ID of the broadcaster to get notified about.\nThe ID of the broadcaster to get notified about.\nAn ID that uniquely identifies the broadcaster.\nThe broadcaster’s user handle.\nThe broadcaster’s display name.\nCreate a builder for building <code>ChannelGoalEndV1</code>. On the …\nThe current value.\nA description of the goal, if specified. The description …\nThe UTC timestamp in RFC 3339 format, which indicates when …\nAn ID that uniquely identifies this goal.\nIndicates whether the broadcaster achieved their goal.\nThe UTC timestamp in RFC 3339 format, which indicates when …\nThe goal’s target value.\nThe type of goal.\n<code>channel.goal.progress</code>: progress is made towards the …\n<code>channel.goal.progress</code> response payload.\nThe ID of the broadcaster to get notified about.\nThe ID of the broadcaster to get notified about.\nAn ID that uniquely identifies the broadcaster.\nThe broadcaster’s user handle.\nThe broadcaster’s display name.\nCreate a builder for building <code>ChannelGoalProgressV1</code>. On …\nThe current value.\nA description of the goal, if specified. The description …\nAn ID that uniquely identifies this goal.\nThe UTC timestamp in RFC 3339 format, which indicates when …\nThe goal’s target value. For example, if the broadcaster …\nThe type of goal.\nThe guest has accepted the invite and is currently in the …\nThe guest has been assigned a slot in the session, but is …\n<code>channel.guest_star_guest.update</code>: the host preferences for …\n<code>channel.guest_star_guest.update</code> response payload.\nThe current state of a user in a guest star session\nThe guest has transitioned to the invite queue.\nThe guest is now live in the host’s broadcasting …\nThe guest has signaled they are ready and can be assigned …\nThe guest was removed from the call or queue.\nAn unknown state, contains the raw string provided by …\nThe broadcaster user ID for the channel you want to …\nThe non-host broadcaster user ID.\nThe non-host broadcaster display name.\nThe non-host broadcaster login.\nReturns the argument unchanged.\nThe user ID of the guest who transitioned states in the …\nThe guest display name.\nThe guest login.\nFlag that signals whether the host is allowing the …\nUser ID of the host channel.\nThe host display name.\nThe host login.\nFlag that signals whether the host is allowing the …\nValue between 0-100 that represents the slot’s audio …\nCalls <code>U::from(self)</code>.\nThe user ID of the moderator or broadcaster of the …\nThe user ID of the moderator who updated the guest’s …\nThe moderator display name.\nThe moderator login.\nID representing the unique session that was started.\nThe ID of the slot assignment the guest is assigned to.\nThe current state of the user after the update has taken …\nthe host preferences for Guest Star have been updated.\n<code>channel.guest_star_guest.update</code>: the host preferences for …\n<code>channel.guest_star_guest.update</code> response payload.\nThe broadcaster user ID for the channel you want to …\nThe non-host broadcaster user ID.\nThe non-host broadcaster display name.\nThe non-host broadcaster login.\nCreate a builder for building …\nThe user ID of the guest who transitioned states in the …\nThe guest display name.\nThe guest login.\nFlag that signals whether the host is allowing the …\nUser ID of the host channel.\nThe host display name.\nThe host login.\nFlag that signals whether the host is allowing the …\nValue between 0-100 that represents the slot’s audio …\nThe user ID of the moderator or broadcaster of the …\nThe user ID of the moderator who updated the guest’s …\nThe moderator display name.\nThe moderator login.\nGet notifications for guest star sessions in this channel …\nID representing the unique session that was started.\nThe ID of the slot assignment the guest is assigned to.\nThe current state of the user after the update has taken …\n<code>channel.guest_star_session.begin</code>: the host begins a new …\n<code>channel.guest_star_session.begin</code> response payload.\n<code>channel.guest_star_session.end</code>: a running Guest Star …\n<code>channel.guest_star_session.end</code> response payload.\nthe host begins a new Guest Star session.\nThe broadcaster user ID for the channel you want to …\nThe broadcaster user ID.\nThe broadcaster user ID for the channel you want to …\nThe non-host broadcaster user ID.\nThe broadcaster display name.\nThe non-host broadcaster display name.\nThe broadcaster login.\nThe non-host broadcaster login.\na running Guest Star session is ended by the host, or …\nRFC3339 timestamp indicating the time the session ended.\nUser ID of the host channel.\nThe host display name.\nThe host login.\nThe user ID of the moderator or broadcaster of the …\nThe user ID of the moderator or broadcaster of the …\nID representing the unique session that was started.\nID representing the unique session that was started.\nRFC3339 timestamp indicating the time the session began.\nRFC3339 timestamp indicating the time the session began.\n<code>channel.guest_star_session.begin</code>: the host begins a new …\n<code>channel.guest_star_session.begin</code> response payload.\nThe broadcaster user ID for the channel you want to …\nThe broadcaster user ID.\nThe broadcaster display name.\nThe broadcaster login.\nCreate a builder for building …\nThe user ID of the moderator or broadcaster of the …\nGet notifications for guest star sessions in this channel …\nID representing the unique session that was started.\nRFC3339 timestamp indicating the time the session began.\n<code>channel.guest_star_session.end</code>: a running Guest Star …\n<code>channel.guest_star_session.end</code> response payload.\nThe broadcaster user ID for the channel you want to …\nThe non-host broadcaster user ID.\nThe non-host broadcaster display name.\nThe non-host broadcaster login.\nCreate a builder for building …\nRFC3339 timestamp indicating the time the session ended.\nUser ID of the host channel.\nThe host display name.\nThe host login.\nThe user ID of the moderator or broadcaster of the …\nGet notifications for guest star sessions in this channel …\nID representing the unique session that was started.\nRFC3339 timestamp indicating the time the session began.\n<code>channel.guest_star_settings.update</code>: the host preferences …\n<code>channel.guest_star_settings.update</code> response payload.\nHow guests are laid out in a group browser source\nIndicates the group layout will contain all participants …\nIndicates the group layout will contain all participants …\nAll live guests are tiled within the browser source with …\nAll live guests are tiled within the browser source with …\nAn unknown group layout, contains the raw string provided …\nIndicates the group layout will contain all participants …\nIndicates the group layout will contain all participants …\nThe broadcaster user ID for the channel you want to …\nUser ID of the host channel.\nThe broadcaster display name\nThe broadcaster login.\nReturns the argument unchanged.\nThis setting determines how the guests within a session …\nCalls <code>U::from(self)</code>.\nFlag determining if browser sources subscribed to sessions …\nFlag determining if Guest Star moderators have access to …\nThe user ID of the moderator or broadcaster of the …\nNumber of slots the Guest Star call interface will allow …\nthe host preferences for Guest Star have been updated.\n<code>channel.guest_star_settings.update</code>: the host preferences …\n<code>channel.guest_star_settings.update</code> response payload.\nThe broadcaster user ID for the channel you want to …\nUser ID of the host channel.\nThe broadcaster display name\nThe broadcaster login.\nCreate a builder for building …\nThis setting determines how the guests within a session …\nFlag determining if browser sources subscribed to sessions …\nFlag determining if Guest Star moderators have access to …\nThe user ID of the moderator or broadcaster of the …\nGet notifications for guest star sessions in this channel …\nNumber of slots the Guest Star call interface will allow …\nBits\n<code>channel.hype_train.begin</code>: a hype train begins on the …\n<code>channel.hype_train.begin</code> response payload.\n<code>channel.hype_train.end</code>: a hype train ends on the specified …\n<code>channel.hype_train.end</code> response payload.\n<code>channel.hype_train.progress</code>: a hype train makes progress …\n<code>channel.hype_train.progress</code> response payload.\nA contribution to hype train\nType of contribution\nCovers other contribution methods not listed.\nChannel Subscriptions. Either gifted or not.\nA hype train begins on the specified channel.\nThe broadcaster user ID for the channel you want hype …\nThe requested broadcaster ID.\nThe broadcaster user ID for the channel you want hype …\nThe requested broadcaster ID.\nThe broadcaster user ID for the channel you want hype …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe timestamp at which the hype train cooldown ends so …\nA hype train ends on the specified channel.\nThe timestamp at which the hype train ended.\nThe time at which the hype train expires. The expiration …\nThe time at which the hype train expires. The expiration …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe number of points required to reach the next level.\nThe number of points required to reach the next level.\nThe Hype Train ID.\nThe Hype Train ID.\nThe Hype Train ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe most recent contribution.\nThe most recent contribution.\nThe starting level of the Hype Train.\nCurrent level of hype train event.\nCurrent level of hype train event.\nA hype train makes progress on the specified channel.\nThe number of points contributed to the hype train at the …\nThe number of points contributed to the hype train at the …\nThe timestamp at which the hype train started.\nThe timestamp at which the hype train started.\nThe timestamp at which the hype train started.\nThe contributors with the most points contributed.\nThe contributors with the most points contributed.\nThe contributors with the most points contributed.\nTotal points contributed to the hype train.\nTotal points contributed to the hype train.\nTotal points contributed to the hype train.\nThe total contributed.\nType of contribution. Valid values include bits, …\nThe ID of the user.\nThe login of the user.\nThe display name of the user.\n<code>channel.hype_train.begin</code>: a hype train begins on the …\n<code>channel.hype_train.begin</code> response payload.\nThe broadcaster user ID for the channel you want hype …\nThe broadcaster user ID for the channel you want hype …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelHypeTrainBeginV1</code>. On …\nThe time at which the hype train expires. The expiration …\nThe number of points required to reach the next level.\nThe Hype Train ID.\nThe most recent contribution.\nThe starting level of the Hype Train.\nThe number of points contributed to the hype train at the …\nThe timestamp at which the hype train started.\nThe contributors with the most points contributed.\nTotal points contributed to the hype train.\n<code>channel.hype_train.end</code>: a hype train ends on the specified …\n<code>channel.hype_train.end</code> response payload.\nThe broadcaster user ID for the channel you want hype …\nThe broadcaster user ID for the channel you want hype …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelHypeTrainEndV1</code>. On …\nThe timestamp at which the hype train cooldown ends so …\nThe timestamp at which the hype train ended.\nThe Hype Train ID.\nCurrent level of hype train event.\nThe timestamp at which the hype train started.\nThe contributors with the most points contributed.\nTotal points contributed to the hype train.\n<code>channel.hype_train.progress</code>: a hype train makes progress …\n<code>channel.hype_train.progress</code> response payload.\nThe broadcaster user ID for the channel you want hype …\nThe broadcaster user ID for the channel you want hype …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelHypeTrainProgressV1</code>. …\nThe time at which the hype train expires. The expiration …\nThe number of points required to reach the next level.\nThe Hype Train ID.\nThe most recent contribution.\nCurrent level of hype train event.\nThe number of points contributed to the hype train at the …\nThe timestamp at which the hype train started.\nThe contributors with the most points contributed.\nTotal points contributed to the hype train.\nAll possible actions in <code>ChannelModerateV1Payload</code>\nAll possible actions in <code>ChannelModerateV1Payload</code>\nA term was added to a list\nA blocked term was added\nA blocked term was added\nA permitted term was added\nA permitted term was added\nAn unban request was approved\nAn unban request was approved\nAn action on an Automod term\nA list with Automod terms\nMetadata associated with the automod terms changes.\nMetadata associated with the ban command.\nA user was banned.\nA user was banned.\nThe list of blocked terms\n<code>channel.moderate</code>: a moderator performs a moderation action …\n<code>channel.moderate</code> response payload.\n<code>channel.moderate</code>: a moderator performs a moderation action …\n<code>channel.moderate</code> response payload.\nMetadata associated with the delete command.\nA message was deleted.\nA message was deleted.\nAn unban request was denied\nAn unban request was denied\nChat is now in emote only mode\nChat is now in emote only mode\nChat is no longer in emote only mode\nChat is no longer in emote only mode\nMetadata associated with the followers command.\nChat is now in followers only mode.\nChat is now in followers only mode.\nChat is no longer in followers only mode\nChat is no longer in followers only mode\nMetadata associated with the mod command.\nA moderator was added.\nA moderator was added.\nThe list of permitted terms\nMetadata associated with the raid command.\nA channel is being raided.\nA channel is being raided.\nA term was removed from a list\nA blocked term was removed\nA blocked term was removed\nA permitted term was removed\nA permitted term was removed\nInformation about the <code>shared_chat_ban</code> event.\nA ban in a shared chat session\nA ban in a shared chat session\nInformation about the <code>shared_chat_delete</code> event.\nA message deletion in a shared chat session\nA message deletion in a shared chat session\nInformation about the <code>shared_chat_timeout</code> event.\nA timeout in a shared chat session\nA timeout in a shared chat session\nInformation about the <code>shared_chat_unban</code> event.\nAn unban in a shared chat session\nAn unban in a shared chat session\nInformation about the <code>shared_chat_untimeout</code> event.\nAn untimeout in a shared chat session\nAn untimeout in a shared chat session\nMetadata associated with the slow command.\nChat is now in slow mode.\nChat is now in slow mode.\nChat is no longer in slow mode\nChat is no longer in slow mode\nChat is now in subscribers only mode\nChat is now in subscribers only mode\nChat is now longer in subscribers only mode\nChat is now longer in subscribers only mode\nMetadata associated with the timeout command.\nA user was timed out.\nA user was timed out.\nMetadata associated with the unban command.\nA user was unbanned.\nA user was unbanned.\nMetadata associated with an unban request.\nChat is now in uniquechat mode\nChat is now in uniquechat mode\nChat is no longer in uniquechat mode\nChat is no longer in uniquechat mode\nAn unknown term action, contains the raw string provided …\nAn unknown term list, contains the raw string provided by …\nMetadata associated with the unmod command.\nA moderator was removed.\nA moderator was removed.\nMetadata associated with the unraid command.\nA raid was cancelled.\nA raid was cancelled.\nMetadata associated with the untimeout command.\nA user was untimed out.\nA user was untimed out.\nMetadata associated with the unvip command.\nA VIP was removed.\nA VIP was removed.\nMetadata associated with the vip command.\nA VIP was added.\nA VIP was added.\nMetadata associated with the warn command.\nA user was warned\nThe action being taken\nThe action being taken on the list\nThe action being taken\nThe user ID of the broadcaster.\nThe ID of the broadcaster.\nThe user ID of the broadcaster.\nThe ID of the broadcaster.\nThe login of the broadcaster.\nThe login of the broadcaster.\nThe user name of the broadcaster.\nThe user name of the broadcaster.\nCreate a builder for building <code>ChannelModerateV1</code>. On the …\nCreate a builder for building <code>ChannelModerateV2</code>. On the …\nChat rules cited for the warning.\nThe time at which the timeout ends.\nThe length of time, in minutes, that the followers must …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether the terms were added due to an Automod message …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not the unban request was approved or denied.\nThe affected list\nThe message body of the message being deleted.\nThe ID of the message being deleted.\nThe message included by the moderator explaining their …\nThe user ID of the moderator.\nThe broadcaster user ID.\nThe user ID of the moderator.\nThe broadcaster user ID.\nThe broadcaster login.\nThe broadcaster login.\nThe broadcaster display name.\nThe broadcaster display name.\nGet moderation notifications in the specified channel as a …\nGet moderation notifications in the specified channel as a …\nReason given for the ban.\nThe reason given for the timeout.\nReason given for the warning.\nThe channel in which the action originally occurred. Is …\nThe channel in which the action originally occurred. Is …\nThe channel in which the action originally occurred. Is …\nThe channel in which the action originally occurred. Is …\nThe channel in which the action originally occurred.\nThe channel in which the action originally occurred.\nTerms being added or removed.\nThe ID of the user gaining VIP status.\nThe ID of the user losing VIP status.\nThe ID of the user gaining mod status.\nThe ID of the user losing mod status.\nThe ID of the user being banned.\nThe ID of the user being unbanned.\nThe ID of the user being timed out.\nThe ID of the user being untimed out.\nThe ID of the user being raided.\nThe ID of the user no longer being raided.\nThe ID of the user whose message is being deleted.\nThe ID of the banned user.\nThe ID of the user being warned.\nThe login of the user gaining VIP status.\nThe login of the user losing VIP status.\nThe login of the user gaining mod status.\nThe login of the user losing mod status.\nThe login of the user being banned.\nThe login of the user being unbanned.\nThe login of the user being timed out.\nThe login of the user being untimed out.\nThe login of the user being raided.\nThe login of the user no longer being raided.\nThe login of the user.\nThe login of the user.\nThe login of the user being warned.\nThe user name of the user gaining VIP status.\nThe user name of the user losing VIP status.\nThe user name of the user gaining mod status.\nThe user name of the user losing mod status.\nThe user name of the user being banned.\nThe user name of the user being unbanned.\nThe user name of the user being timed out.\nThe user name of the user untimed out.\nThe user name of the user raided.\nThe user name of the no longer user raided.\nThe user name of the user.\nThe user name of the user.\nThe user name of the user being warned.\nThe viewer count.\nThe amount of time, in seconds, that users need to wait …\n<code>channel.moderator.add</code>: a user is given moderator …\n<code>channel.moderator.add</code> response payload.\n<code>channel.moderator.remove</code>: a user has moderator privileges …\n<code>channel.moderator.remove</code> response payload.\na user is given moderator privileges on a specified …\nGet notifications when a moderator is added in this …\nThe requested broadcaster ID.\nGet notifications when a moderator is removed in this …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\na user has moderator privileges removed on a specified …\nThe user ID of the new moderator.\nThe user ID of the removed moderator.\nThe user login of the new moderator.\nThe user login of the removed moderator.\nThe display name of the new moderator.\nThe display name of the removed moderator.\n<code>channel.moderator.add</code>: a user is given moderator …\n<code>channel.moderator.add</code> response payload.\nGet notifications when a moderator is added in this …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelModeratorAddV1</code>. On …\nGet notifications for added moderators in this channel\nThe user ID of the new moderator.\nThe user login of the new moderator.\nThe display name of the new moderator.\n<code>channel.moderator.remove</code>: a user has moderator privileges …\n<code>channel.moderator.remove</code> response payload.\nGet notifications when a moderator is removed in this …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelModeratorRemoveV1</code>. On …\nGet notifications for removed moderators in this channel\nThe user ID of the removed moderator.\nThe user login of the removed moderator.\nThe display name of the removed moderator.\nBits voting settings for a poll\nChannel Points voting settings\n<code>channel.poll.begin</code>: a poll begins on the specified channel.\n<code>channel.poll.begin</code> response payload.\n<code>channel.poll.end</code>: a poll ends on the specified channel.\n<code>channel.poll.end</code> response payload.\n<code>channel.poll.progress</code>: an user responds to a poll on the …\n<code>channel.poll.progress</code> response payload.\nNumber of Bits required to vote once with Bits.\nNumber of Channel Points required to vote once with …\nA poll begins on the specified channel.\nThe Bits voting settings for the poll.\nThe Bits voting settings for the poll.\nThe Bits voting settings for the poll.\nThe broadcaster user ID of the channel for which “poll …\nThe requested broadcaster ID.\nThe broadcaster user ID of the channel for which “poll …\nThe requested broadcaster ID.\nThe broadcaster user ID of the channel for which “poll …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe Channel Points voting settings for the poll.\nThe Channel Points voting settings for the poll.\nThe Channel Points voting settings for the poll.\nAn array of choices for the poll.\nAn array of choices for the poll. Includes vote counts.\nAn array of choices for the poll. Includes vote counts.\nA poll ends on the specified channel.\nThe time the poll ended.\nThe time the poll will end.\nThe time the poll will end.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the poll.\nID of the poll.\nID of the poll.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if Bits can be used for voting.\nIndicates if Channel Points can be used for voting.\nA user responds to a poll on the specified channel\nThe time the poll started.\nThe time the poll started.\nThe time the poll started.\nThe status of the poll.\nQuestion displayed for the poll.\nQuestion displayed for the poll.\nQuestion displayed for the poll.\n<code>channel.poll.begin</code>: a poll begins on the specified channel.\n<code>channel.poll.begin</code> response payload.\nThe Bits voting settings for the poll.\nThe broadcaster user ID of the channel for which “poll …\nThe broadcaster user ID of the channel for which “poll …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelPollBeginV1</code>. On the …\nThe Channel Points voting settings for the poll.\nAn array of choices for the poll.\nThe time the poll will end.\nID of the poll.\nThe time the poll started.\nQuestion displayed for the poll.\n<code>channel.poll.end</code>: a poll ends on the specified channel.\n<code>channel.poll.end</code> response payload.\nThe Bits voting settings for the poll.\nThe broadcaster user ID of the channel for which “poll …\nThe broadcaster user ID of the channel for which “poll …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelPollEndV1</code>. On the …\nThe Channel Points voting settings for the poll.\nAn array of choices for the poll. Includes vote counts.\nThe time the poll ended.\nID of the poll.\nThe time the poll started.\nThe status of the poll.\nQuestion displayed for the poll.\n<code>channel.poll.progress</code>: an user responds to a poll on the …\n<code>channel.poll.progress</code> response payload.\nThe Bits voting settings for the poll.\nThe broadcaster user ID of the channel for which “poll …\nThe broadcaster user ID of the channel for which “poll …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelPollProgressV1</code>. On …\nThe Channel Points voting settings for the poll.\nAn array of choices for the poll. Includes vote counts.\nThe time the poll will end.\nID of the poll.\nThe time the poll started.\nQuestion displayed for the poll.\n<code>channel.prediction.begin</code>: a Prediction begins on the …\n<code>channel.prediction.begin</code> response payload.\n<code>channel.prediction.end</code>: a Prediction ends on the specified …\n<code>channel.prediction.end</code> response payload.\n<code>channel.prediction.lock</code>: an user responds to a prediction …\n<code>channel.prediction.lock</code> response payload.\n<code>channel.prediction.progress</code>: an user responds to a …\n<code>channel.prediction.progress</code> response payload.\nA Prediction begins on the specified channel\nThe broadcaster user ID of the channel for which …\nThe requested broadcaster ID.\nThe broadcaster user ID of the channel for which …\nThe requested broadcaster ID.\nThe broadcaster user ID of the channel for which …\nThe requested broadcaster ID.\nThe broadcaster user ID of the channel for which …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nA Prediction ends on the specified channel.\nThe time the Channel Points Prediction ended.\nChannel Points Prediction ID.\nChannel Points Prediction ID.\nChannel Points Prediction ID.\nChannel Points Prediction ID.\nA user responds to a prediction on the specified channel\nThe time the Channel Points Prediction will automatically …\nThe time the Channel Points Prediction will automatically …\nThe time the Channel Points Prediction will automatically …\nAn array of outcomes for the Channel Points Prediction.\nAn array of outcomes for the Channel Points Prediction. …\nAn array of outcomes for the Channel Points Prediction. …\nAn array of outcomes for the Channel Points Prediction. …\nA user responds to a prediction on the specified channel\nThe time the Channel Points Prediction started.\nThe time the Channel Points Prediction started.\nThe time the Channel Points Prediction started.\nThe time the Channel Points Prediction started.\nThe status of the Channel Points Prediction. Valid values …\nTitle for the Channel Points Prediction.\nTitle for the Channel Points Prediction.\nTitle for the Channel Points Prediction.\nTitle for the Channel Points Prediction.\nID of the winning outcome.\n<code>channel.prediction.begin</code>: a Prediction begins on the …\n<code>channel.prediction.begin</code> response payload.\nThe broadcaster user ID of the channel for which …\nThe broadcaster user ID of the channel for which …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelPredictionBeginV1</code>. On …\nChannel Points Prediction ID.\nThe time the Channel Points Prediction will automatically …\nAn array of outcomes for the Channel Points Prediction.\nThe time the Channel Points Prediction started.\nTitle for the Channel Points Prediction.\n<code>channel.prediction.end</code>: a Prediction ends on the specified …\n<code>channel.prediction.end</code> response payload.\nThe broadcaster user ID of the channel for which …\nThe broadcaster user ID of the channel for which …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelPredictionEndV1</code>. On …\nThe time the Channel Points Prediction ended.\nChannel Points Prediction ID.\nAn array of outcomes for the Channel Points Prediction. …\nThe time the Channel Points Prediction started.\nThe status of the Channel Points Prediction. Valid values …\nTitle for the Channel Points Prediction.\nID of the winning outcome.\n<code>channel.prediction.lock</code>: an user responds to a prediction …\n<code>channel.prediction.lock</code> response payload.\nThe broadcaster user ID of the channel for which …\nThe broadcaster user ID of the channel for which …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelPredictionLockV1</code>. On …\nChannel Points Prediction ID.\nThe time the Channel Points Prediction will automatically …\nAn array of outcomes for the Channel Points Prediction. …\nThe time the Channel Points Prediction started.\nTitle for the Channel Points Prediction.\n<code>channel.prediction.progress</code>: an user responds to a …\n<code>channel.prediction.progress</code> response payload.\nThe broadcaster user ID of the channel for which …\nThe broadcaster user ID of the channel for which …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelPredictionProgressV1</code>. …\nChannel Points Prediction ID.\nThe time the Channel Points Prediction will automatically …\nAn array of outcomes for the Channel Points Prediction. …\nThe time the Channel Points Prediction started.\nTitle for the Channel Points Prediction.\n<code>channel.raid</code>: a a broadcaster raids another …\n<code>channel.raid</code> response payload.\nCreate a builder for building <code>ChannelRaidV1</code>. On the …\nThe broadcaster user ID that created the channel raid you …\nThe broadcaster user ID that created the channel raid you …\nThe broadcaster ID that created the raid.\nThe broadcaster login that created the raid.\nThe broadcaster display name that created the raid.\nThe broadcaster user ID that received the channel raid you …\nThe broadcaster user ID that received the channel raid you …\nThe broadcaster ID that received the raid.\nThe broadcaster login that received the raid.\nThe broadcaster display name that received the raid.\nThe number of viewers in the raid.\n<code>channel.shared_chat.begin</code>: a channel becomes active in an …\n<code>channel.shared_chat.begin</code> response payload.\n<code>channel.shared_chat.end</code>: a channel leaves a shared chat …\n<code>channel.shared_chat.end</code> response payload.\n<code>channel.shared_chat.update</code>: the active shared chat session …\n<code>channel.shared_chat.update</code> response payload.\nA participant in a shared chat session\nA channel becomes active in an active shared chat session.\nThe User ID of the channel to receive shared chat session …\nThe User ID of the channel in the subscription condition …\nThe User ID of the channel to receive shared chat session …\nThe User ID of the channel in the subscription condition …\nThe User ID of the channel to receive shared chat session …\nThe User ID of the channel in the subscription condition.\nThe User ID of the participant channel.\nThe user login of the channel in the subscription …\nThe user login of the channel in the subscription …\nThe user login of the channel in the subscription …\nThe user login of the participant channel.\nThe display name of the channel in the subscription …\nThe display name of the channel in the subscription …\nThe display name of the channel in the subscription …\nThe display name of the participant channel.\nA channel leaves a shared chat session or the session ends.\nReturns the argument unchanged.\nThe User ID of the host channel.\nThe User ID of the host channel.\nThe User ID of the host channel.\nThe user login of the host channel.\nThe user login of the host channel.\nThe user login of the host channel.\nThe display name of the host channel.\nThe display name of the host channel.\nThe display name of the host channel.\nCalls <code>U::from(self)</code>.\nThe list of participants in the session.\nThe list of participants in the session.\nThe unique identifier for the shared chat session.\nThe unique identifier for the shared chat session.\nThe unique identifier for the shared chat session.\nThe active shared chat session the channel is in changed.\n<code>channel.shared_chat.begin</code>: a channel becomes active in an …\n<code>channel.shared_chat.begin</code> response payload.\nThe User ID of the channel to receive shared chat session …\nThe User ID of the channel to receive shared chat session …\nThe User ID of the channel in the subscription condition …\nThe user login of the channel in the subscription …\nThe display name of the channel in the subscription …\nCreate a builder for building <code>ChannelSharedChatBeginV1</code>. On …\nThe User ID of the host channel.\nThe user login of the host channel.\nThe display name of the host channel.\nThe list of participants in the session.\nThe unique identifier for the shared chat session.\n<code>channel.shared_chat.end</code>: a channel leaves a shared chat …\n<code>channel.shared_chat.end</code> response payload.\nThe User ID of the channel to receive shared chat session …\nThe User ID of the channel to receive shared chat session …\nThe User ID of the channel in the subscription condition …\nThe user login of the channel in the subscription …\nThe display name of the channel in the subscription …\nCreate a builder for building <code>ChannelSharedChatEndV1</code>. On …\nThe User ID of the host channel.\nThe user login of the host channel.\nThe display name of the host channel.\nThe unique identifier for the shared chat session.\n<code>channel.shared_chat.update</code>: the active shared chat session …\n<code>channel.shared_chat.update</code> response payload.\nThe User ID of the channel to receive shared chat session …\nThe User ID of the channel to receive shared chat session …\nThe User ID of the channel in the subscription condition.\nThe user login of the channel in the subscription …\nThe display name of the channel in the subscription …\nCreate a builder for building <code>ChannelSharedChatUpdateV1</code>. …\nThe User ID of the host channel.\nThe user login of the host channel.\nThe display name of the host channel.\nThe list of participants in the session.\nThe unique identifier for the shared chat session.\n<code>channel.shield_mode.begin</code>: an user responds to a …\n<code>channel.shield_mode.begin</code> response payload.\n<code>channel.shield_mode.end</code>: an user responds to a prediction …\n<code>channel.shield_mode.end</code> response payload.\nA channel activates Shield Mode\nThe ID of the broadcaster that you want to receive …\nAn ID that identifies the broadcaster whose Shield Mode …\nThe ID of the broadcaster that you want to receive …\nAn ID that identifies the broadcaster whose Shield Mode …\nThe broadcaster’s login name.\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nThe broadcaster’s display name.\nA channel deactivates Shield Mode\nThe UTC timestamp (in RFC3339 format) of when the …\nThe ID of the broadcaster or one of the broadcaster’s …\nAn ID that identifies the moderator that updated the …\nThe ID of the broadcaster or one of the broadcaster’s …\nAn ID that identifies the moderator that updated the …\nThe moderator’s login name.\nThe moderator’s login name.\nThe moderator’s display name.\nThe moderator’s display name.\nThe UTC timestamp (in RFC3339 format) of when the …\n<code>channel.shield_mode.begin</code>: an user responds to a …\n<code>channel.shield_mode.begin</code> response payload.\nThe ID of the broadcaster that you want to receive …\nAn ID that identifies the broadcaster whose Shield Mode …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nCreate a builder for building <code>ChannelShieldModeBeginV1</code>. On …\nThe ID of the broadcaster or one of the broadcaster’s …\nAn ID that identifies the moderator that updated the …\nThe moderator’s login name.\nThe moderator’s display name.\nGet shield mode begin events for this channel as moderator\nThe UTC timestamp (in RFC3339 format) of when the …\n<code>channel.shield_mode.end</code>: an user responds to a prediction …\n<code>channel.shield_mode.end</code> response payload.\nThe ID of the broadcaster that you want to receive …\nAn ID that identifies the broadcaster whose Shield Mode …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nCreate a builder for building <code>ChannelShieldModeEndV1</code>. On …\nThe UTC timestamp (in RFC3339 format) of when the …\nThe ID of the broadcaster or one of the broadcaster’s …\nAn ID that identifies the moderator that updated the …\nThe moderator’s login name.\nThe moderator’s display name.\nGet shield mode end events for this channel as moderator\n<code>channel.shoutout.create</code>: a Prediction begins on the …\n<code>channel.shoutout.create</code> response payload.\n<code>channel.shoutout.receive</code>: a Prediction begins on the …\n<code>channel.shoutout.receive</code> response payload.\nThe ID of the broadcaster that you want to receive …\nAn ID that identifies the broadcaster that sent the …\nThe ID of the broadcaster that you want to receive …\nAn ID that identifies the broadcaster that received the …\nThe broadcaster’s login name.\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nThe broadcaster’s display name.\nThe UTC timestamp (in RFC3339 format) of when the …\nA specified broadcaster sends a Shoutout.\nAn ID that identifies the broadcaster that sent the …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nThe ID of the broadcaster that gave the Shoutout or one of …\nAn ID that identifies the moderator that sent the …\nThe ID of the broadcaster that received the Shoutout or …\nThe moderator’s login name.\nThe moderator’s display name.\nA specified broadcaster receives a Shoutout.\nThe UTC timestamp (in RFC3339 format) of when the …\nThe UTC timestamp (in RFC3339 format) of when the …\nThe UTC timestamp (in RFC3339 format) of when the …\nAn ID that identifies the broadcaster that received the …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nThe number of users that were watching the broadcaster’s …\nThe number of users that were watching the …\n<code>channel.shoutout.create</code>: a Prediction begins on the …\n<code>channel.shoutout.create</code> response payload.\nThe ID of the broadcaster that you want to receive …\nAn ID that identifies the broadcaster that sent the …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nCreate a builder for building <code>ChannelShoutoutCreateV1</code>. On …\nThe UTC timestamp (in RFC3339 format) of when the …\nThe ID of the broadcaster that gave the Shoutout or one of …\nAn ID that identifies the moderator that sent the …\nThe moderator’s login name.\nThe moderator’s display name.\nCreate a new <code>ChannelShoutoutCreateV1</code>\nThe UTC timestamp (in RFC3339 format) of when the …\nThe UTC timestamp (in RFC3339 format) of when the …\nAn ID that identifies the broadcaster that received the …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nThe number of users that were watching the broadcaster’s …\n<code>channel.shoutout.receive</code>: a Prediction begins on the …\n<code>channel.shoutout.receive</code> response payload.\nThe ID of the broadcaster that you want to receive …\nAn ID that identifies the broadcaster that received the …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nCreate a builder for building <code>ChannelShoutoutReceiveV1</code>. On …\nAn ID that identifies the broadcaster that sent the …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nThe ID of the broadcaster that received the Shoutout or …\nCreate a new <code>ChannelShoutoutReceiveV1</code>\nThe UTC timestamp (in RFC3339 format) of when the …\nThe number of users that were watching the …\n<code>channel.subscribe</code>: a specified channel receives a …\n<code>channel.subscribe</code> response payload.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID for the channel you want to get …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelSubscribeV1</code>. On the …\nWhether the subscription is a gift.\nThe tier of the subscription. Valid values are 1000, 2000, …\nThe user ID for the user who subscribed to the specified …\nThe user login for the user who subscribed to the …\nThe user display name for the user who subscribed to the …\n<code>channel.subscription.end</code>: a subscription to the specified …\n<code>channel.subscription.end</code> response payload.\n<code>channel.subscription.gift</code>: a subscription to the specified …\n<code>channel.subscription.gift</code> response payload.\n<code>channel.subscription.message</code>: a subscription to the …\n<code>channel.subscription.message</code> response payload.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID.\nThe broadcaster login.\nThe broadcaster login.\nThe broadcaster login.\nThe broadcaster display name.\nThe broadcaster display name.\nThe broadcaster display name.\nThe total number of months the user has been subscribed to …\nThe number of subscriptions gifted by this user in the …\nThe month duration of the subscription.\nA subscription to the specified channel expires.\nA user gives one or more gifted subscriptions in a channel.\nWhether the subscription gift was anonymous.\nWhether the subscription was a gift.\nA user sends a resubscription chat message in a specific …\nAn object that contains the resubscription message and …\nThe number of consecutive months the user’s current …\nThe tier of the subscription that ended. Valid values are …\nThe tier of subscriptions in the subscription gift.\nThe tier of the user’s subscription.\nThe number of subscriptions in the subscription gift.\nThe user ID for the user whose subscription ended.\nThe user ID of the user who sent the subscription gift. …\nThe user ID of the user who sent a resubscription chat …\nThe user login for the user whose subscription ended.\nThe user login of the user who sent the gift. Set to null …\nThe user login of the user who sent a resubscription chat …\nThe user display name for the user whose subscription …\nThe user display name of the user who sent the gift. Set …\nThe user display name of the user who a resubscription …\n<code>channel.subscription.end</code>: a subscription to the specified …\n<code>channel.subscription.end</code> response payload.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID.\nThe broadcaster login.\nThe broadcaster display name.\nCreate a builder for building <code>ChannelSubscriptionEndV1</code>. On …\nWhether the subscription was a gift.\nThe tier of the subscription that ended. Valid values are …\nThe user ID for the user whose subscription ended.\nThe user login for the user whose subscription ended.\nThe user display name for the user whose subscription …\n<code>channel.subscription.gift</code>: a subscription to the specified …\n<code>channel.subscription.gift</code> response payload.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID.\nThe broadcaster login.\nThe broadcaster display name.\nCreate a builder for building <code>ChannelSubscriptionGiftV1</code>. …\nThe number of subscriptions gifted by this user in the …\nWhether the subscription gift was anonymous.\nThe tier of subscriptions in the subscription gift.\nThe number of subscriptions in the subscription gift.\nThe user ID of the user who sent the subscription gift. …\nThe user login of the user who sent the gift. Set to null …\nThe user display name of the user who sent the gift. Set …\n<code>channel.subscription.message</code>: a subscription to the …\n<code>channel.subscription.message</code> response payload.\nA message attached to a <code>ChannelSubscriptionMessageV1Payload</code>\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID.\nThe broadcaster login.\nThe broadcaster display name.\nCreate a builder for building <code>ChannelSubscriptionMessageV1</code>.\nThe total number of months the user has been subscribed to …\nThe month duration of the subscription.\nAn array that includes the emote ID and start and end …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn object that contains the resubscription message and …\nThe number of consecutive months the user’s current …\nThe text of the resubscription chat message.\nThe tier of the user’s subscription.\nThe user ID of the user who sent a resubscription chat …\nThe user login of the user who sent a resubscription chat …\nThe user display name of the user who a resubscription …\nThe user is actively monitored\nA detected ban evader\nLikelyhood that a user is a ban evader\n<code>channel.suspicious_user.message</code>: a chat message has been …\n<code>channel.suspicious_user.message</code> response payload.\n<code>channel.suspicious_user.update</code>: a suspicious user has been …\n<code>channel.suspicious_user.update</code> response payload.\nThe user is a lilkely ban evader\nA user’s low trust status\nA manually marked user\nThe user isn’t monitored\nAn unknown evaluation, contains the raw string provided by …\nThe user is a possible ban evader\nThe user is restricted\nA user banned in another channel that shares ban …\nTraits of a suspicious user\nAn unknown low trust status, contains the raw string …\nAn unknown user type, contains the raw string provided by …\nThe ban evasion status is not known\nA ban evasion likelihood value (if any) that as been …\nUser ID of the channel to receive chat message events for.\nThe ID of the channel where the treatment for a suspicious …\nThe broadcaster you want to get suspicious user update …\nThe ID of the channel where the treatment for a suspicious …\nThe display name of the channel where the treatment for a …\nThe display name of the channel where the treatment for a …\nThe login of the channel where the treatment for a …\nThe Login of the channel where the treatment for a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe status set for the suspicious user.\nThe status set for the suspicious user.\na chat message has been sent from a suspicious user.\nThe structured chat message.\nThe ID of a user that has permission to moderate the …\nThe ID of a user that has permission to moderate the …\nThe ID of the moderator that updated the treatment for a …\nThe display name of the moderator that updated the …\nThe login of the moderator that updated the treatment for …\nA list of channel IDs where the suspicious user is also …\nUser types (if any) that apply to the suspicious user.\na suspicious user has been updated.\nThe user ID of the user that sent the message.\nThe ID of the suspicious user whose treatment was updated.\nThe user name of the user that sent the message.\nThe display name of the suspicious user whose treatment …\nThe user login of the user that sent the message.\nThe login of the suspicious user whose treatment was …\n<code>channel.suspicious_user.message</code>: a chat message has been …\n<code>channel.suspicious_user.message</code> response payload.\nA ban evasion likelihood value (if any) that as been …\nUser ID of the channel to receive chat message events for.\nThe ID of the channel where the treatment for a suspicious …\nThe display name of the channel where the treatment for a …\nThe login of the channel where the treatment for a …\nCreate a builder for building …\nThe status set for the suspicious user.\nThe structured chat message.\nThe ID of a user that has permission to moderate the …\nGet notifications for messages from suspicious users in …\nA list of channel IDs where the suspicious user is also …\nUser types (if any) that apply to the suspicious user.\nThe user ID of the user that sent the message.\nThe user name of the user that sent the message.\nThe user login of the user that sent the message.\n<code>channel.suspicious_user.update</code>: a suspicious user has been …\n<code>channel.suspicious_user.update</code> response payload.\nThe broadcaster you want to get suspicious user update …\nThe ID of the channel where the treatment for a suspicious …\nThe display name of the channel where the treatment for a …\nThe Login of the channel where the treatment for a …\nCreate a builder for building <code>ChannelSuspiciousUserUpdateV1</code>…\nThe status set for the suspicious user.\nThe ID of a user that has permission to moderate the …\nThe ID of the moderator that updated the treatment for a …\nThe display name of the moderator that updated the …\nThe login of the moderator that updated the treatment for …\nGet notifications for updates from suspicious users in …\nThe ID of the suspicious user whose treatment was updated.\nThe display name of the suspicious user whose treatment …\nThe login of the suspicious user whose treatment was …\n<code>channel.unban</code>: a viewer is unbanned from the specified …\n<code>channel.unban</code> response payload.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID for the channel you want to get …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelUnbanV1</code>. On the …\nThe user ID of the issuer of the unban.\nThe user login of the issuer of the unban.\nThe user name of the issuer of the unban.\nThe user id for the user who was unbanned on the specified …\nThe user login for the user who was unbanned on the …\nThe user display name for the user who was unbanned on the …\nThe request was approved.\nThe request was canceled.\n<code>channel.unban_request.create</code>: a user creates an unban …\n<code>channel.unban_request.create</code> response payload.\n<code>channel.unban_request.resolve</code>: an unban request has been …\n<code>channel.unban_request.resolve</code> response payload.\nThe request was denied.\nA status of an unban request\nAn unknown status, contains the raw string provided by …\nThe ID of the broadcaster you want to get chat unban …\nThe broadcaster’s user ID for the channel the unban …\nThe ID of the broadcaster you want to get unban request …\nThe broadcaster’s user ID for the channel the unban …\nThe broadcaster’s login name.\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nThe broadcaster’s display name.\na user creates an unban request.\nThe UTC timestamp (in RFC3339 format) of when the unban …\nReturns the argument unchanged.\nThe ID of the unban request.\nThe ID of the unban request.\nCalls <code>U::from(self)</code>.\nThe ID of the user that has permission to moderate the …\nThe ID of the user that has permission to moderate the …\nUser ID of moderator who approved/denied the request.\nThe moderator’s login name\nThe moderator’s display name\nResolution text supplied by the mod/broadcaster upon …\nan unban request has been resolved.\nDictates whether the unban request was approved or denied.\nMessage sent in the unban request.\nUser ID of user that is requesting to be unbanned.\nUser ID of user that requested to be unbanned.\nThe user’s login name.\nThe user’s login name.\nThe user’s display name.\nThe user’s display name.\n<code>channel.unban_request.create</code>: a user creates an unban …\n<code>channel.unban_request.create</code> response payload.\nThe ID of the broadcaster you want to get chat unban …\nThe broadcaster’s user ID for the channel the unban …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nCreate a builder for building <code>ChannelUnbanRequestCreateV1</code>. …\nThe UTC timestamp (in RFC3339 format) of when the unban …\nThe ID of the unban request.\nThe ID of the user that has permission to moderate the …\nGet notifications when unban requests are created in this …\nMessage sent in the unban request.\nUser ID of user that is requesting to be unbanned.\nThe user’s login name.\nThe user’s display name.\n<code>channel.unban_request.resolve</code>: an unban request has been …\n<code>channel.unban_request.resolve</code> response payload.\nThe ID of the broadcaster you want to get unban request …\nThe broadcaster’s user ID for the channel the unban …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nCreate a builder for building <code>ChannelUnbanRequestResolveV1</code>.\nThe ID of the unban request.\nThe ID of the user that has permission to moderate the …\nUser ID of moderator who approved/denied the request.\nThe moderator’s login name\nThe moderator’s display name\nGet notifications when unban requests are resolved in this …\nResolution text supplied by the mod/broadcaster upon …\nDictates whether the unban request was approved or denied.\nUser ID of user that requested to be unbanned.\nThe user’s login name.\nThe user’s display name.\nversion 1 of <code>channel.update</code> subscription type sends …\n<code>channel.update</code> response payload.\n<code>channel.update</code> subscription type sends notifications when …\n<code>channel.update</code> response payload.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster’s user ID.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster’s user ID.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe broadcaster’s user display name.\nThe broadcaster’s user display name.\nCreate a builder for building <code>ChannelUpdateV2</code>. On the …\nCreate a builder for building <code>ChannelUpdateV1</code>. On the …\nThe channel’s category ID.\nThe channel’s category ID.\nThe category name.\nThe category name.\nArray of content classification label IDs currently …\nA boolean identifying whether the channel is flagged as …\nThe channel’s broadcast language.\nThe channel’s broadcast language.\nThe channel’s stream title.\nThe channel’s stream title.\n<code>channel.vip.add</code>: a VIP is added to the channel.\n<code>channel.vip.add</code> response payload.\n<code>channel.vip.remove</code>: a user has vip privileges removed on a …\n<code>channel.vip.remove</code> response payload.\na VIP is added to the channel.\nGet notifications when a VIP is added in this channel.\nThe requested broadcaster ID.\nGet notifications when a VIP is removed in this channel.\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\na user has vip privileges removed on a specified channel.\nThe user ID of the new vip.\nThe user ID of the removed vip.\nThe user login of the new vip.\nThe user login of the removed vip.\nThe display name of the new vip.\nThe display name of the removed vip.\n<code>channel.vip.add</code>: a VIP is added to the channel.\n<code>channel.vip.add</code> response payload.\nGet notifications when a VIP is added in this channel.\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelVipAddV1</code>. On the …\nGet notifications for added VIPs in this channel\nThe user ID of the new vip.\nThe user login of the new vip.\nThe display name of the new vip.\n<code>channel.vip.remove</code>: a user has vip privileges removed on a …\n<code>channel.vip.remove</code> response payload.\nGet notifications when a VIP is removed in this channel.\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelVipRemoveV1</code>. On the …\nGet notifications for removed VIPs in this channel\nThe user ID of the removed vip.\nThe user login of the removed vip.\nThe display name of the removed vip.\n<code>channel.warning.acknowledge</code>: a warning is acknowledged by …\n<code>channel.warning.acknowledge</code> response payload.\n<code>channel.warning.send</code>: a warning is sent to a user.\n<code>channel.warning.send</code> response payload.\na warning is acknowledged by a user.\nThe User ID of the broadcaster.\nThe user ID of the broadcaster.\nThe User ID of the broadcaster.\nThe user ID of the broadcaster.\nThe login of the broadcaster.\nThe login of the broadcaster.\nThe user name of the broadcaster.\nThe user name of the broadcaster.\nThe chat rules cited for the warning.\nThe User ID of the moderator.\nThe User ID of the moderator.\nThe user ID of the moderator who sent the warning.\nThe login of the moderator.\nThe user name of the moderator.\nThe reason given for the warning.\na warning is sent to a user.\nThe ID of the user that has acknowledged their warning.\nThe ID of the user being warned.\nThe login of the user that has acknowledged their warning.\nThe login of the user being warned.\nThe user name of the user that has acknowledged their …\nThe user name of the user being.\n<code>channel.warning.acknowledge</code>: a warning is acknowledged by …\n<code>channel.warning.acknowledge</code> response payload.\nThe User ID of the broadcaster.\nThe user ID of the broadcaster.\nThe login of the broadcaster.\nThe user name of the broadcaster.\nCreate a builder for building <code>ChannelWarningAcknowledgeV1</code>. …\nThe User ID of the moderator.\nGet notifications for acknowledged warnings in this …\nThe ID of the user that has acknowledged their warning.\nThe login of the user that has acknowledged their warning.\nThe user name of the user that has acknowledged their …\n<code>channel.warning.send</code>: a warning is sent to a user.\n<code>channel.warning.send</code> response payload.\nThe User ID of the broadcaster.\nThe user ID of the broadcaster.\nThe login of the broadcaster.\nThe user name of the broadcaster.\nCreate a builder for building <code>ChannelWarningSendV1</code>. On the …\nThe chat rules cited for the warning.\nThe User ID of the moderator.\nThe user ID of the moderator who sent the warning.\nThe login of the moderator.\nThe user name of the moderator.\nGet notifications for sendd warnings in this channel as a …\nThe reason given for the warning.\nThe ID of the user being warned.\nThe login of the user being warned.\nThe user name of the user being.\n<code>conduit.shard.disabled</code>\n<code>conduit.shard.disabled</code> response payload.\nYour application’s client id. The provided client_id …\nOptional. The conduit ID to receive events for. If …\nThe conduit ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSubscription types regarding conduit shards.\nThe shard ID within the conduit.\nThe status of the disabled shard.\nThe transport details about the disable shard.\nA conduit shard is disabled by twitch.\n<code>conduit.shard.disabled</code>\n<code>conduit.shard.disabled</code> response payload.\nCreate a builder for building <code>ConduitShardDisabledV1</code>. On …\nYour application’s client id. The provided client_id …\nYour application’s client id. The provided client_id …\nThe conduit ID to receive events for. If omitted, events …\nOptional. The conduit ID to receive events for. If …\nThe conduit ID.\nThe shard ID within the conduit.\nThe status of the disabled shard.\nThe transport details about the disable shard.\n<code>automod.message.hold</code>: a message was caught by automod for …\nAutomod Message Hold V1 Event\nAutomod Message Hold V2 Event\n<code>automod.message.update</code>: a message in the automod queue had …\nAutomod Message Update V1 Event\nAutomod Message Update V2 Event\n<code>automod.settings.update</code>: a notification is sent when a …\nAutomod Settings Update V1 Event\n<code>automod.terms.update</code>: a notification is sent when a …\nAutomod Terms Update V1 Event\n<code>channel.ad_break.begin</code>: a user runs a midroll commercial …\nChannel Ad Break Begin V1 Event\n<code>channel.ban</code>: a viewer is banned from the specified channel.\nChannel Ban V1 Event\n<code>channel.charity_campaign.donate</code>: a user donates to the …\nChannel Charity Campaign Donate V1 Event\n<code>channel.charity_campaign.progress</code>: progress is made …\nChannel Charity Campaign Progress V1 Event\n<code>channel.charity_campaign.start</code>: a broadcaster starts a …\nChannel Charity Campaign Start V1 Event\n<code>channel.charity_campaign.stop</code>: a broadcaster stops a …\nChannel Charity Campaign Stop V1 Event\n<code>channel.chat.clear</code>: a moderator or bot clears all messages …\n<code>channel.chat.clear_user_messages</code>: a moderator or bot …\nChannel Chat ClearUserMessages V1 Event\nChannel Chat Clear V1 Event\n<code>channel.chat.message</code>: any user sends a message to a …\n<code>channel.chat.message_delete</code>: a moderator removes a …\nChannel Chat MessageDelete V1 Event\nChannel Chat Message V1 Event\n<code>channel.chat.notification</code>: an event that appears in chat …\nChannel Chat Notification V1 Event\n<code>channel.chat_settings.update</code>: a broadcaster’s chat …\nChannel ChatSettings Update V1 Event\n<code>channel.chat.user_message_hold</code>: a user’s message is …\nChannel Chat UserMessageHold V1 Event\n<code>channel.chat.user_message_update</code>: a user’s message’s …\nChannel Chat UserMessageUpdate V1 Event\n<code>channel.cheer</code>: a user cheers on the specified channel.\nChannel Cheer V1 Event\n<code>channel.follow</code>: a specified channel receives a follow.\nChannel Follow V1 Event\nChannel Follow V2 Event\n<code>channel.goal.begin</code>: a goal begins on the specified channel.\nChannel Goal Begin V1 Event\n<code>channel.goal.end</code>: a goal ends on the specified channel.\nChannel Goal End V1 Event\n<code>channel.goal.progress</code>: a goal makes progress on the …\nChannel Goal Progress V1 Event\n<code>channel.guest_star_guest.update</code>: a guest or a slot is …\nChannel GuestStarGuest Update V1 Event\n<code>channel.guest_star_session.begin</code>: the host begins a new …\nChannel GuestStarSession Begin V1 Event\n<code>channel.guest_star_session.end</code>: a running Guest Star …\nChannel GuestStarSession End V1 Event\n<code>channel.guest_star_settings.update</code>: the host preferences …\nChannel GuestStarSettings Update V1 Event\n<code>channel.hype_train.begin</code>: a hype train begins on the …\nChannel Hype Train Begin V1 Event\n<code>channel.hype_train.end</code>: a hype train ends on the specified …\nChannel Hype Train End V1 Event\n<code>channel.hype_train.progress</code>: a hype train makes progress …\nChannel Hype Train Progress V1 Event\n<code>channel.moderate</code>: a moderator performs a moderation action …\nChannel Moderate V1 Event\nChannel Moderate V2 Event\n<code>channel.moderator.add</code>: a user is given moderator …\nChannel Moderator Add V1 Event\n<code>channel.moderator.remove</code>: a user has moderator privileges …\nChannel Moderator Remove V1 Event\n<code>channel.channel_points_automatic_reward_redemption.add</code>: a …\nChannel Points Automatic Reward Redemption Add V1 Event\n<code>channel.channel_points_custom_reward.add</code>: a custom channel …\nChannel Points Custom Reward Add V1 Event\n<code>channel.channel_points_custom_reward_redemption.add</code>: a …\nChannel Points Custom Reward Redemption Add V1 Event\n<code>channel.channel_points_custom_reward_redemption.update</code>: a …\nChannel Points Custom Reward Redemption Update V1 Event\n<code>channel.channel_points_custom_reward.remove</code>: a custom …\nChannel Points Custom Reward Remove V1 Event\n<code>channel.channel_points_custom_reward.update</code>: a custom …\nChannel Points Custom Reward Update V1 Event\n<code>channel.poll.begin</code>: a poll begins on the specified channel.\nChannel Poll Begin V1 Event\n<code>channel.poll.end</code>: a poll ends on the specified channel.\nChannel Poll End V1 Event\n<code>channel.poll.progress</code>: a user responds to a poll on the …\nChannel Poll Progress V1 Event\n<code>channel.prediction.begin</code>: a Prediction begins on the …\nChannel Prediction Begin V1 Event\n<code>channel.prediction.end</code>: a Prediction ends on the specified …\nChannel Prediction End V1 Event\n<code>channel.prediction.lock</code>: a Prediction is locked on the …\nChannel Prediction Lock V1 Event\n<code>channel.prediction.progress</code>: a user participates in a …\nChannel Prediction Progress V1 Event\n<code>channel.raid</code>: a broadcaster raids another broadcaster’s …\nChannel Raid V1 Event\n<code>channel.shared_chat.begin</code>: a channel becomes active in an …\nChannel SharedChat Begin V1 Event\n<code>channel.shared_chat.end</code>: a channel leaves a shared chat …\nChannel SharedChat End V1 Event\n<code>channel.shared_chat.update</code>: the active shared chat session …\nChannel SharedChat Update V1 Event\n<code>channel.shield_mode.begin</code>: a channel activates shield mode\nChannel ShieldMode Begin V1 Event\n<code>channel.shield_mode.end</code>: a channel deactivates shield mode\nChannel ShieldMode End V1 Event\n<code>channel.shoutout.create</code>: a specified broadcaster sends a …\nChannel Shoutout Create V1 Event\n<code>channel.shoutout.receive</code>: a specified broadcaster receives …\nChannel Shoutout Receive V1 Event\n<code>channel.subscribe</code>: a specified channel receives a …\nChannel Subscribe V1 Event\n<code>channel.subscription.end</code>: a subscription to the specified …\nChannel Subscription End V1 Event\n<code>channel.subscription.gift</code>: a user gives one or more gifted …\nChannel Subscription Gift V1 Event\n<code>channel.subscription.message</code>: a user sends a …\nChannel Subscription Message V1 Event\n<code>channel.suspicious_user.message</code>: a chat message has been …\nChannel SuspicousUser Message V1 Event\n<code>channel.suspicious_user.update</code>: a suspicious user has been …\nChannel SuspicousUser Update V1 Event\n<code>channel.unban</code>: a viewer is unbanned from the specified …\n<code>channel.unban_request.create</code>: a user creates an unban …\nChannel UnbanRequest Create V1 Event\n<code>channel.unban_request.resolve</code>: an unban request has been …\nChannel UnbanRequest Resolve V1 Event\nChannel Unban V1 Event\n<code>channel.update</code>: subscription type sends notifications when …\nChannel Update V1 Event\nChannel Update V2 Event\n<code>channel.vip.add</code>: a VIP is added to the channel.\nChannel VIP Add V1 Event\n<code>channel.vip.remove</code>: a VIP is removed from the channel.\nChannel VIP Remove V1 Event\n<code>channel.warning.acknowledge</code>: a warning is acknowledged by …\nChannel Warning Acknowledge V1 Event\n<code>channel.warning.send</code>: a warning is sent to a user.\nChannel Warning Send V1 Event\n<code>conduit.shard.disabled</code>: sends a notification when eventsub …\nConduit Shard Disabled V1 Event\nA notification with an event payload. Enumerates all …\nEvent Types\nError when parsing an event-type string.\n<code>stream.offline</code>: the specified broadcaster stops a stream.\nStreamOffline V1 Event\n<code>stream.online</code>: the specified broadcaster starts a stream.\nStreamOnline V1 Event\n<code>user.authorization.grant</code>: a user’s authorization has …\nUser Authorization Grant V1 Event\n<code>user.authorization.revoke</code>: a user has revoked …\nUser Authorization Revoke V1 Event\n<code>user.update</code>: user updates their account.\nUser Update V1 Event\n<code>user.whisper.message</code>: a user receives a whisper.\nUser Whisper Message V1 Event\nReturns the argument unchanged.\nIf this event is a <code>VerificationRequest</code>, return the …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the message in the <code>Payload</code> is <code>Notification</code>.\nReturns <code>true</code> if the message in the <code>Payload</code> is <code>Revocation</code>.\nReturns <code>true</code> if the message in the <code>Payload</code> is …\nParse string slice as an <code>Event</code>. Consider using …\nParse a http payload as an <code>Event</code>\nParse a websocket frame as an <code>EventsubWebsocketData</code>\nMake a <code>EventSubSubscription</code> from this notification.\nGet the event string of this event.\nVerify that this event is authentic using <code>HMAC-SHA256</code>.\nTypes for Eventsub websocket\nMetadata for a websocket event\nDefines the message that the EventSub WebSocket server …\nDefines the message that the EventSub WebSocket server …\nDefines a message that the EventSub WebSocket server sends …\nDefines a message that the EventSub WebSocket server sends …\nDefines the message that the EventSub WebSocket server …\nDefines the message that the EventSub WebSocket server …\nDefines the message that the EventSub WebSocket server …\nDefines the message that the EventSub WebSocket server …\nDefines the message that the EventSub WebSocket server …\nSession information sent with the welcome\nDefines the first message that the EventSub WebSocket …\nDefines the first message that the EventSub WebSocket …\nDefines the first message that the EventSub WebSocket …\nThe UTC date and time that the connection was created.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn ID that uniquely identifies this WebSocket connection. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum number of seconds that you should expect …\nGet message id\nGet message id\nAn ID that uniquely identifies the message. Twitch sends …\nAn ID that uniquely identifies the message. Twitch sends …\nAn ID that uniquely identifies the message. Twitch sends …\nAn ID that uniquely identifies the message. Twitch sends …\nAn ID that uniquely identifies the message. Twitch sends …\nGet message timestamp\nGet message timestamp\nThe UTC date and time that the message was sent.\nThe UTC date and time that the message was sent.\nThe UTC date and time that the message was sent.\nThe UTC date and time that the message was sent.\nThe UTC date and time that the message was sent.\nGet metadata for the event\nThe URL to reconnect to if you get a Reconnect message. Is …\nSession information\nSession data\nThe connection’s status, which is set to connected.\nThe type of event sent in the message.\nThe type of event sent in the message.\nThe version number of the subscription type’s …\nThe version number of the subscription type’s …\n<code>stream.offline</code>: the specified broadcaster stops a stream.\n<code>stream.offline</code> response payload.\n<code>stream.online</code>: the specified broadcaster starts a stream\n<code>stream.online</code> response payload.\nThe broadcaster user ID you want to get stream offline …\nThe broadcaster’s user id.\nThe broadcaster user ID you want to get stream online …\nThe broadcaster’s user id.\nThe broadcaster’s user login.\nThe broadcaster’s user login.\nThe broadcaster’s user display name.\nThe broadcaster’s user display name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe id of the stream.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe specified broadcaster stops a stream.\nThe specified broadcaster starts a stream\nThe timestamp at which the stream went online at.\nThe stream type. Valid values are: live, playlist, …\n<code>stream.offline</code>: the specified broadcaster stops a stream.\n<code>stream.offline</code> response payload.\nThe broadcaster user ID you want to get stream offline …\nThe broadcaster user ID you want to get stream offline …\nThe broadcaster’s user id.\nThe broadcaster’s user login.\nThe broadcaster’s user display name.\nCreate a builder for building <code>StreamOfflineV1</code>. On the …\n<code>stream.online</code>: the specified broadcaster starts a stream\n<code>stream.online</code> response payload.\nThe broadcaster user ID you want to get stream online …\nThe broadcaster user ID you want to get stream online …\nThe broadcaster’s user id.\nThe broadcaster’s user login.\nThe broadcaster’s user display name.\nCreate a builder for building <code>StreamOnlineV1</code>. On the …\nThe id of the stream.\nThe timestamp at which the stream went online at.\nThe stream type. Valid values are: live, playlist, …\n<code>user.authorization.grant</code>: a user’s authorization has …\n<code>user.authorization.grant</code> response payload.\n<code>user.authorization.revoke</code>: a user has revoked …\n<code>user.authorization.revoke</code> response payload.\n<code>user.update</code>: user updates their account.\n<code>user.update</code> response payload.\n<code>user.whisper.message</code>: a user receives a whisper.\n<code>user.whisper.message</code> response payload.\nAuthorization from a user has been granted or revoked to a …\nYour application’s client id. The provided client_id …\nThe client_id of the application that was granted user …\nYour application’s client id. The provided client_id …\nThe client_id of the application with revoked user access.\nThe user’s description.\nThe user’s email. Only included if you have the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ID of the user sending the message.\nThe login of the user sending the message.\nThe name of the user sending the message.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ID of the user receiving the message.\nThe login of the user receiving the message.\nThe name of the user receiving the message.\nSpecified user updates their account.\nThe user id for the user who has granted authorization for …\nThe user id for the user who has revoked authorization for …\nThe user ID for the user you want update notifications for.\nThe user’s user id.\nThe user ID of the person receiving whispers.\nThe user login for the user who has granted authorization …\nThe user login for the user who has revoked authorization …\nThe user’s user login.\nThe user display name for the user who has granted …\nThe user name for the user who has revoked authorization …\nThe user’s user display name.\nNotifications for whispers (private messages)\nObject containing whisper information.\nThe whisper ID.\n<code>user.authorization.grant</code>: a user’s authorization has …\n<code>user.authorization.grant</code> response payload.\n<code>user.authorization.revoke</code>: a user has revoked …\n<code>user.authorization.revoke</code> response payload.\nYour application’s client id. The provided client_id …\nThe client_id of the application that was granted user …\nYour application’s client id. The provided client_id …\nThe client_id of the application with revoked user access.\nA user’s authorization has been granted to your client …\nA user has revoked authorization for your client id.\nThe user id for the user who has granted authorization for …\nThe user id for the user who has revoked authorization for …\nThe user login for the user who has granted authorization …\nThe user login for the user who has revoked authorization …\nThe user display name for the user who has granted …\nThe user name for the user who has revoked authorization …\n<code>user.authorization.grant</code>: a user’s authorization has …\n<code>user.authorization.grant</code> response payload.\nCreate a builder for building <code>UserAuthorizationGrantV1</code>. On …\nYour application’s client id. The provided client_id …\nThe client_id of the application that was granted user …\nYour application’s client id. The provided client_id …\nThe user id for the user who has granted authorization for …\nThe user login for the user who has granted authorization …\nThe user display name for the user who has granted …\n<code>user.authorization.revoke</code>: a user has revoked …\n<code>user.authorization.revoke</code> response payload.\nCreate a builder for building <code>UserAuthorizationRevokeV1</code>. …\nYour application’s client id. The provided client_id …\nThe client_id of the application with revoked user access.\nYour application’s client id. The provided client_id …\nThe user id for the user who has revoked authorization for …\nThe user login for the user who has revoked authorization …\nThe user name for the user who has revoked authorization …\n<code>user.update</code>: user updates their account.\n<code>user.update</code> response payload.\nCreate a builder for building <code>UserUpdateV1</code>. On the …\nThe user’s description.\nThe user’s email. Only included if you have the …\nThe user ID for the user you want update notifications for.\nThe user ID for the user you want update notifications for.\nThe user’s user id.\nThe user’s user login.\nThe user’s user display name.\n<code>user.whisper.message</code>: a user receives a whisper.\n<code>user.whisper.message</code> response payload.\nObject containing whisper information.\nReturns the argument unchanged.\nThe ID of the user sending the message.\nThe login of the user sending the message.\nThe name of the user sending the message.\nCalls <code>U::from(self)</code>.\nA user receives a whisper\nThe body of the whisper message.\nThe ID of the user receiving the message.\nThe login of the user receiving the message.\nThe name of the user receiving the message.\nThe user ID of the person receiving whispers.\nObject containing whisper information.\nThe whisper ID.\n<code>user.whisper.message</code>: a user receives a whisper.\n<code>user.whisper.message</code> response payload.\nObject containing whisper information.\nCreate a builder for building <code>UserWhisperMessageV1</code>. On the …\nThe ID of the user sending the message.\nThe login of the user sending the message.\nThe name of the user sending the message.\nThe user ID of the person receiving whispers.\nThe body of the whisper message.\nThe ID of the user receiving the message.\nThe login of the user receiving the message.\nThe name of the user receiving the message.\nThe user ID of the person receiving whispers.\nObject containing whisper information.\nThe whisper ID.\nValid colors for announcements\nAn error for an invalid AnnouncementColor\nThe color blue\nRepresents a donation “amount”\nThe color green\nThe color orange\nThe primary color for the broadcaster\nThe color purple\nThe ISO-4217 three-letter currency code that identifies …\nThe number of decimal places used by the currency. For …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe monetary amount.\nBody parameters\nBody parameters\nBody parameters\nErrors that can happen when creating a body\nHttp client error\nError type to combine a http client error with a other …\nErrors for <code>HelixClient::req_get</code> and similar functions.\nCould not create request\nCould not create request\nA cursor is a pointer to the current “page” in the …\nA cursor is a pointer to the current “page” in the …\nCustom error\n{0}\n{0}\ndeserialization failed when processing request response …\ndeserialization failed when processing request response …\ndeserialization failed when processing request response …\ndeserialization failed when processing request response …\nAn empty body.\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nfield serializer only supports strings, sequences, …\nClient for Helix or the New Twitch API\nCreate a body. Used for specializing request bodies\nCould not parse DELETE response\nGot error from DELETE response\nCould not parse GET response\nGot error from GET response\nCould not parse PATCH response\nGot error from PATCH response\nCould not parse POST response\nGot error from POST response\nCould not parse PUT response\nGot error from PUT response\nhttp crate returned an error\nRequest failed from reqwests side\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\nErrors that can happen when creating <code>http::Uri</code> for <code>Request</code>\ncould not assemble URI for request\nuri is invalid\ncould not serialize as json\nNo pagination found\nOptional scopes needed by this endpoint\nOther error\nThe path to the endpoint relative to the helix root. eg. …\nA request that can be paginated.\npair serializer only supports strings, integers, floats, …\ncould not serialize request to query\ncould not serialize to query\nA request is a Twitch endpoint, see New Twitch API …\nHelix endpoint DELETEs information\nRequest failed from reqwests side\nHelix endpoint GETs information\nHelix endpoint PATCHs information\nHelix endpoint POSTs information\nHelix endpoint PUTs information\nResponse retrieved from endpoint. Data is the type in …\nResponse type. twitch’s response will  deserialize to …\nScopes needed for this endpoint\nErrors from the query serializer\nserialization of body failed\nserializer only supports structs and maps on top-level\nURI could not be parsed\ncould not assemble URI for request\ncould not parse response as utf8 when calling <code>GET {2}</code>\ncould not parse response as utf8 when calling <code>PUT {2}</code>\ncould not parse response as utf8 when calling <code>POST {2}</code>\ncould not parse response as utf8 when calling <code>POST {2}</code>\ncould not parse response as utf8 when calling <code>DELETE {2}</code>\nvalue serializer only supports primitive types\nGet a borrowed <code>Cow&lt;&#39;_, CursorRef&gt;</code>\nProvides access to the underlying value as a string slice.\nHelix endpoints regarding bits\nHelix endpoints regarding content classification cabels\nHelix endpoints regarding channels\nHelix endpoints regarding charities\nHelix endpoints regarding chat\nClient for Helix endpoints\nHelix endpoints regarding clips\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nTwitch’s response field for <code>data</code>.\nHelix endpoints regarding EventSub\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new Cursor from a static reference\nTransparently reinterprets the static string slice as a …\nTransparently reinterprets the string slice as a …\nHelix endpoints regarding games\nReturns bare URI for the request, NOT including query …\nReturns full URI for the request, including query …\nHelix endpoints regarding creator goals\nHelix endpoints regarding hype trains\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>Cursor</code> into a <code>Box&lt;CursorRef&gt;</code>\nConverts a <code>Box&lt;CursorRef&gt;</code> into a <code>Cursor</code> without copying or …\nMake a paginate-able request into a stream\nHelix endpoints regarding moderation\nConstructs a new Cursor\nFields which are not part of the data response, but are …\nA cursor value, to be used in a subsequent request to …\nParse a response string into the response.\nParse a response string into the response.\nParse a response string into the response.\nParse a response string into the response.\nParse a response string into the response.\nParse response.\nParse response.\nParse response.\nParse response.\nParse response.\nHelix endpoints regarding channel points/redeems\nThe current number of subscriber points earned by this …\nHelix endpoints regarding channel polls\nHelix endpoints regarding channel predictions\nDefines layout of the url parameters.\nHelix endpoints regarding channel raids\nRequests for driving the API\nThe request that was sent, used for pagination.\nResponses contains the return values of a request.\nHelix endpoints regarding stream schedules\nHelix endpoints regarding search\nShould returns the current pagination cursor.\nHelix endpoints regarding streams\nHelix endpoints regarding subscriptions\nHelix endpoints regarding tags\nUnwraps the underlying <code>String</code> value\nHelix endpoints regarding subscriptions\nResponse would return this many results if fully …\nCreate the body\nHelix endpoints regarding users\nHelix endpoints regarding videos\nHelix endpoints regarding whispers\nBody sent to DELETE response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nBody sent to POST response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nBody sent to POST response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nBody sent to PUT response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nLocation where this was triggered\nLocation where this was triggered\nLocation where this was triggered\nLocation where this was triggered\nReturn Values for Get Bits Leaderboard\nReturn Values for Get Cheermotes\nQuery Parameters for Get Bits Leaderboard\nQuery Parameters for Get Cheermotes\nGet Cheermotes in a specific broadcasters channel.\nID for the broadcaster who might own specialized …\nCreate a builder for building <code>GetBitsLeaderboardRequest</code>. …\nCreate a builder for building <code>GetCheermotesRequest</code>. On the …\nNumber of results to be returned. Maximum: 100. Default: …\nNumber of results to be returned. Maximum: 100. Default: …\nPeriod over which the returned data is aggregated.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a ranked list of Bits leaderboard information for an …\nRetrieves the list of available Cheermotes, animated …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether or not this emote provides a charity …\nThe data when this Cheermote was last updated.\nLeaderboard\nReturns an new <code>GetBitsLeaderboardRequest</code>\nGet available Cheermotes.\nOrder of the emotes as shown in the bits card, in …\nGet loaderboard for this period. Valid values: <code>&quot;day&quot;</code>, …\nTime period over which data is aggregated (PST time zone). …\nPrefix for cheermote\nGet leaderboard starting at this timestamp\nTimestamp for the period over which the returned data is …\nAn array of Cheermotes with their metadata.\nTotal number of results (users) returned. This is count or …\nShows whether the emote is <code>global_first_party</code>,  …\nGet leaderboard where this user is included (if they are …\nID of the user whose results are returned; i.e., the …\nReturn Values for Get Bits Leaderboard\nPeriod over which the returned data is aggregated.\nQuery Parameters for Get Bits Leaderboard\nInformation about user in leaderboard\nNumber of results to be returned. Maximum: 100. Default: …\nPeriod over which the returned data is aggregated.\nEnd of the date range for the returned data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLeaderboard\nTime period over which data is aggregated (PST time zone). …\nLeaderboard rank of the user.\nLeaderboard score (number of Bits) of the user\nTimestamp for the period over which the returned data is …\nStart of the date range for the returned data.\nTotal number of results (users) returned. This is count or …\nID of the user whose results are returned; i.e., the …\nID of the user (viewer) in the leaderboard entry.\nUser login name.\nDisplay name corresponding to user_id.\nCustom channel cheermote\nReturn Values for Get Cheermotes\nURLs to the same image, animated or static.\nImages in sizes\nImages for different themes\nTypes of cheermotes\nDisplay only\nQuery Parameters for Get Cheermotes\nGlobal cheermote\nGlobal third party cheermote\nLevel of cheermote image\nSponsored cheermote\nInformation about tier of emote\nAnimated GIFs\nID for the broadcaster who might own specialized …\nIndicates whether or not emote information is accessible …\nHex code for the color associated with the bits of that …\nDark mode\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the emote tier. Possible tiers are: …\nStructure containing both animated and static image sets, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether or not this emote provides a charity …\nThe data when this Cheermote was last updated.\nLight mode\nMinimum number of bits needed to be used to hit the given …\nOrder of the emotes as shown in the bits card, in …\nPrefix for cheermote\nIndicates whether or not we hide the emote from the bits …\nStatic PNGs\nAn array of Cheermotes with their metadata.\nShows whether the emote is <code>global_first_party</code>,  …\nURL to image in size 42 × 42\nURL to image in size 28 × 28\nURL to image in size 56 × 56\nURL to image in size 84 × 84\nURL to image in size 112 × 112\nReturn Values for Get Content Classification Labels\nQuery Parameters for Get Content Classification Labels\nCreate a builder for building …\nLocalized description of the CCL.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets information about Twitch content classification …\nUnique identifier for the CCL.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRequest content classification labels for some locale\nLocale for the Content Classification Labels. You may …\nLocalized name of the CCL.\nReturns an new <code>GetContentClassificationLabelsRequest</code>\nReturn Values for Get Content Classification Labels\nQuery Parameters for Get Content Classification Labels\nLocalized description of the CCL.\nUnique identifier for the CCL.\nLocale for the Content Classification Labels. You may …\nLocalized name of the CCL.\nReturn Values for Get Ad Schedule\nQuery Parameters for Add Channel Vip\nReturn Values for Add Channel Vip\nReturn Values for Get Channel Information\nList of labels that should be set as the Channel’s CCLs.\nReturn Values for Get Channel Editors\nReturn Values for Get Followed Channels\nReturn Values for Get Channel Followers\nQuery Parameters for Get Ad Schedule\nQuery Parameters for Get Channel Editors\nQuery Parameters for Get Channel Followers\nQuery Parameters for Get Channel Information\nQuery Parameters for Get Followed Channels\nQuery Parameters for Get VIPs\nReturn Values for Modify Channel Information\nBody Parameters for Modify Channel Information\nQuery Parameters for Modify Channel Information\nQuery Parameters for Remove Channel VIP\nReturn Values for Remove Channel VIP\nQuery Parameters for Snooze Next Ad\nReturn Values for Snooze Next Ad\nReturn Values for Start Commercial\nBody Parameters for Start Commercial\nQuery Parameters for Start Commercial\nSuccessfully added the VIP.\n204 - Channel/Stream updated successfully\nSuccessfully removed the VIP.\nReturn Values for Get VIPs\nAdds a VIP to the broadcaster’s chat room. …\nCursor for forward pagination: tells the server where to …\nCursor for forward pagination: tells the server where to …\nThe cursor used to get the next page of results. The …\nGet specified broadcasters ad schedule information\nGet specified broadcasters channel editors\nGet specified broadcasters channel editors\nCheck if the user is following this broadcaster\nGet channel VIPs in channel\nModify specified broadcasters channel\nModify specified broadcasters channel\nThe ID of the broadcaster that’s granting VIP status to …\nBroadcaster’s user ID associated with the channel.\nBroadcaster’s user ID associated with the channel.\nBroadcaster’s user ID associated with the channel.\nID of the channel\nTwitch User ID of this channel owner\nFollowedBroadcaster’s user ID associated with the …\nAn ID that uniquely identifies the broadcaster that this …\nThe ID of the broadcaster whose list of VIPs you want to …\nID of the channel\nThe ID of the broadcaster that’s removing VIP status …\nID of the channel\nID of the channel requesting a commercial\nGet channel information for specific broadcasters.\nLanguage of the channel\nLanguage of the channel\nLanguage of the channel\nTwitch User login of this channel owner\nThe broadcaster’s login name.\nTwitch user display name of this channel owner\nThe broadcaster’s display name.\nCreate a builder for building <code>AddChannelVipRequest</code>. On the …\nCreate a builder for building <code>GetAdScheduleRequest</code>. On the …\nCreate a builder for building <code>GetChannelEditorsRequest</code>. On …\nCreate a builder for building <code>GetChannelFollowersRequest</code>. …\nCreate a builder for building <code>GetChannelInformationRequest</code>.\nCreate a builder for building <code>GetFollowedChannels</code>. On the …\nCreate a builder for building <code>GetVipsRequest</code>. On the …\nCreate a builder for building …\nCreate a builder for building <code>ModifyChannelInformationBody</code>.\nCreate a builder for building <code>RemoveChannelVipRequest</code>. On …\nCreate a builder for building <code>SnoozeNextAdRequest</code>. On the …\nCreate a builder for building <code>StartCommercialBody</code>. On the …\nList of labels that should be set as the Channel’s CCLs.\nThe CCLs applied to the channel.\nList of labels that should be set as the Channel’s CCLs.\nDate and time the editor was given editor permissions.\nThe number of seconds you want your broadcast buffered …\nStream delay in seconds\nThe number of seconds you want your broadcast buffered …\nDescription of the stream\nThe length in seconds of the scheduled upcoming ad break.\nSet amount of results returned per page.\nSet amount of results returned per page.\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100. …\nMaximum number of objects to return. Maximum: 100. …\nThe maximum number of items to return per page in the …\nThe UTC timestamp when the user started following the …\nThe UTC timestamp when the user started following the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCurrent game ID being played on the channel. Use “0” …\nCurrent game ID being played on the channel\nCurrent game ID being played on the channel. Use “0” …\nName of the game being played on the channel\nGets ad schedule related information, including snooze, …\nGets a list of users who have editor permissions for a …\nGets a list of users that follow the specified …\nGets channel information for users. <code>get-channel-information</code>\nGets a list of broadcasters that the specified user …\nGets a list of the channel’s VIPs. <code>get-vips</code>\nID of the Content Classification Labels that must be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBoolean flag indicating if the channel has branded content.\nBoolean flag indicating if the channel has branded content.\nBoolean flag indicating if the channel has branded content.\nBoolean flag indicating whether the label should be …\nThe UTC timestamp of the broadcaster’s last ad-break, in …\nDesired length of the commercial in seconds. Valid options …\nLength of the triggered commercial\nProvides contextual information on why the request failed\nModify channel information for users. …\nAdd a channel VIP\nData to set on the stream.\nCreate a new <code>ContentClassificationLabel</code>\nRemove channel VIP\nCreate a new <code>StartCommercialRequest</code>\nStart a commercial in this broadcasters channel\nThe UTC timestamp of the broadcaster’s next scheduled …\nThe UTC timestamp of the broadcaster’s next scheduled …\nThe amount of pre-roll free time remaining for the channel …\nRemoves a VIP from the broadcaster’s chat room. …\nSeconds until the next commercial can be served on this …\nThe number of snoozes available for the broadcaster.\nThe number of snoozes available for the broadcaster.\nIf available, pushes back the timestamp of the upcoming …\nThe UTC timestamp when the broadcaster will gain an …\nThe UTC timestamp when the broadcaster will gain an …\nStarts a commercial on a specified channel. …\nA list of channel-defined tags to apply to the channel. To …\nThe tags applied to the channel.\nA list of channel-defined tags to apply to the channel. To …\nTitle of the stream. Value must not be an empty string.\nTitle of the stream\nTitle of the stream. Value must not be an empty string.\nCheck if this user id is following the broadcaster\nGet specified users followed channels\nThe ID of the user to add as a VIP in the broadcaster’s …\nUser ID of the editor.\nA user’s ID. Use this parameter to see whether the user …\nAn ID that uniquely identifies the user that’s following …\nA user’s ID. Use this parameter to see whether the user …\nFilters the list for specific VIPs. To specify more than …\nAn ID that uniquely identifies the VIP user.\nThe ID of the user to remove as a VIP from the …\nFilter response with these IDs\nThe user’s login name.\nThe user’s login name.\nDisplay name of the editor.\nThe user’s display name.\nThe user’s display name.\nQuery Parameters for Add Channel Vip\nReturn Values for Add Channel Vip\nSuccessfully added the VIP.\nThe ID of the broadcaster that’s granting VIP status to …\nThe ID of the user to add as a VIP in the broadcaster’s …\nReturn Values for Get Ad Schedule\nQuery Parameters for Get Ad Schedule\nBroadcaster’s user ID associated with the channel.\nThe length in seconds of the scheduled upcoming ad break.\nThe UTC timestamp of the broadcaster’s last ad-break, in …\nThe UTC timestamp of the broadcaster’s next scheduled …\nThe amount of pre-roll free time remaining for the channel …\nThe number of snoozes available for the broadcaster.\nThe UTC timestamp when the broadcaster will gain an …\nReturn Values for Get Channel Editors\nQuery Parameters for Get Channel Editors\nBroadcaster’s user ID associated with the channel.\nDate and time the editor was given editor permissions.\nUser ID of the editor.\nDisplay name of the editor.\nReturn Values for Get Channel Followers\nQuery Parameters for Get Channel Followers\nCursor for forward pagination: tells the server where to …\nBroadcaster’s user ID associated with the channel.\nMaximum number of objects to return. Maximum: 100. …\nThe UTC timestamp when the user started following the …\nA user’s ID. Use this parameter to see whether the user …\nAn ID that uniquely identifies the user that’s following …\nThe user’s login name.\nThe user’s display name.\nReturn Values for Get Channel Information\nQuery Parameters for Get Channel Information\nID of the channel\nTwitch User ID of this channel owner\nLanguage of the channel\nTwitch User login of this channel owner\nTwitch user display name of this channel owner\nThe CCLs applied to the channel.\nStream delay in seconds\nDescription of the stream\nCurrent game ID being played on the channel\nName of the game being played on the channel\nBoolean flag indicating if the channel has branded content.\nThe tags applied to the channel.\nTitle of the stream\nReturn Values for Get Followed Channels\nQuery Parameters for Get Followed Channels\nCursor for forward pagination: tells the server where to …\nFollowedBroadcaster’s user ID associated with the …\nAn ID that uniquely identifies the broadcaster that this …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nMaximum number of objects to return. Maximum: 100. …\nThe UTC timestamp when the user started following the …\nA user’s ID. Use this parameter to see whether the user …\nQuery Parameters for Get VIPs\nReturn Values for Get VIPs\nThe cursor used to get the next page of results. The …\nThe ID of the broadcaster whose list of VIPs you want to …\nThe maximum number of items to return per page in the …\nFilters the list for specific VIPs. To specify more than …\nAn ID that uniquely identifies the VIP user.\nThe user’s login name.\nThe user’s display name.\nList of labels that should be set as the Channel’s CCLs.\nReturn Values for Modify Channel Information\nBody Parameters for Modify Channel Information\nQuery Parameters for Modify Channel Information\n204 - Channel/Stream updated successfully\nID of the channel\nLanguage of the channel\nList of labels that should be set as the Channel’s CCLs.\nThe number of seconds you want your broadcast buffered …\nCurrent game ID being played on the channel. Use “0” …\nID of the Content Classification Labels that must be …\nBoolean flag indicating if the channel has branded content.\nBoolean flag indicating whether the label should be …\nA list of channel-defined tags to apply to the channel. To …\nTitle of the stream. Value must not be an empty string.\nQuery Parameters for Remove Channel VIP\nReturn Values for Remove Channel VIP\nSuccessfully removed the VIP.\nThe ID of the broadcaster that’s removing VIP status …\nThe ID of the user to remove as a VIP from the …\nQuery Parameters for Snooze Next Ad\nReturn Values for Snooze Next Ad\nID of the channel\nThe UTC timestamp of the broadcaster’s next scheduled …\nThe number of snoozes available for the broadcaster.\nThe UTC timestamp when the broadcaster will gain an …\nReturn Values for Start Commercial\nBody Parameters for Start Commercial\nQuery Parameters for Start Commercial\nID of the channel requesting a commercial\nDesired length of the commercial in seconds. Valid options …\nLength of the triggered commercial\nProvides contextual information on why the request failed\nSeconds until the next commercial can be served on this …\nReturn Values for Get Charity Campaign\nReturn Values for Get Charity Campaign Donations\nQuery Parameters for Get Charity Campaign Donations\nQuery Parameters for Get Charity Campaign\nThe cursor used to get the next page of results. The …\nAn object that contains the amount of money that the user …\nGets information about the charity campaign that a …\nGets information about the charity campaign that a …\nThe ID of the broadcaster that’s actively running a …\nAn ID that uniquely identifies the broadcaster that’s …\nThe ID of the broadcaster that’s currently running a …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nCreate a builder for building <code>GetCharityCampaignRequest</code>. …\nCreate a builder for building …\nAn ID that identifies the charity campaign that the …\nA description of the charity.\nA URL to an image of the charity’s logo. The image’s …\nThe charity’s name.\nA URL to the charity\nThe current amount of donations that the campaign has …\nSet amount of results returned per page.\nThe maximum number of items to return per page in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets information about the charity campaign that a …\nGets the list of donations that users have made to the …\nAn ID that uniquely identifies the charity campaign.\nAn ID that identifies the donation. The ID is unique …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn object that contains the amount of money that the …\nAn ID that identifies a user that donated money to the …\nThe user’s login name.\nThe user’s display name.\nReturn Values for Get Charity Campaign\nQuery Parameters for Get Charity Campaign\nThe ID of the broadcaster that’s actively running a …\nAn ID that uniquely identifies the broadcaster that’s …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nA description of the charity.\nA URL to an image of the charity’s logo. The image’s …\nThe charity’s name.\nA URL to the charity\nThe current amount of donations that the campaign has …\nAn ID that uniquely identifies the charity campaign.\nAn object that contains the amount of money that the …\nReturn Values for Get Charity Campaign Donations\nQuery Parameters for Get Charity Campaign Donations\nThe cursor used to get the next page of results. The …\nAn object that contains the amount of money that the user …\nThe ID of the broadcaster that’s currently running a …\nAn ID that identifies the charity campaign that the …\nThe maximum number of items to return per page in the …\nAn ID that identifies the donation. The ID is unique …\nAn ID that identifies a user that donated money to the …\nThe user’s login name.\nThe user’s display name.\nValid colors for announcements\nA set of badges\nThe color blue\nA chat emote\nA chat Badge\nCode for why a message was dropped.\nA drop reason of a sent message.\nChat settings\nReturn Values for Get Chatters\nQuery Parameters for Get Channel Chat Badges\nQuery Parameters for Get Channel Emotes\nQuery Parameters for Get Chat Settings\nQuery Parameters for Get Chatters\nQuery Parameters for Get Channel Emotes\nQuery Parameters for Get Global Chat Badges\nQuery Parameters for Get Channel Emotes\nQuery Parameters for Get Shared Chat Session\nQuery Parameters for Get Chatters\nQuery Parameters for Get User Emotes\nA chat emote\nThe color green\nYour message was not sent because it contained too many …\nYou are permanently banned from talking in <code>&lt;channel&gt;</code>.\nYour message was not sent because your account is not in …\nThis channel does not exist or has been suspended.\nYour message was not sent because it is identical to the …\nThis room is in emote-only mode. You can find your …\nThis room is in <code>&lt;duration&gt;</code> followers-only mode. Follow …\nThis room is in <code>&lt;duration1&gt;</code> followers-only mode. You have …\nThis room is in followers-only mode. Follow <code>&lt;channel&gt;</code> to …\nThis room is in unique-chat mode and the message you …\nYour message was not sent because you are sending messages …\nHey! Your message is being checked by mods and has not …\nYour message wasn’t posted due to conflicts with the …\nA verified phone number is required to chat in this …\nThis room is in slow mode and you are sending messages too …\nThis room is in subscribers only mode. To talk, purchase a …\nYou don’t have permission to perform that action.\nYou are timed out for <code>&lt;number&gt;</code> more seconds.\nThis room requires a verified account to chat. Please …\nThe color orange\nThe primary color for the broadcaster\nThe color purple\nQuery Parameters for Send A Shoutout\nReturn Values for Send A Shoutout\nBody Parameters for Send Chat Announcement\nQuery Parameters for Send Chat Announcement\nReturn Values for Send Chat Announcement\nBody Parameters for Send Chat message\nQuery Parameters for Send Chat message\nReturn Values for Send Chat message\nA participant in a shared chat session\nReturn Values for Get Shared Chat Session\nShoutout successful\nSuccessfully sent the announcement.\nSuccessfully updated the user’s chat color.\nAn unknown drop-code.\nBody Parameters for Update Chat Settings\nQuery Parameters for Update Chat Settings\nQuery Parameters for Update Chat Settings\nReturn Values for Update Chat Settings\nReturn Values for Get Chatters\nReturn Values for Get User Emotes\nThe cursor used to get the next page of results. The …\nThe cursor used to get the next page of results. The …\nGet chat badges for the specified broadcaster.\nGet emotes in a specific broadcasters channel.\nGet chat settings for broadcasters channel\nRetrieve the active shared chat session for a channel\nThe broadcaster whose chat badges are being requested. …\nThe broadcaster whose emotes are being requested.\nThe ID of the broadcaster whose chat settings you want to …\nThe ID of the broadcaster whose list of chatters you want …\nThe User ID of the channel broadcaster.\nThe User ID of the participant channel.\nThe User ID of a broadcaster you wish to get follower …\nThe ID of the broadcaster that owns the chat room to send …\nThe ID of the broadcaster whose chat room the message will …\nThe ID of the broadcaster whose chat settings you want to …\nThe ID of the broadcaster specified in the request.\nCreate a builder for building <code>GetChannelChatBadgesRequest</code>. …\nCreate a builder for building <code>GetChannelEmotesRequest</code>. On …\nCreate a builder for building <code>GetChatSettingsRequest</code>. On …\nCreate a builder for building <code>GetChattersRequest</code>. On the …\nCreate a builder for building <code>GetEmoteSetsRequest</code>. On the …\nCreate a builder for building <code>GetGlobalChatBadgesRequest</code>. …\nCreate a builder for building <code>GetGlobalEmotesRequest</code>. On …\nCreate a builder for building <code>GetSharedChatSessionRequest</code>. …\nCreate a builder for building <code>GetUserChatColorRequest</code>. On …\nCreate a builder for building <code>GetUserEmotesRequest</code>. On the …\nCreate a builder for building <code>SendAShoutoutRequest</code>. On the …\nCreate a builder for building <code>SendChatAnnouncementRequest</code>. …\nCreate a builder for building <code>SendChatAnnouncementBody</code>. On …\nCreate a builder for building <code>SendChatMessageBody</code>. On the …\nCreate a builder for building <code>UpdateChatSettingsRequest</code>. …\nCreate a builder for building <code>UpdateChatSettingsBody</code>. On …\nCreate a builder for building <code>UpdateUserChatColorRequest</code>. …\nCode for why the message was dropped.\nThe Hex color code that the user uses in chat for their …\nThe color used to highlight the announcement. Possible …\nThe color to use for the user’s name in chat.\nThe UTC date and time (in RFC3339 format) for when the …\nDescrition of the badge\nThe reason the message was dropped, if any.\nA Boolean value that determines whether chat messages must …\nA Boolean value that determines whether chat messages must …\nThe broadcaster whose emotes are being requested. Minimum: …\nID of the emote set the emote belongs to.\nID of the emote set the emote belongs to.\nGet emotes in these sets\nThe type of emote.\nThe type of emote.\nSet amount of results returned per page.\nThe maximum number of items to return per page in the …\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nThe length of time, in minutes, that the followers must …\nThe length of time, in minutes, that the followers must …\nThe formats that the emote is available in.\nThe formats that the emote is available in.\nThe formats that the emote is available in.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ID of the broadcaster that’s sending the Shoutout.\nGets a list of custom chat badges that can be used in chat …\nGets all custom emotes for a specific Twitch channel …\nGets the broadcaster’s chat settings. <code>get-chat-settings</code>\nGets the list of users that are connected to the specified …\nGets all Twitch emotes for one or more specific emote sets.\nGets a list of chat badges that can be used in chat for …\nGets all global emotes. Global emotes are Twitch-specific …\nRetrieves the active shared chat session for a channel. …\nGets the color used for the user’s name in chat. …\nRetrieves emotes available to the user across all channels.")