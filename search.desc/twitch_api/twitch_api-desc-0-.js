searchState.loadedDescShard("twitch_api", 0, "github crates-io docs-rs-big\nA deserialization error\nClient for Helix or the New Twitch API\ncould not deserialize, error on [{path}]. {error}\nLocation to twitch Eventsub WebSocket\nLocation of Twitch Helix\nLocation to twitch PubSub\nClient for Twitch APIs.\nAdd a channel moderator\nAdd a channel vip\nBan a user\nBlock a user\nCancel a raid\nDifferent clients you can use with this crate to call …\nCreate a Conduit for the Twitch Developer Application …\nCreate an EventSub subscription\nAdds a marker to a live stream.\nCreates a new <code>HelixClient</code> with a default <code>HttpClient</code>.\nDelete all chat messages in a broadcasters chat room\nDelete a specific chat message\nDeletes a specified conduit.\nDelete an EventSub subscription\nHolds serializable EventSub stuff\nExtra types not defined in <code>twitch_types</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all custom rewards\nGet all banned users in a channel Get Banned Users\nGet authenticated broadcasters’ subscribers\nGet channel emotes in channel with user id\nGet channel emotes in channel with user login\nGet ChannelInformation from a broadcasters id\nGet ChannelInformation from a broadcasters login\nGet all scheduled streams in a channel.\nGet multiple ChannelInformation from broadcasters ids\nGet a broadcaster’s chat settings\nGet chatters in a stream Chatter\nRetrieve a reference of the <code>HttpClient</code> inside this …\nGets a list of all shards for a conduit.\nGet all Conduits for the Twitch Developer Application …\nGet information about Twitch content classification …\nGet information about Twitch content classification labels …\nGet specific custom rewards, see <code>get_all_custom_rewards</code> to …\nGet emotes in emote sets\nGet all EventSub subscriptions for this Client\nGet users followed channels\nGet authenticated users’ followed streams\nGet games by ID.\nGet all global emotes\nGets a list of channels that the specified user has …\nGet all moderators in a channel Get Moderators\nRetrieves the active shared chat session for a channel\nGets the channel’s stream key.\nGets a list of markers from the specified VOD/video.\nGet multiple Streams from user ids.\nGet multiple Streams from user logins.\nGet a broadcasters follow count\nGets a list of unban requests for a broadcaster’s …\nGets the active extensions that the broadcaster has …\nGet a user’s chat color\nGet all emotes accessible to the user in all chats.\nGet all emotes accessible to the user in a channel.\nGets a list of all extensions (both active and inactive) …\nGet User from user id\nGet User from user login\nGet multiple users’ chat colors\nGet multiple Users from user ids.\nGet channel VIPs\nHelix endpoints or the New Twitch API\nHelix endpoint. See <code>helix</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>TwitchClient</code>\nParse a string as <code>T</code>, logging ignored fields and giving a …\nParse a json Value as <code>T</code>, logging ignored fields and giving …\nHolds serializable pubsub stuff\nRemove a channel moderator\nRemove a channel vip\nRequest on a valid <code>RequestDelete</code> endpoint, with the …\nRequest on a valid <code>RequestGet</code> endpoint, with the ability …\nRequest on a valid <code>RequestPatch</code> endpoint, with the ability …\nRequest on a valid <code>RequestPost</code> endpoint, with the ability …\nRequest on a valid <code>RequestPut</code> endpoint, with the ability …\nSearch Categories\nSearch Channels via channel name or description\nSend a chat announcement\nSend a chat message\nSend a chat message reply\nSend a whisper\nStart a raid\nUnban a user\nUnblock a user\nUpdates a conduit’s shard count..\nUpdates the Shard for the given Conduit.\nUpdate a user’s chat color\nUpdate the user’s description\nWarn a user\nCreate a new <code>TwitchClient</code> with an existing <code>HttpClient</code>\nError for the key/value\nPath to where the erroring key/value is\ncouldn’t create body from service response\nAn error occurrec when assembling the body\nA boxed future, mimics <code>futures::future::BoxFuture</code>\nA cheaply cloneable and sliceable chunk of contiguous …\nA client that can do requests\nA specific client default for setting some sane defaults …\nA compability shim for ensuring an error can represent …\nA client that will never work, used to trick documentation …\nError returned by the client\nErrors that can happen when assembling the client\nHttp failed\ncould not construct header name\ncould not construct header name\ncould not construct header value\ncould not construct header value\ncould not construct header value for User-Agent\nThe response could not be collected\nAn error occurred\nThe request type we’re expecting with body.\nPossible errors from …\nreqwest returned an error\nThe response type we’re expecting with body\nExtension trait for <code>Response</code>\nservice errored\nsurf failed to do the request: {0}\nPossible errors from <code>Client::req()</code> when using the surf …\nThe User-Agent <code>product</code> of this crate.\nErrors that can occur when using a <code>TowerService</code>\nA wrapped tower service\nUreq failed to do the request\nPossible errors from <code>Client::req()</code> when using the ureq …\nuri could not be translated into an url.\nuri could not be translated into an url.\nClears the buffer, removing all data.\nCreates <code>Bytes</code> instance from slice, by copying it.\nConstruct <code>Self</code> with sane defaults for API calls and oauth2.\nConstructs <code>Self</code> with sane defaults for API calls and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate Bytes with a buffer whose lifetime is controlled …\nCreates a new <code>Bytes</code> from a static slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the body as a vector of bytes\nReturns true if the <code>Bytes</code> has a length of 0.\nReturns true if this is the only reference to the data and …\nReturns the number of bytes contained in this <code>Bytes</code>.\nCreates a new empty <code>Bytes</code>.\nCreate a new wrapped tower service\nSend a request\nReturns a slice of self for the provided range.\nReturns a slice of self that is equivalent to the given …\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nShortens the buffer, keeping the first <code>len</code> bytes and …\nTry to convert self into <code>BytesMut</code>.\nGives the User-Agent header value for a client annotated …\nTwitch revoked your subscription because the users in the …\n<code>automod.message.hold</code>: a message was caught by automod for …\nAutomod Message Hold V1 Event\nAutomod Message Hold V2 Event\n<code>automod.message.update</code>: a message in the automod queue had …\nAutomod Message Update V1 Event\nAutomod Message Update V2 Event\n<code>automod.settings.update</code>: a notification is sent when a …\nAutomod Settings Update V1 Event\n<code>automod.terms.update</code>: a notification is sent when a …\nAutomod Terms Update V1 Event\nThe subscription to the beta subscription type was removed …\n<code>channel.ad_break.begin</code>: a user runs a midroll commercial …\nChannel Ad Break Begin V1 Event\n<code>channel.ban</code>: a viewer is banned from the specified channel.\nChannel Ban V1 Event\n<code>channel.charity_campaign.donate</code>: a user donates to the …\nChannel Charity Campaign Donate V1 Event\n<code>channel.charity_campaign.progress</code>: progress is made …\nChannel Charity Campaign Progress V1 Event\n<code>channel.charity_campaign.start</code>: a broadcaster starts a …\nChannel Charity Campaign Start V1 Event\n<code>channel.charity_campaign.stop</code>: a broadcaster stops a …\nChannel Charity Campaign Stop V1 Event\n<code>channel.chat.clear</code>: a moderator or bot clears all messages …\n<code>channel.chat.clear_user_messages</code>: a moderator or bot …\nChannel Chat ClearUserMessages V1 Event\nChannel Chat Clear V1 Event\n<code>channel.chat.message</code>: any user sends a message to a …\n<code>channel.chat.message_delete</code>: a moderator removes a …\nChannel Chat MessageDelete V1 Event\nChannel Chat Message V1 Event\n<code>channel.chat.notification</code>: an event that appears in chat …\nChannel Chat Notification V1 Event\n<code>channel.chat_settings.update</code>: a broadcaster’s chat …\nChannel ChatSettings Update V1 Event\n<code>channel.chat.user_message_hold</code>: a user’s message is …\nChannel Chat UserMessageHold V1 Event\n<code>channel.chat.user_message_update</code>: a user’s message’s …\nChannel Chat UserMessageUpdate V1 Event\n<code>channel.cheer</code>: a user cheers on the specified channel.\nChannel Cheer V1 Event\n<code>channel.follow</code>: a specified channel receives a follow.\nChannel Follow V1 Event\nChannel Follow V2 Event\n<code>channel.goal.begin</code>: a goal begins on the specified channel.\nChannel Goal Begin V1 Event\n<code>channel.goal.end</code>: a goal ends on the specified channel.\nChannel Goal End V1 Event\n<code>channel.goal.progress</code>: a goal makes progress on the …\nChannel Goal Progress V1 Event\n<code>channel.guest_star_guest.update</code>: a guest or a slot is …\nChannel GuestStarGuest Update V1 Event\n<code>channel.guest_star_session.begin</code>: the host begins a new …\nChannel GuestStarSession Begin V1 Event\n<code>channel.guest_star_session.end</code>: a running Guest Star …\nChannel GuestStarSession End V1 Event\n<code>channel.guest_star_settings.update</code>: the host preferences …\nChannel GuestStarSettings Update V1 Event\n<code>channel.hype_train.begin</code>: a hype train begins on the …\nChannel Hype Train Begin V1 Event\n<code>channel.hype_train.end</code>: a hype train ends on the specified …\nChannel Hype Train End V1 Event\n<code>channel.hype_train.progress</code>: a hype train makes progress …\nChannel Hype Train Progress V1 Event\n<code>channel.moderate</code>: a moderator performs a moderation action …\nChannel Moderate V1 Event\nChannel Moderate V2 Event\n<code>channel.moderator.add</code>: a user is given moderator …\nChannel Moderator Add V1 Event\n<code>channel.moderator.remove</code>: a user has moderator privileges …\nChannel Moderator Remove V1 Event\n<code>channel.channel_points_automatic_reward_redemption.add</code>: a …\nChannel Points Automatic Reward Redemption Add V1 Event\n<code>channel.channel_points_custom_reward.add</code>: a custom channel …\nChannel Points Custom Reward Add V1 Event\n<code>channel.channel_points_custom_reward_redemption.add</code>: a …\nChannel Points Custom Reward Redemption Add V1 Event\n<code>channel.channel_points_custom_reward_redemption.update</code>: a …\nChannel Points Custom Reward Redemption Update V1 Event\n<code>channel.channel_points_custom_reward.remove</code>: a custom …\nChannel Points Custom Reward Remove V1 Event\n<code>channel.channel_points_custom_reward.update</code>: a custom …\nChannel Points Custom Reward Update V1 Event\n<code>channel.poll.begin</code>: a poll begins on the specified channel.\nChannel Poll Begin V1 Event\n<code>channel.poll.end</code>: a poll ends on the specified channel.\nChannel Poll End V1 Event\n<code>channel.poll.progress</code>: a user responds to a poll on the …\nChannel Poll Progress V1 Event\n<code>channel.prediction.begin</code>: a Prediction begins on the …\nChannel Prediction Begin V1 Event\n<code>channel.prediction.end</code>: a Prediction ends on the specified …\nChannel Prediction End V1 Event\n<code>channel.prediction.lock</code>: a Prediction is locked on the …\nChannel Prediction Lock V1 Event\n<code>channel.prediction.progress</code>: a user participates in a …\nChannel Prediction Progress V1 Event\n<code>channel.raid</code>: a broadcaster raids another broadcaster’s …\nChannel Raid V1 Event\n<code>channel.shared_chat.begin</code>: a channel becomes active in an …\nChannel SharedChat Begin V1 Event\n<code>channel.shared_chat.end</code>: a channel leaves a shared chat …\nChannel SharedChat End V1 Event\n<code>channel.shared_chat.update</code>: the active shared chat session …\nChannel SharedChat Update V1 Event\n<code>channel.shield_mode.begin</code>: a channel activates shield mode\nChannel ShieldMode Begin V1 Event\n<code>channel.shield_mode.end</code>: a channel deactivates shield mode\nChannel ShieldMode End V1 Event\n<code>channel.shoutout.create</code>: a specified broadcaster sends a …\nChannel Shoutout Create V1 Event\n<code>channel.shoutout.receive</code>: a specified broadcaster receives …\nChannel Shoutout Receive V1 Event\n<code>channel.subscribe</code>: a specified channel receives a …\nChannel Subscribe V1 Event\n<code>channel.subscription.end</code>: a subscription to the specified …\nChannel Subscription End V1 Event\n<code>channel.subscription.gift</code>: a user gives one or more gifted …\nChannel Subscription Gift V1 Event\n<code>channel.subscription.message</code>: a user sends a …\nChannel Subscription Message V1 Event\n<code>channel.suspicious_user.message</code>: a chat message has been …\nChannel SuspicousUser Message V1 Event\n<code>channel.suspicious_user.update</code>: a suspicious user has been …\nChannel SuspicousUser Update V1 Event\n<code>channel.unban</code>: a viewer is unbanned from the specified …\n<code>channel.unban_request.create</code>: a user creates an unban …\nChannel UnbanRequest Create V1 Event\n<code>channel.unban_request.resolve</code>: an unban request has been …\nChannel UnbanRequest Resolve V1 Event\nChannel Unban V1 Event\n<code>channel.update</code>: subscription type sends notifications when …\nChannel Update V1 Event\nChannel Update V2 Event\n<code>channel.vip.add</code>: a VIP is added to the channel.\nChannel VIP Add V1 Event\n<code>channel.vip.remove</code>: a VIP is removed from the channel.\nChannel VIP Remove V1 Event\n<code>channel.warning.acknowledge</code>: a warning is acknowledged by …\nChannel Warning Acknowledge V1 Event\n<code>channel.warning.send</code>: a warning is sent to a user.\nChannel Warning Send V1 Event\nGeneral information about a Conduit\nConduit transport\nConduit transport response\n<code>conduit.shard.disabled</code>: sends a notification when eventsub …\nConduit Shard Disabled V1 Event\nConduit transport\nConduit transport\ncould not parse <code>http::Request::body()</code> as a <code>Payload</code>\nSubscription type name.\nTwitch has verified your callback and is able to send you …\nThe shard is enabled.\nA notification with an event payload. Enumerates all …\nGeneral information about an EventSub subscription.\nAn EventSub subscription.\nMetadata about the subscription.\nEvent Types\nevent could not be parsed, some context missing\nSubscription message/payload. Received on events and other …\nThe moderator that authorized the subscription is no …\nA notification holding some event data.\nTwitch revoked your subscription because the notification …\nThe notification delivery failure rate was too high.\nOptional scopes needed by this subscription\nNotification received\nPayload for given subscription\nErrors that can happen when parsing payload\nA subscription revocation\nScopes needed by this subscription\nGeneral information about a Shard\nA structured error that occurred with a shard\nA shard when described by Twitch\nThe shard status.\nSubscription request status\n<code>stream.offline</code>: the specified broadcaster stops a stream.\nStreamOffline V1 Event\n<code>stream.online</code>: the specified broadcaster starts a stream.\nStreamOnline V1 Event\nTransport setting for event notification\nTransport method\nTransport response on event notification\ncould not find an implementation for version <code>{version}</code> on …\nunknown event type encountered: {0}\nunknown message type encountered: {0}\n<code>user.authorization.grant</code>: a user’s authorization has …\nUser Authorization Grant V1 Event\n<code>user.authorization.revoke</code>: a user has revoked …\nUser Authorization Revoke V1 Event\nTwitch revoked your subscription because the users in the …\n<code>user.update</code>: user updates their account.\nUser Update V1 Event\n<code>user.whisper.message</code>: a user receives a whisper.\nUser Whisper Message V1 Event\ncould not parse <code>http::Request::body()</code> as UTF8\nSubscription type version\nVerification Request\nWebhook Callback Verification\nTwitch revoked your subscription because the subscribed to …\nWebhook transport\nWebhook transport response\nWebhook\nTwitch failed to verify that you own the callback …\nThe specified callback URL failed verification.\nTwitch is verifying that you own the callback specified in …\nThe shard is pending verification of the specified …\nWebhook transport\nWebhook transport\nWebsocket transport\nWebsocket transport response\nEventsub\nThe client failed to subscribe to events within the …\nThe client closed the connection.\nThe client closed the connection.\nThe client failed to respond to a ping message.\nThe client failed to respond to a ping message.\nThe client failed to reconnect to the Twitch WebSocket …\nThe client failed to reconnect to the Twitch WebSocket …\nThe Twitch WebSocket server experienced an unexpected …\nThe Twitch WebSocket server experienced an unexpected …\nThe Twitch WebSocket server experienced a network error …\nThe Twitch WebSocket server experienced a network error …\nThe Twitch WebSocket server timed out writing the message …\nThe Twitch WebSocket server timed out writing the message …\nThe client sent a non-pong message. Clients may only send …\nThe client sent a non-pong message. Clients may only send …\nWebsocket transport\nWebsocket transport\nReturns <code>Some(&amp;ConduitTransport)</code> if this transport is a …\nReturns <code>Some(&amp;ConduitTransport)</code> if this transport response …\nReturns <code>Some(&amp;WebhookTransport)</code> if this transport is a …\nReturns <code>Some(&amp;WebhookTransport)</code> if this transport response …\nReturns <code>Some(&amp;WebsocketTransport)</code> if this transport is a …\nReturns <code>Some(&amp;WebsocketTransport)</code> if this transport …\nAutomod related events\nCallback\nCallback\nChallenge string.\nSubscription types regarding channels\nError codes used to represent a specific error condition …\nCreates the <code>condition</code> for this EventSub subscription\nSubscription-specific parameters.\nJSON object specifying custom parameters for the …\nSubscription types regarding conduits.\nConvenience method for making a conduit transport\nAn ID that identifies the conduit to send notifications to.\nThe conduit ID\nThe UTC date and time that the WebSocket connection was …\nHow much the subscription counts against your limit.\nHow much the subscription counts against your limit.\nThe time the notification was created.\nRFC3339 timestamp indicating when the subscription was …\nThe UTC date and time that the WebSocket connection was …\nEventSub events and their types\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvenience method for getting the event type from the …\nConvenience method for getting the event version from the …\nID of the subscription.\nID of the subscription.\nConduit ID\nShard ID.\nShard ID.\nShard ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the transport is <code>Conduit</code>.\nReturns <code>true</code> if the transport response is <code>Conduit</code>.\nReturns <code>true</code> if the message is <code>Notification</code>.\nReturns <code>true</code> if the message is <code>Revocation</code>.\nReturns <code>true</code> if the message is <code>VerificationRequest</code>.\nReturns <code>true</code> if the transport is <code>Webhook</code>.\nReturns <code>true</code> if the transport response is <code>Webhook</code>.\nReturns <code>true</code> if the transport is <code>Websocket</code>.\nReturns <code>true</code> if the transport response is <code>Websocket</code>.\nEvent information.\nThe error that occurred while updating the shard.\nCreate a shard with a transport set\nParse http post request as a Payload with a specific event.\nParse string slice as a <code>Payload</code>, this will assume your …\nParse string slice as a <code>Payload</code> with a message of …\nParse string slice as a <code>Payload</code> with a message of …\nSecret attached to the subscription.\nAn ID that identifies the WebSocket to send notifications …\nAn ID that identifies the WebSocket that notifications are …\nNumber of shards associated with this conduit\nStatus of EventSub subscription\nStatus of the subscription.\nThe shard status. The subscriber receives events only for …\nSubscription types regarding streams\nSubscription information.\nTransport method\nNotification delivery specific information. Includes the …\nThe transport details that you want Twitch to use when …\nThe transport details that you want Twitch to use when …\nReturns <code>Some(ConduitTransport)</code> if this transport is a …\nReturns <code>Ok(ConduitTransport)</code> if this transport response is …\nReturns <code>Some(WebhookTransport)</code> if this transport is a …\nReturns <code>Ok(WebhookTransport)</code> if this transport response is …\nReturns <code>Some(WebsocketTransport)</code> if this transport is a …\nReturns <code>Ok(WebsocketTransport)</code> if this transport response …\nEvent type. Consider using <code>E::EVENT_TYPE</code> instead.\nThe category of the subscription.\nSubscription types regarding users\nEvent version. Consider using <code>E::VERSION</code> instead.\nThe version of the subscription.\nConvenience method for making a webhook transport\nConvenience method for making a websocket transport\nEvent type\nVersion\nAggressive behavior or language.\nA category identified by automod for a message.\n<code>automod.message.hold</code>: a message was caught by automod for …\n<code>automod.message.hold</code> response payload.\n<code>automod.message.hold</code>: a message was caught by automod for …\n<code>automod.message.hold</code> response payload.\n<code>automod.message.update</code>: a message in the automod queue had …\n<code>automod.message.update</code> response payload.\n<code>automod.message.update</code>: a message in the automod queue had …\n<code>automod.message.hold</code> response payload.\n<code>automod.settings.update</code>: a notification is sent when a …\n<code>automod.settings.update</code> response payload.\n<code>automod.terms.update</code>: A notification is sent when a …\n<code>automod.terms.update</code> response payload.\nBullying or harassment.\nDiscrimination or negative references to disabilities.\nMisogynistic language or behavior.\nProfane language.\nRacist language or behavior.\nContent relating to or expressing sexuality.\nInappropriate or suggestive sexual terms\nUse of swear words or expletives.\nAn unknown category identified by Automod, contains the …\nThe status change applied to the terms.\nThe Automod level for hostility involving aggression.\nUser ID of the broadcaster (channel).\nThe ID of the broadcaster specified in the request.\nUser ID of the broadcaster (channel).\nThe ID of the broadcaster specified in the request.\nUser ID of the broadcaster (channel). Maximum: 1\nThe ID of the broadcaster specified in the request.\nUser ID of the broadcaster (channel).\nThe ID of the broadcaster specified in the request.\nUser ID of the broadcaster (channel). Maximum: 1\nThe ID of the broadcaster specified in the request.\nUser ID of the broadcaster (channel). Maximum: 1\nThe ID of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nThe Automod level for hostility involving name calling or …\nThe category of the message.\nThe category of the message.\nThe Automod level for discrimination against disability.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndicates whether this term was added due to an Automod …\nThe timestamp of when automod saved the message.\nThe timestamp of when automod saved the message.\nThe timestamp of when automod saved the message.\nThe timestamp of when automod saved the message.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe level of severity. Measured between 1 to 4.\nThe level of severity. Measured between 1 to 4.\nEvents for Automod actions on messages\nThe body of the message.\nThe body of the message.\nThe body of the message.\nThe body of the message.\nThe ID of the message that was flagged by automod.\nThe ID of the message that was flagged by automod.\nThe ID of the message that was flagged by automod.\nThe ID of the message that was flagged by automod.\nThe Automod level for discrimination against women.\nUser ID of the moderator.\nUser ID of the moderator.\nUser ID of the moderator.\nThe ID of the moderator.\nUser ID of the moderator.\nThe ID of the moderator.\nUser ID of the moderator.\nThe ID of the moderator who changed the channel settings.\nUser ID of the moderator creating the subscription. …\nThe ID of the moderator who changed the channel settings.\nThe login of the moderator.\nThe login of the moderator.\nThe login of the moderator.\nThe login of the moderator.\nThe moderator’s user name.\nThe moderator’s user name.\nThe moderator’s user name.\nThe moderator’s user name.\nThe default AutoMod level for the broadcaster. This field …\nThe Automod level for racial discrimination.\nThe reason why a message was held\nThe reason why a message was held\nEvents for Automod settings\nThe Automod level for sexual content.\nThe AutoMod level for discrimination based on sexuality, …\nThe message’s status.\nThe message’s status.\nThe Automod level for profanity.\nEvents for Automod terms (allowed/denied words)\nThe list of terms that had a status change.\nThe message sender’s user ID.\nThe message sender’s user ID.\nThe message sender’s user ID.\nThe message sender’s user ID.\nThe message sender’s login name.\nThe message sender’s login name.\nThe message sender’s login name.\nThe message sender’s login name.\nThe message sender’s display name.\nThe message sender’s display name.\nThe message sender’s display name.\nThe message sender’s display name.\nThe message was approved (shown in chat)\nThe message was caught by automod’s rules\nA blocked term that was found in a message\nInformation on which blocked terms were matched in a …\nInformation about the blocked terms that caused a message …\nThe reason why a message was held\nA message sent in automod events\nThe bounds of the text that caused the message to be …\nA cheermote in a message filtered by automod\nAn emote in a message filtered by automod\nA chat message fragment\n<code>automod.message.hold</code>: a message was caught by automod for …\n<code>automod.message.hold</code> response payload.\n<code>automod.message.hold</code>: a message was caught by automod for …\n<code>automod.message.hold</code> response payload.\nInformation on why a message was caught by automod\nA message’s Automod status\n<code>automod.message.update</code>: a message in the automod queue had …\n<code>automod.message.update</code> response payload.\n<code>automod.message.update</code>: a message in the automod queue had …\n<code>automod.message.hold</code> response payload.\nThe message was caught because of one or more blocked terms\nA Cheermote.\nThe message was denied (not shown in chat)\nA Emote.\nThe message is too old, it can’t be acted upon anymore.\nThe message was invalid\nA text fragment, see <code>AutomodMessageFragment::text</code>.\nAn unknown Automod message status, contains the raw string …\nThe amount of bits cheered.\nThe bounds of the text that caused the message to be …\nThe bounds of the text that caused the message to be …\nUser ID of the broadcaster (channel).\nThe ID of the broadcaster specified in the request.\nUser ID of the broadcaster (channel).\nThe ID of the broadcaster specified in the request.\nUser ID of the broadcaster (channel). Maximum: 1\nThe ID of the broadcaster specified in the request.\nUser ID of the broadcaster (channel).\nThe ID of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nThe category of the message.\nThe category of the message.\nThe category of the caught message.\nAn ID that identifies the emote set that the emote belongs …\nIndex in the message for the end of the problem (0 …\nOrdered list of chat message fragments.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe timestamp of when automod saved the message.\nThe timestamp of when automod saved the message.\nThe timestamp of when automod saved the message.\nThe timestamp of when automod saved the message.\nA message was caught by automod for review\nAn ID that uniquely identifies this emote.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe level of severity. Measured between 1 to 4.\nThe level of severity. Measured between 1 to 4.\nThe level of severity (1-4).\nThe body of the message.\nThe body of the message.\nThe body of the message.\nThe body of the message.\nThe ID of the message that was flagged by automod.\nThe ID of the message that was flagged by automod.\nThe ID of the message that was flagged by automod.\nThe ID of the message that was flagged by automod.\nUser ID of the moderator.\nUser ID of the moderator.\nUser ID of the moderator.\nThe ID of the moderator.\nUser ID of the moderator.\nThe ID of the moderator.\nThe login of the moderator.\nThe login of the moderator.\nThe moderator’s user name.\nThe moderator’s user name.\nThe id of the broadcaster that owns the blocked term.\nThe login of the broadcaster that owns the blocked term.\nThe username of the broadcaster that owns the blocked term.\nThe name portion of the Cheermote string that you use in …\nThe reason why a message was held\nThe reason why a message was held\nIndex in the message for the start of the problem (0 …\nThe message’s status.\nThe message’s status.\nThe id of the blocked term found.\nThe list of blocked terms found in the message.\nThe list of blocked terms found in the message.\nGet the text data\nThe chat message in plain text.\nThe tier level of the cheermote.\na message in the automod queue had its status changed\nThe message sender’s user ID.\nThe message sender’s user ID.\nThe message sender’s user ID.\nThe message sender’s user ID.\nThe message sender’s login name.\nThe message sender’s login name.\nThe message sender’s login name.\nThe message sender’s login name.\nThe message sender’s display name.\nThe message sender’s display name.\nThe message sender’s display name.\nThe message sender’s display name.\nA Cheermote.\nA Emote.\nMessage text in a fragment\nMessage text in a fragment\nMessage text in a fragment\n<code>automod.message.hold</code>: a message was caught by automod for …\n<code>automod.message.hold</code> response payload.\n<code>automod.message.hold</code>: a message was caught by automod for …\n<code>automod.message.hold</code> response payload.\nUser ID of the broadcaster (channel).\nThe ID of the broadcaster specified in the request.\nUser ID of the broadcaster (channel).\nThe ID of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nCreate a builder for building <code>AutomodMessageHoldV1</code>. On the …\nCreate a builder for building <code>AutomodMessageHoldV2</code>. On the …\nThe category of the message.\nThe timestamp of when automod saved the message.\nThe timestamp of when automod saved the message.\nThe level of severity. Measured between 1 to 4.\nThe body of the message.\nThe body of the message.\nThe ID of the message that was flagged by automod.\nThe ID of the message that was flagged by automod.\nUser ID of the moderator.\nUser ID of the moderator.\nGet automod hold notifications for this channel as a …\nGet automod hold notifications for this channel as a …\nThe reason why a message was held\nThe message sender’s user ID.\nThe message sender’s user ID.\nThe message sender’s login name.\nThe message sender’s login name.\nThe message sender’s display name.\nThe message sender’s display name.\n<code>automod.message.update</code>: a message in the automod queue had …\n<code>automod.message.update</code> response payload.\n<code>automod.message.update</code>: a message in the automod queue had …\n<code>automod.message.hold</code> response payload.\nUser ID of the broadcaster (channel). Maximum: 1\nThe ID of the broadcaster specified in the request.\nUser ID of the broadcaster (channel).\nThe ID of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nCreate a builder for building <code>AutomodMessageUpdateV1</code>. On …\nCreate a builder for building <code>AutomodMessageUpdateV2</code>. On …\nThe category of the message.\nThe timestamp of when automod saved the message.\nThe timestamp of when automod saved the message.\nThe level of severity. Measured between 1 to 4.\nThe body of the message.\nThe body of the message.\nThe ID of the message that was flagged by automod.\nThe ID of the message that was flagged by automod.\nUser ID of the moderator.\nThe ID of the moderator.\nUser ID of the moderator.\nThe ID of the moderator.\nThe login of the moderator.\nThe login of the moderator.\nThe moderator’s user name.\nThe moderator’s user name.\nGet automod update notifications for messages in this …\nGet automod update notifications for this channel as a …\nThe reason why a message was held\nThe message’s status.\nThe message’s status.\nThe message sender’s user ID.\nThe message sender’s user ID.\nThe message sender’s login name.\nThe message sender’s login name.\nThe message sender’s display name.\nThe message sender’s display name.\n<code>automod.settings.update</code>: a notification is sent when a …\n<code>automod.settings.update</code> response payload.\nThe Automod level for hostility involving aggression.\nUser ID of the broadcaster (channel). Maximum: 1\nThe ID of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nThe Automod level for hostility involving name calling or …\nThe Automod level for discrimination against disability.\nThe Automod level for discrimination against women.\nUser ID of the moderator.\nThe ID of the moderator who changed the channel settings.\nThe login of the moderator.\nThe moderator’s user name.\nThe default AutoMod level for the broadcaster. This field …\nThe Automod level for racial discrimination.\nThe Automod level for sexual content.\nThe AutoMod level for discrimination based on sexuality, …\nThe Automod level for profanity.\na notification is sent when a broadcaster’s automod …\n<code>automod.settings.update</code>: a notification is sent when a …\n<code>automod.settings.update</code> response payload.\nThe Automod level for hostility involving aggression.\nUser ID of the broadcaster (channel). Maximum: 1\nThe ID of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nCreate a builder for building <code>AutomodSettingsUpdateV1</code>. On …\nThe Automod level for hostility involving name calling or …\nThe Automod level for discrimination against disability.\nThe Automod level for discrimination against women.\nUser ID of the moderator.\nThe ID of the moderator who changed the channel settings.\nThe login of the moderator.\nThe moderator’s user name.\nGet notifications for updates on Automod settings in this …\nThe default AutoMod level for the broadcaster. This field …\nThe Automod level for racial discrimination.\nThe Automod level for sexual content.\nThe AutoMod level for discrimination based on sexuality, …\nThe Automod level for profanity.\nA term was added to the list of blocked terms\nA term was added to the list of permitted terms\nAn action on an Automod term\n<code>automod.terms.update</code>: A notification is sent when a …\n<code>automod.terms.update</code> response payload.\nA term was removed to the list of blocked terms\nA term was removed from the list of permitted terms\nAn unknown term action, contains the raw string provided …\nThe status change applied to the terms.\nUser ID of the broadcaster (channel). Maximum: 1\nThe ID of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nReturns the argument unchanged.\nIndicates whether this term was added due to an Automod …\nCalls <code>U::from(self)</code>.\nUser ID of the moderator creating the subscription. …\nThe ID of the moderator who changed the channel settings.\nThe login of the moderator.\nThe moderator’s user name.\nThe list of terms that had a status change.\na notification when a broadcaster’s automod terms are …\nA term was added to the list of blocked terms\nA term was added to the list of permitted terms\nAn action on an Automod term\n<code>automod.terms.update</code>: A notification is sent when a …\n<code>automod.terms.update</code> response payload.\nA term was removed to the list of blocked terms\nA term was removed from the list of permitted terms\nAn unknown term action, contains the raw string provided …\nThe status change applied to the terms.\nUser ID of the broadcaster (channel). Maximum: 1\nThe ID of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nCreate a builder for building <code>AutomodTermsUpdateV1</code>. On the …\nIndicates whether this term was added due to an Automod …\nUser ID of the moderator creating the subscription. …\nThe ID of the moderator who changed the channel settings.\nThe login of the moderator.\nThe moderator’s user name.\nGet automod update notifications for permitted/blocked …\nThe list of terms that had a status change.\n<code>channel.ad_break.begin</code>: a user runs a midroll commercial …\n<code>channel.ad_break.begin</code> response payload.\n<code>channel.ban</code>: a viewer is banned from the specified channel.\n<code>channel.ban</code> response payload.\n<code>channel.charity_campaign.donate</code>: a user donates to the …\n<code>channel.charity_campaign.donate</code> response payload.\n<code>channel.charity_campaign.progress</code>: progress is made …\n<code>channel.charity_campaign.progress</code> response payload.\n<code>channel.charity_campaign.start</code>: a broadcaster starts a …\n<code>channel.charity_campaign.start</code> response payload.\n<code>channel.charity_campaign.stop</code>: a broadcaster stops a …\n<code>channel.charity_campaign.stop</code> response payload.\n<code>channel.chat.clear_user_messages</code>: a moderator or bot …\n<code>channel.chat.clear_user_messages</code> response payload.\n<code>channel.chat.clear</code>: a moderator or bot clears all messages …\n<code>channel.chat.clear</code> response payload.\n<code>channel.chat.message_delete</code>: a moderator removes a …\n<code>channel.chat.message_delete</code> response payload.\n<code>channel.chat.message</code>: a user sends a message to a specific …\n<code>channel.chat.message</code> response payload.\n<code>channel.chat.notification</code>: an event that appears in chat …\n<code>channel.chat.notification</code> response payload.\n<code>channel.chat_settings.update</code>: a broadcaster’s chat …\n<code>channel.chat_settings.update</code> response payload.\n<code>channel.chat.user_message_hold</code>: a user’s message is …\n<code>channel.chat.user_message_hold</code> response payload.\n<code>channel.chat.user_message_update</code>: a user’s message’s …\n<code>channel.chat.user_message_update</code> response payload.\n<code>channel.cheer</code>: a user cheers on the specified channel.\n<code>channel.cheer</code> response payload.\n<code>channel.follow</code> v1: a specified channel receives a follow.\n<code>channel.follow</code> response payload.\n<code>channel.follow</code> v2: a specified channel receives a follow.\n<code>channel.follow</code> response payload.\n<code>channel.goal.begin</code>: a specified broadcaster begins a goal.\n<code>channel.goal.begin</code> response payload.\n<code>channel.goal.end</code>: a specified broadcaster ends a goal.\n<code>channel.goal.end</code> response payload.\n<code>channel.goal.progress</code>: progress is made towards the …\n<code>channel.goal.progress</code> response payload.\n<code>channel.guest_star_guest.update</code>: the host preferences for …\n<code>channel.guest_star_guest.update</code> response payload.\n<code>channel.guest_star_session.begin</code>: the host begins a new …\n<code>channel.guest_star_session.begin</code> response payload.\n<code>channel.guest_star_session.end</code>: a running Guest Star …\n<code>channel.guest_star_session.end</code> response payload.\n<code>channel.guest_star_settings.update</code>: the host preferences …\n<code>channel.guest_star_settings.update</code> response payload.\n<code>channel.hype_train.begin</code>: a hype train begins on the …\n<code>channel.hype_train.begin</code> response payload.\n<code>channel.hype_train.end</code>: a hype train ends on the specified …\n<code>channel.hype_train.end</code> response payload.\n<code>channel.hype_train.progress</code>: a hype train makes progress …\n<code>channel.hype_train.progress</code> response payload.\n<code>channel.moderate</code>: a moderator performs a moderation action …\n<code>channel.moderate</code> response payload.\n<code>channel.moderate</code>: a moderator performs a moderation action …\n<code>channel.moderate</code> response payload.\n<code>channel.moderator.add</code>: a user is given moderator …\n<code>channel.moderator.add</code> response payload.\n<code>channel.moderator.remove</code>: a user has moderator privileges …\n<code>channel.moderator.remove</code> response payload.\n<code>channel.channel_points_automatic_reward_redemption.add</code>:a …\n<code>channel.channel_points_automatic_reward_redemption.add</code> …\n<code>channel.channel_points_custom_reward.add</code>: a custom channel …\n<code>channel.channel_points_custom_reward.add</code> response payload.\n<code>channel.channel_points_custom_reward_redemption.add</code>: a …\n<code>channel.channel_points_custom_reward_redemption.add</code> …\n<code>channel.channel_points_custom_reward_redemption.update</code>: a …\n<code>channel.channel_points_custom_reward_redemption.update</code> …\n<code>channel.channel_points_custom_reward.remove</code>: a custom …\n<code>channel.channel_points_custom_reward.remove</code> response …\n<code>channel.channel_points_custom_reward.update</code>: a custom …\n<code>channel.channel_points_custom_reward.update</code> response …\n<code>channel.poll.begin</code>: a poll begins on the specified channel.\n<code>channel.poll.begin</code> response payload.\n<code>channel.poll.end</code>: a poll ends on the specified channel.\n<code>channel.poll.end</code> response payload.\n<code>channel.poll.progress</code>: an user responds to a poll on the …\n<code>channel.poll.progress</code> response payload.\n<code>channel.prediction.begin</code>: a Prediction begins on the …\n<code>channel.prediction.begin</code> response payload.\n<code>channel.prediction.end</code>: a Prediction ends on the specified …\n<code>channel.prediction.end</code> response payload.\n<code>channel.prediction.lock</code>: an user responds to a prediction …\n<code>channel.prediction.lock</code> response payload.\n<code>channel.prediction.progress</code>: an user responds to a …\n<code>channel.prediction.progress</code> response payload.\n<code>channel.raid</code>: a a broadcaster raids another …\n<code>channel.raid</code> response payload.\n<code>channel.shared_chat.begin</code>: a channel becomes active in an …\n<code>channel.shared_chat.begin</code> response payload.\n<code>channel.shared_chat.end</code>: a channel leaves a shared chat …\n<code>channel.shared_chat.end</code> response payload.\n<code>channel.shared_chat.update</code>: the active shared chat session …\n<code>channel.shared_chat.update</code> response payload.\n<code>channel.shield_mode.begin</code>: an user responds to a …\n<code>channel.shield_mode.begin</code> response payload.\n<code>channel.shield_mode.end</code>: an user responds to a prediction …\n<code>channel.shield_mode.end</code> response payload.\n<code>channel.shoutout.create</code>: a Prediction begins on the …\n<code>channel.shoutout.create</code> response payload.\n<code>channel.shoutout.receive</code>: a Prediction begins on the …\n<code>channel.shoutout.receive</code> response payload.\n<code>channel.subscribe</code>: a specified channel receives a …\n<code>channel.subscribe</code> response payload.\n<code>channel.subscription.end</code>: a subscription to the specified …\n<code>channel.subscription.end</code> response payload.\n<code>channel.subscription.gift</code>: a subscription to the specified …\n<code>channel.subscription.gift</code> response payload.\n<code>channel.subscription.message</code>: a subscription to the …\n<code>channel.subscription.message</code> response payload.\n<code>channel.suspicious_user.message</code>: a chat message has been …\n<code>channel.suspicious_user.message</code> response payload.\n<code>channel.suspicious_user.update</code>: a suspicious user has been …\n<code>channel.suspicious_user.update</code> response payload.\n<code>channel.unban_request.create</code>: a user creates an unban …\n<code>channel.unban_request.create</code> response payload.\n<code>channel.unban_request.resolve</code>: an unban request has been …\n<code>channel.unban_request.resolve</code> response payload.\n<code>channel.unban</code>: a viewer is unbanned from the specified …\n<code>channel.unban</code> response payload.\nversion 1 of <code>channel.update</code> subscription type sends …\n<code>channel.update</code> response payload.\n<code>channel.update</code> subscription type sends notifications when …\n<code>channel.update</code> response payload.\n<code>channel.vip.add</code>: a VIP is added to the channel.\n<code>channel.vip.add</code> response payload.\n<code>channel.vip.remove</code>: a user has vip privileges removed on a …\n<code>channel.vip.remove</code> response payload.\n<code>channel.warning.acknowledge</code>: a warning is acknowledged by …\n<code>channel.warning.acknowledge</code> response payload.\n<code>channel.warning.send</code>: a warning is sent to a user.\n<code>channel.warning.send</code> response payload.\nThe action being taken\nThe action being taken\nAd break on channel has begun\nAn object that contains the amount of money that the user …\nCustom background color for the reward. Format: Hex with # …\nCustom background color for the reward. Format: Hex with # …\nCustom background color for the reward. Format: Hex with # …\nList of chat badges.\nList of chat badges.\nA viewer is banned from the specified channel.\nA ban evasion likelihood value (if any) that as been …\nThe UTC date and time (in RFC3339 format) of when the user …\nThe number of bits cheered.\nThe Bits voting settings for the poll.\nThe Bits voting settings for the poll.\nThe Bits voting settings for the poll.\nAn ID that identifies the broadcaster that’s running the …\nAn ID that identifies the broadcaster that’s running the …\nAn ID that identifies the broadcaster that’s running the …\nAn ID that identifies the broadcaster that ran the …\nAn ID that identifies the charity campaign.\nAn ID that identifies the charity campaign.\nThe broadcaster’s login name.\nThe broadcaster’s login name.\nAn ID that identifies the broadcaster that’s running the …\nAn ID that identifies the broadcaster that’s running the …\nThe broadcaster’s display name.\nThe broadcaster’s display name.\nThe ID of the broadcaster that you want to get Channel Ad …\nThe broadcaster’s user ID for the channel the ad was run …\nThe broadcaster user ID for the channel you want to get …\nThe requested broadcaster ID.\nThe broadcaster user ID for the channel you want to …\nThe ID of the channel where the reward was redeemed.\nThe broadcaster user ID for the channel you want to …\nThe requested broadcaster ID.\nThe broadcaster user ID for the channel you want to …\nThe requested broadcaster ID.\nThe broadcaster user ID for the channel you want to …\nThe requested broadcaster ID.\nThe broadcaster user ID for the channel you want to …\nThe requested broadcaster ID.\nThe broadcaster user ID for the channel you want to …\nThe requested broadcaster ID.\nThe ID of the broadcaster that you want to receive …\nThe ID of the broadcaster that you want to receive …\nThe ID of the broadcaster that you want to receive …\nThe ID of the broadcaster that you want to receive …\nUser ID of the channel to receive chat clear user messages …\nThe broadcaster user ID.\nUser ID of the channel to receive chat clear user messages …\nThe broadcaster user ID.\nUser ID of the channel to receive chat message events for.\nThe broadcaster user ID.\nUser ID of the channel to receive chat message delete …\nThe broadcaster user ID.\nUser ID of the channel to receive chat notification events …\nThe broadcaster user ID.\nUser ID of the channel to receive chat message events for.\nThe ID of the broadcaster specified in the request.\nUser ID of the channel to receive chat message events for.\nThe ID of the broadcaster specified in the request.\nUser ID of the channel to receive chat settings update …\nThe ID of the broadcaster specified in the request.\nThe broadcaster user ID for the channel you want to get …\nThe requested broadcaster ID.\nThe broadcaster user ID for the channel you want to get …\nThe requested broadcaster ID.\nThe broadcaster user ID for the channel you want to get …\nThe requested broadcaster ID.\nThe ID of the broadcaster to get notified about.\nAn ID that uniquely identifies the broadcaster.\nThe ID of the broadcaster to get notified about.\nAn ID that uniquely identifies the broadcaster.\nThe ID of the broadcaster to get notified about.\nAn ID that uniquely identifies the broadcaster.\nThe broadcaster user ID for the channel you want to …\nThe non-host broadcaster user ID.\nThe broadcaster user ID for the channel you want to …\nThe broadcaster user ID.\nThe broadcaster user ID for the channel you want to …\nThe non-host broadcaster user ID.\nThe broadcaster user ID for the channel you want to …\nUser ID of the host channel.\nThe broadcaster user ID for the channel you want hype …\nThe requested broadcaster ID.\nThe broadcaster user ID for the channel you want hype …\nThe requested broadcaster ID.\nThe broadcaster user ID for the channel you want hype …\nThe requested broadcaster ID.\nThe user ID of the broadcaster.\nThe ID of the broadcaster.\nThe user ID of the broadcaster.\nThe ID of the broadcaster.\nGet notifications when a moderator is added in this …\nThe requested broadcaster ID.\nGet notifications when a moderator is removed in this …\nThe requested broadcaster ID.\nThe broadcaster user ID of the channel for which “poll …\nThe requested broadcaster ID.\nThe broadcaster user ID of the channel for which “poll …\nThe requested broadcaster ID.\nThe broadcaster user ID of the channel for which “poll …\nThe requested broadcaster ID.\nThe broadcaster user ID of the channel for which …\nThe requested broadcaster ID.\nThe broadcaster user ID of the channel for which …\nThe requested broadcaster ID.\nThe broadcaster user ID of the channel for which …\nThe requested broadcaster ID.\nThe broadcaster user ID of the channel for which …\nThe requested broadcaster ID.\nThe User ID of the channel to receive shared chat session …\nThe User ID of the channel in the subscription condition …\nThe User ID of the channel to receive shared chat session …\nThe User ID of the channel in the subscription condition …\nThe User ID of the channel to receive shared chat session …\nThe User ID of the channel in the subscription condition.\nThe ID of the broadcaster that you want to receive …\nAn ID that identifies the broadcaster whose Shield Mode …\nThe ID of the broadcaster that you want to receive …\nAn ID that identifies the broadcaster whose Shield Mode …\nThe ID of the broadcaster that you want to receive …\nAn ID that identifies the broadcaster that sent the …\nThe ID of the broadcaster that you want to receive …\nAn ID that identifies the broadcaster that received the …\nThe broadcaster user ID for the channel you want to get …\nThe requested broadcaster ID.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID.\nUser ID of the channel to receive chat message events for.\nThe ID of the channel where the treatment for a suspicious …\nThe broadcaster you want to get suspicious user update …\nThe ID of the channel where the treatment for a suspicious …\nThe broadcaster user ID for the channel you want to get …\nThe requested broadcaster ID.\nThe ID of the broadcaster you want to get chat unban …\nThe broadcaster’s user ID for the channel the unban …\nThe ID of the broadcaster you want to get unban request …\nThe broadcaster’s user ID for the channel the unban …\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster’s user ID.\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster’s user ID.\nGet notifications when a VIP is added in this channel.\nThe requested broadcaster ID.\nGet notifications when a VIP is removed in this channel.\nThe requested broadcaster ID.\nThe User ID of the broadcaster.\nThe user ID of the broadcaster.\nThe User ID of the broadcaster.\nThe user ID of the broadcaster.\nThe broadcaster’s user login for the channel the ad was …\nThe requested broadcaster login.\nThe login of the channel where the reward was redeemed.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe broadcaster login.\nThe broadcaster login.\nThe broadcaster login.\nThe broadcaster login.\nThe broadcaster login.\nThe login of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe broadcaster’s user handle.\nThe broadcaster’s user handle.\nThe broadcaster’s user handle.\nThe non-host broadcaster display name.\nThe broadcaster display name.\nThe non-host broadcaster display name.\nThe broadcaster display name\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe login of the broadcaster.\nThe login of the broadcaster.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe user login of the channel in the subscription …\nThe user login of the channel in the subscription …\nThe user login of the channel in the subscription …\nThe broadcaster’s login name.\nThe broadcaster’s login name.\nThe broadcaster’s login name.\nThe broadcaster’s login name.\nThe requested broadcaster login.\nThe broadcaster login.\nThe broadcaster login.\nThe broadcaster login.\nThe display name of the channel where the treatment for a …\nThe display name of the channel where the treatment for a …\nThe requested broadcaster login.\nThe broadcaster’s login name.\nThe broadcaster’s login name.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe login of the broadcaster.\nThe login of the broadcaster.\nThe broadcaster’s user display name for the channel the …\nThe requested broadcaster display name.\nThe display name of the channel where the reward was …\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe broadcaster display name.\nThe broadcaster display name.\nThe broadcaster display name.\nThe broadcaster display name.\nThe broadcaster display name.\nThe user name of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe broadcaster’s display name.\nThe broadcaster’s display name.\nThe broadcaster’s display name.\nThe non-host broadcaster login.\nThe broadcaster login.\nThe non-host broadcaster login.\nThe broadcaster login.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe user name of the broadcaster.\nThe user name of the broadcaster.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe display name of the channel in the subscription …\nThe display name of the channel in the subscription …\nThe display name of the channel in the subscription …\nThe broadcaster’s display name.\nThe broadcaster’s display name.\nThe broadcaster’s display name.\nThe broadcaster’s display name.\nThe requested broadcaster display name.\nThe broadcaster display name.\nThe broadcaster display name.\nThe broadcaster display name.\nThe login of the channel where the treatment for a …\nThe Login of the channel where the treatment for a …\nThe requested broadcaster display name.\nThe broadcaster’s display name.\nThe broadcaster’s display name.\nThe broadcaster’s user display name.\nThe broadcaster’s user display name.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe user name of the broadcaster.\nThe user name of the broadcaster.\nAn ID that identifies the charity campaign.\nThe channel’s category ID.\nThe channel’s category ID.\nThe category name.\nThe category name.\nAn ID for the type of animation selected as part of an …\nA viewer has redeemed an automatic channel points reward …\nCustom channel points rewards on specific channel has been …\nThe ID of a channel points custom reward that was redeemed.\nA viewer has redeemed a custom channel points reward or a …\nThe Channel Points voting settings for the poll.\nThe Channel Points voting settings for the poll.\nThe Channel Points voting settings for the poll.\nPoll on a specific channel has been begun, ended or …\nA description of the charity.\nA description of the charity.\nA description of the charity.\nA description of the charity.\nA URL to an image of the charity’s logo. The image’s …\nA URL to an image of the charity’s logo. The image’s …\nA URL to an image of the charity’s logo. The image’s …\nA URL to an image of the charity’s logo. The image’s …\nThe charity’s name.\nThe charity’s name.\nThe charity’s name.\nThe charity’s name.\nA URL to the charity’s website.\nA URL to the charity’s website.\nA URL to the charity’s website.\nA URL to the charity’s website.\nChat events\nThe chat rules cited for the warning.\nA broadcaster’s chat settings are updated\nThe user ID of the user that sent the message.\nThe user ID of the user that sent the message.\nThe user login of the user that sent the message.\nThe user name of the user that sent the message.\nA user cheers on the specified channel.\nMetadata if this message is a cheer.\nAn array of choices for the poll.\nAn array of choices for the poll. Includes vote counts.\nAn array of choices for the poll. Includes vote counts.\nThe color of the user’s name in the chat room. This is a …\nArray of content classification label IDs currently …\nThe timestamp at which the hype train cooldown ends so …\nThe UTC timestamp (in RFC3339 format) of when the …\nTimestamp of the cooldown expiration. null if the reward …\nTimestamp of the cooldown expiration. null if the reward …\nTimestamp of the cooldown expiration. null if the reward …\nThe reward cost.\nThe reward cost.\nThe reward cost.\nThe UTC timestamp (in RFC3339 format) of when the unban …\nThe total number of months the user has been subscribed to …\nThe number of subscriptions gifted by this user in the …\nAn object that contains the current amount of donations …\nAn object that contains the current amount of donations …\nAn object that contains the current amount of donations …\nThe current value.\nThe current value.\nThe current value.\nSet of default images of 1x, 2x and 4x sizes for the …\nSet of default images of 1x, 2x and 4x sizes for the …\nSet of default images of 1x, 2x and 4x sizes for the …\nA description of the goal, if specified. The description …\nA description of the goal, if specified. The description …\nA description of the goal, if specified. The description …\nThe month duration of the subscription.\nLength in seconds of the mid-roll ad break requested\nA Boolean value that determines whether chat messages must …\nThe UTC timestamp in RFC 3339 format, which indicates when …\nRFC3339 timestamp indicating the time the session ended.\nThe timestamp at which the hype train ended.\nThe time the poll ended.\nThe time the Channel Points Prediction ended.\nThe UTC timestamp (in RFC3339 format) of when the …\nWill be null if permanent ban. If it is a timeout, this …\nThe time the poll will end.\nThe time the poll will end.\nThe time at which the hype train expires. The expiration …\nThe time at which the hype train expires. The expiration …\nA specified channel receives a follow.\nRFC3339 timestamp of when the follow occurred.\nRFC3339 timestamp of when the follow occurred.\nA Boolean value that determines whether the broadcaster …\nThe length of time, in minutes, that the followers must …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe broadcaster user ID that created the channel raid you …\nThe broadcaster ID that created the raid.\nAn ID that identifies the broadcaster that sent the …\nThe broadcaster login that created the raid.\nThe broadcaster’s login name.\nThe broadcaster display name that created the raid.\nThe broadcaster’s display name.\nWhether a cooldown is enabled and what the cooldown is in …\nWhether a cooldown is enabled and what the cooldown is in …\nWhether a cooldown is enabled and what the cooldown is in …\nA broadcaster has started, progressed or ended a goal.\nThe number of points required to reach the next level.\nThe number of points required to reach the next level.\nThis setting determines how the guests within a session …\nEvents regarding guests of guest star sessions\nEvents regarding guest star sessions\nEvents regarding settings of guest star sessions\nThe user ID of the guest who transitioned states in the …\nThe guest display name.\nThe guest login.\nFlag that signals whether the host is allowing the …\nThe User ID of the host channel.\nThe User ID of the host channel.\nThe User ID of the host channel.\nThe user login of the host channel.\nThe user login of the host channel.\nThe user login of the host channel.\nThe display name of the host channel.\nThe display name of the host channel.\nThe display name of the host channel.\nUser ID of the host channel.\nUser ID of the host channel.\nThe host display name.\nThe host display name.\nThe host login.\nThe host login.\nFlag that signals whether the host is allowing the …\nValue between 0-100 that represents the slot’s audio …\nA hype train has started, progressed or ended.\nThe ID of the Redemption.\nThe reward identifier.\nThe reward identifier.\nThe reward identifier.\nThe redemption identifier.\nThe redemption identifier.\nAn ID that identifies the donation. The ID is unique …\nAn ID that identifies the charity campaign.\nAn ID that identifies the charity campaign.\nAn ID that identifies the charity campaign.\nAn ID that uniquely identifies this goal.\nAn ID that uniquely identifies this goal.\nAn ID that uniquely identifies this goal.\nThe Hype Train ID.\nThe Hype Train ID.\nThe Hype Train ID.\nID of the poll.\nID of the poll.\nID of the poll.\nChannel Points Prediction ID.\nChannel Points Prediction ID.\nChannel Points Prediction ID.\nChannel Points Prediction ID.\nThe ID of the unban request.\nThe ID of the unban request.\nSet of custom images of 1x, 2x and 4x sizes for the …\nSet of custom images of 1x, 2x and 4x sizes for the …\nSet of custom images of 1x, 2x and 4x sizes for the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether the broadcaster achieved their goal.\nWhether the user cheered anonymously or not.\nWhether the subscription gift was anonymous.\nIndicates if the ad was automatically scheduled via Ads …\nFlag determining if browser sources subscribed to sessions …\nIs the reward currently enabled. If false, the reward …\nIs the reward currently enabled. If false, the reward …\nIs the reward currently enabled. If false, the reward …\nWhether the subscription is a gift.\nWhether the subscription was a gift.\nIs the reward currently in stock. If false, viewers …\nIs the reward currently in stock. If false, viewers …\nIs the reward currently in stock. If false, viewers …\nA boolean identifying whether the channel is flagged as …\nFlag determining if Guest Star moderators have access to …\nIs the reward currently paused. If true, viewers can’t …\nIs the reward currently paused. If true, viewers can’t …\nIs the reward currently paused. If true, viewers can’t …\nIndicates whether the ban is permanent (true) or a timeout …\nDoes the viewer need to enter information when redeeming …\nDoes the viewer need to enter information when redeeming …\nDoes the viewer need to enter information when redeeming …\nThe channel’s broadcast language.\nThe channel’s broadcast language.\nThe most recent contribution.\nThe most recent contribution.\nThe starting level of the Hype Train.\nCurrent level of hype train event.\nCurrent level of hype train event.\nThe time the Channel Points Prediction will automatically …\nThe time the Channel Points Prediction will automatically …\nThe time the Channel Points Prediction will automatically …\nThe status set for the suspicious user.\nThe status set for the suspicious user.\nWhether a maximum per stream is enabled and what the …\nWhether a maximum per stream is enabled and what the …\nWhether a maximum per stream is enabled and what the …\nWhether a maximum per user per stream is enabled and what …\nWhether a maximum per user per stream is enabled and what …\nWhether a maximum per user per stream is enabled and what …\nAn object that contains the user message and emote …\nThe structured chat message.\nThe structured chat message\nThe body of the message.\nThe body of the message.\nThe message sent with the cheer.\nAn object that contains the resubscription message and …\nThe structured chat message.\nA UUID that identifies the message.\nA UUID that identifies the message that was removed.\nA UUID that identifies the message.\nThe ID of the message that was flagged by automod.\nThe ID of the message that was flagged by automod.\nThe type of message.\na moderator performs a moderation action in a channel.\nA user’s moderator privileges on a specified channel are …\nThe user ID of the issuer of the ban.\nThe ID of the moderator of the channel you want to get …\nThe user ID of the moderator or broadcaster of the …\nThe user ID of the moderator who updated the guest’s …\nThe user ID of the moderator or broadcaster of the …\nThe user ID of the moderator or broadcaster of the …\nThe user ID of the moderator or broadcaster of the …\nThe user ID of the moderator.\nThe broadcaster user ID.\nThe user ID of the moderator.\nThe broadcaster user ID.\nThe ID of the broadcaster or one of the broadcaster’s …\nAn ID that identifies the moderator that updated the …\nThe ID of the broadcaster or one of the broadcaster’s …\nAn ID that identifies the moderator that updated the …\nThe ID of the broadcaster that gave the Shoutout or one of …\nAn ID that identifies the moderator that sent the …\nThe ID of the broadcaster that received the Shoutout or …\nThe ID of a user that has permission to moderate the …\nThe ID of a user that has permission to moderate the …\nThe ID of the moderator that updated the treatment for a …\nThe user ID of the issuer of the unban.\nThe ID of the user that has permission to moderate the …\nThe ID of the user that has permission to moderate the …\nUser ID of moderator who approved/denied the request.\nThe User ID of the moderator.\nThe User ID of the moderator.\nThe user ID of the moderator who sent the warning.\nThe user login of the issuer of the ban.\nThe moderator display name.\nThe broadcaster login.\nThe broadcaster login.\nThe moderator’s login name.\nThe moderator’s login name.\nThe moderator’s login name.\nThe display name of the moderator that updated the …\nThe user login of the issuer of the unban.\nThe moderator’s login name\nThe login of the moderator.\nThe user name of the issuer of the ban.\nThe moderator login.\nThe broadcaster display name.\nThe broadcaster display name.\nThe moderator’s display name.\nThe moderator’s display name.\nThe moderator’s display name.\nThe login of the moderator that updated the treatment for …\nThe user name of the issuer of the unban.\nThe moderator’s display name\nThe user name of the moderator.\nThe notification\nAn array of outcomes for the Channel Points Prediction.\nAn array of outcomes for the Channel Points Prediction. …\nAn array of outcomes for the Channel Points Prediction. …\nAn array of outcomes for the Channel Points Prediction. …\nThe list of participants in the session.\nThe list of participants in the session.\nPoll on a specific channel has been begun, ended or …\nPrediction on the specified channel begins, progresses, …\nThe number of points contributed to the hype train at the …\nThe number of points contributed to the hype train at the …\nThe reward description.\nThe reward description.\nThe reward description.\nA a broadcaster raids another broadcaster’s channel.\nThe reason behind the ban.\nThe reason given for the warning.\nThe UTC date and time (in RFC3339 format) of when the …\nRFC3339 timestamp of when the reward was redeemed.\nRFC3339 timestamp of when the reward was redeemed.\nThe number of redemptions redeemed during the current live …\nThe number of redemptions redeemed during the current live …\nThe number of redemptions redeemed during the current live …\nMetadata if this message is a reply.\nThe ID of the user that requested the ad. For automatic …\nThe login of the user that requested the ad.\nThe display name of the user that requested the ad.\nResolution text supplied by the mod/broadcaster upon …\nAn object that contains the reward information.\nBasic information about the reward that was redeemed, at …\nBasic information about the reward that was redeemed, at …\nOptional. Specify a reward id to only receive …\nOptional. Specify a reward id to only receive …\nOptional. Specify a reward id to only receive …\nOptional. Specify a reward id to only receive …\nID representing the unique session that was started.\nID representing the unique session that was started.\nID representing the unique session that was started.\nThe unique identifier for the shared chat session.\nThe unique identifier for the shared chat session.\nThe unique identifier for the shared chat session.\nA list of channel IDs where the suspicious user is also …\nEvents related to shared chat\nShield mode on the specified channel begins or ends.\nShould redemptions be set to fulfilled status immediately …\nShould redemptions be set to fulfilled status immediately …\nShould redemptions be set to fulfilled status immediately …\nSubscription for when a Shoutout has happened\nNumber of slots the Guest Star call interface will allow …\nThe ID of the slot assignment the guest is assigned to.\nA Boolean value that determines whether the broadcaster …\nThe amount of time, in seconds, that users need to wait …\nOnly present when in a shared chat session. The list of …\nOnly present when in a shared chat session. The list of …\nOnly present when in a shared chat session. The …\nOnly present when in a shared chat session. The …\nThe channel in which the action originally occurred. Is …\nThe channel in which the action originally occurred. Is …\nOnly present when in a shared chat session. The login of …\nOnly present when in a shared chat session. The login of …\nThe channel in which the action originally occurred. Is …\nThe channel in which the action originally occurred. Is …\nOnly present when in a shared chat session. The user name …\nOnly present when in a shared chat session. The user name …\nThe channel in which the action originally occurred.\nThe channel in which the action originally occurred.\nOnly present when in a shared chat session. The UUID that …\nOnly present when in a shared chat session. The UUID that …\nThe UTC timestamp of when the ad break began, in RFC3339 …\nThe UTC timestamp (in RFC3339 format) of when the …\nThe UTC timestamp in RFC 3339 format, which indicates when …\nThe UTC timestamp in RFC 3339 format, which indicates when …\nThe UTC timestamp in RFC 3339 format, which indicates when …\nRFC3339 timestamp indicating the time the session began.\nRFC3339 timestamp indicating the time the session began.\nThe timestamp at which the hype train started.\nThe timestamp at which the hype train started.\nThe timestamp at which the hype train started.\nThe time the poll started.\nThe time the poll started.\nThe time the poll started.\nThe time the Channel Points Prediction started.\nThe time the Channel Points Prediction started.\nThe time the Channel Points Prediction started.\nThe time the Channel Points Prediction started.\nThe UTC timestamp (in RFC3339 format) of when the …\nThe UTC timestamp (in RFC3339 format) of when the …\nThe UTC timestamp (in RFC3339 format) of when the …\nThe current state of the user after the update has taken …\nDefaults to unfulfilled. Possible values are unknown, …\nWill be fulfilled or canceled. Possible values are …\nThe message’s status\nThe status of the poll.\nThe status of the Channel Points Prediction. Valid values …\nDictates whether the unban request was approved or denied.\nThe UTC timestamp (in RFC3339 format) of when the …\nThe number of consecutive months the user’s current …\nA specified channel receives a subscriber. This does not …\nA Boolean value that determines whether only users that …\nSubscription on a specified channel has changed\nA user’s moderator privileges on a specified channel are …\nThe message Twitch shows in the chat room for this notice.\nAn object that contains the campaign’s target …\nAn object that contains the campaign’s target …\nAn object that contains the campaign’s target …\nThe goal’s target value. For example, if the broadcaster …\nThe goal’s target value.\nThe goal’s target value. For example, if the broadcaster …\nThe UTC timestamp (in RFC3339 format) of when the …\nThe ID of the user that was banned or put in a timeout.\nThe ID of the user whose message was deleted.\nThe user login of the user that was banned or put in a …\nThe user login of the user whose message was deleted.\nThe user name of the user that was banned or put in a …\nThe user name of the user whose message was deleted.\nMessage sent in the unban request.\nThe tier of the subscription. Valid values are 1000, 2000, …\nThe tier of the subscription that ended. Valid values are …\nThe tier of subscriptions in the subscription gift.\nThe tier of the user’s subscription.\nThe reward title.\nThe reward title.\nThe reward title.\nQuestion displayed for the poll.\nQuestion displayed for the poll.\nQuestion displayed for the poll.\nTitle for the Channel Points Prediction.\nTitle for the Channel Points Prediction.\nTitle for the Channel Points Prediction.\nTitle for the Channel Points Prediction.\nThe channel’s stream title.\nThe channel’s stream title.\nThe broadcaster user ID that received the channel raid you …\nThe broadcaster ID that received the raid.\nAn ID that identifies the broadcaster that received the …\nThe broadcaster login that received the raid.\nThe broadcaster’s login name.\nThe broadcaster display name that received the raid.\nThe broadcaster’s display name.\nThe contributors with the most points contributed.\nThe contributors with the most points contributed.\nThe contributors with the most points contributed.\nTotal points contributed to the hype train.\nTotal points contributed to the hype train.\nTotal points contributed to the hype train.\nThe number of subscriptions in the subscription gift.\nThe type of goal.\nThe type of goal.\nThe type of goal.\nUser types (if any) that apply to the suspicious user.\nA viewer is unbanned from the specified channel.\nAn unban request in a specified channel is changed.\nA Boolean value that determines whether the broadcaster …\nChannel has updated the category, title, mature flag, or …\nThe user ID for the user who was banned on the specified …\nThe ID of the redeeming user.\nUser ID of the user that redeemed the reward.\nUser ID of the user that redeemed the reward.\nAn ID that identifies the user that donated to the …\nThe user ID to read chat as.\nThe user ID to read chat as.\nThe user ID to read chat as.\nThe user ID to read chat as.\nThe user ID to read chat as.\nThe user ID to read chat as.\nThe User ID of the message sender.\nThe user ID to read chat as.\nThe User ID of the message sender.\nThe user ID to read chat as.\nThe user ID for the user who cheered on the specified …\nThe user ID for the user now following the specified …\nThe user ID for the user now following the specified …\nThe user ID of the new moderator.\nThe user ID of the removed moderator.\nThe user ID for the user who subscribed to the specified …\nThe user ID for the user whose subscription ended.\nThe user ID of the user who sent the subscription gift. …\nThe user ID of the user who sent a resubscription chat …\nThe user ID of the user that sent the message.\nThe ID of the suspicious user whose treatment was updated.\nThe user id for the user who was unbanned on the specified …\nUser ID of user that is requesting to be unbanned.\nUser ID of user that requested to be unbanned.\nThe user ID of the new vip.\nThe user ID of the removed vip.\nThe ID of the user that has acknowledged their warning.\nThe ID of the user being warned.\nA string that the user entered if the reward requires …\nThe user input provided. Empty string if not provided.\nThe user input provided. Empty string if not provided.\nThe user login for the user who was banned on the …\nThe login of the redeeming user.\nLogin of the user that redeemed the reward.\nLogin of the user that redeemed the reward.\nThe user’s login name.\nThe message sender’s login.\nThe message sender’s login.\nThe user login for the user who cheered on the specified …\nThe user login for the user now following the specified …\nThe user login for the user now following the specified …\nThe user login of the new moderator.\nThe user login of the removed moderator.\nThe user login for the user who subscribed to the …\nThe user login for the user whose subscription ended.\nThe user login of the user who sent the gift. Set to null …\nThe user login of the user who sent a resubscription chat …\nThe user name of the user that sent the message.\nThe display name of the suspicious user whose treatment …\nThe user login for the user who was unbanned on the …\nThe user’s login name.\nThe user’s login name.\nThe user login of the new vip.\nThe user login of the removed vip.\nThe login of the user that has acknowledged their warning.\nThe login of the user being warned.\nThe requested broadcaster display name.\nThe display name of the redeeming user.\nDisplay name of the user that redeemed the reward.\nDisplay name of the user that redeemed the reward.\nThe user’s display name.\nThe message sender’s display name.\nThe message sender’s display name.\nThe user display name for the user who cheered on the …\nThe user display name for the user now following the …\nThe user display name for the user now following the …\nThe display name of the new moderator.\nThe display name of the removed moderator.\nThe user display name for the user who subscribed to the …\nThe user display name for the user whose subscription …\nThe user display name of the user who sent the gift. Set …\nThe user display name of the user who a resubscription …\nThe user login of the user that sent the message.\nThe login of the suspicious user whose treatment was …\nThe user display name for the user who was unbanned on the …\nThe user’s display name.\nThe user’s display name.\nThe display name of the new vip.\nThe display name of the removed vip.\nThe user name of the user that has acknowledged their …\nThe user name of the user being.\nThe number of users that were watching the broadcaster’s …\nThe number of users that were watching the …\nThe number of viewers in the raid.\nA user’s VIP status on a specified channel is changed.\nNotifications for warnings in a channel.\nID of the winning outcome.\n<code>channel.ad_break.begin</code>: a user runs a midroll commercial …\n<code>channel.ad_break.begin</code> response payload.\na user runs a midroll commercial break, either manually or …\nThe ID of the broadcaster that you want to get Channel Ad …\nThe broadcaster’s user ID for the channel the ad was run …\nThe broadcaster’s user login for the channel the ad was …\nThe broadcaster’s user display name for the channel the …\nLength in seconds of the mid-roll ad break requested\nIndicates if the ad was automatically scheduled via Ads …\nThe ID of the user that requested the ad. For automatic …\nThe login of the user that requested the ad.\nThe display name of the user that requested the ad.\nThe UTC timestamp of when the ad break began, in RFC3339 …\n<code>channel.ad_break.begin</code>: a user runs a midroll commercial …\n<code>channel.ad_break.begin</code> response payload.\nThe ID of the broadcaster that you want to get Channel Ad …\nThe ID of the broadcaster that you want to get Channel Ad …\nThe broadcaster’s user ID for the channel the ad was run …\nThe broadcaster’s user login for the channel the ad was …\nThe broadcaster’s user display name for the channel the …\nCreate a builder for building <code>ChannelAdBreakBeginV1</code>. On …\nLength in seconds of the mid-roll ad break requested\nIndicates if the ad was automatically scheduled via Ads …\nThe ID of the user that requested the ad. For automatic …\nThe login of the user that requested the ad.\nThe display name of the user that requested the ad.\nThe UTC timestamp of when the ad break began, in RFC3339 …\n<code>channel.ban</code>: a viewer is banned from the specified channel.\n<code>channel.ban</code> response payload.\nThe UTC date and time (in RFC3339 format) of when the user …\nThe broadcaster user ID for the channel you want to get …\nThe broadcaster user ID for the channel you want to get …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building <code>ChannelBanV1</code>. On the …\nWill be null if permanent ban. If it is a timeout, this …\nIndicates whether the ban is permanent (true) or a timeout …\nThe user ID of the issuer of the ban.\nThe user login of the issuer of the ban.\nThe user name of the issuer of the ban.\nThe reason behind the ban.\nThe user ID for the user who was banned on the specified …\nThe user login for the user who was banned on the …\nThe requested broadcaster display name.\nBasic information about the automatic reward that was …\nThe type of reward\nOn-screen celebration\n<code>channel.channel_points_automatic_reward_redemption.add</code>:a …\n<code>channel.channel_points_automatic_reward_redemption.add</code> …\nUnlock a specific sub emote with a modifier\nUnlock a specific sub emote\nSend a giant emote in chat\nAdd a special effect to the message\nUnlock a random sub emote\nThe user message and emote information from a reward …\nSend a message with a highlight\nSend a message in sub mode as a non-sub\nAn unknown type was redeemed\nAn emote that was unlocked as part of a reward\nA viewer has redeemed an automatic channel points reward …\nThe broadcaster user ID for the channel you want to …\nThe ID of the channel where the reward was redeemed.\nThe login of the channel where the reward was redeemed.\nThe display name of the channel where the reward was …\nThe reward cost.\nAn array that includes the emote ID and start and end …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ID of the Redemption.\nThe emote ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn object that contains the user message and emote …\nThe human readable emote token.\nThe UTC date and time (in RFC3339 format) of when the …\nAn object that contains the reward information.\nThe text of the chat message.\nThe type of reward.\nEmote that was unlocked.\nThe ID of the redeeming user.\nA string that the user entered if the reward requires …\nThe login of the redeeming user.\nThe display name of the redeeming user.\n<code>channel.channel_points_automatic_reward_redemption.add</code>:a …\n<code>channel.channel_points_automatic_reward_redemption.add</code> …\nThe broadcaster user ID for the channel you want to …\nThe broadcaster user ID for the channel you want to …\nThe ID of the channel where the reward was redeemed.\nThe login of the channel where the reward was redeemed.\nThe display name of the channel where the reward was …\nCreate a builder for building …\nThe ID of the Redemption.\nAn object that contains the user message and emote …\nThe UTC date and time (in RFC3339 format) of when the …\nAn object that contains the reward information.\nThe ID of the redeeming user.\nA string that the user entered if the reward requires …\nThe login of the redeeming user.\nThe display name of the redeeming user.\n<code>channel.channel_points_custom_reward.add</code>: a custom channel …\n<code>channel.channel_points_custom_reward.add</code> response payload.\n<code>channel.channel_points_custom_reward.remove</code>: a custom …\n<code>channel.channel_points_custom_reward.remove</code> response …\n<code>channel.channel_points_custom_reward.update</code>: a custom …\n<code>channel.channel_points_custom_reward.update</code> response …\nA custom channel points reward has been created for the …\nCustom background color for the reward. Format: Hex with # …\nCustom background color for the reward. Format: Hex with # …\nCustom background color for the reward. Format: Hex with # …\nThe broadcaster user ID for the channel you want to …\nThe requested broadcaster ID.\nThe broadcaster user ID for the channel you want to …\nThe requested broadcaster ID.\nThe broadcaster user ID for the channel you want to …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nTimestamp of the cooldown expiration. null if the reward …\nTimestamp of the cooldown expiration. null if the reward …\nTimestamp of the cooldown expiration. null if the reward …\nThe reward cost.\nThe reward cost.\nThe reward cost.\nSet of default images of 1x, 2x and 4x sizes for the …\nSet of default images of 1x, 2x and 4x sizes for the …\nSet of default images of 1x, 2x and 4x sizes for the …\nWhether a cooldown is enabled and what the cooldown is in …\nWhether a cooldown is enabled and what the cooldown is in …\nWhether a cooldown is enabled and what the cooldown is in …\nThe reward identifier.\nThe reward identifier.\nThe reward identifier.\nSet of custom images of 1x, 2x and 4x sizes for the …\nSet of custom images of 1x, 2x and 4x sizes for the …\nSet of custom images of 1x, 2x and 4x sizes for the …\nIs the reward currently enabled. If false, the reward …\nIs the reward currently enabled. If false, the reward …\nIs the reward currently enabled. If false, the reward …\nIs the reward currently in stock. If false, viewers …\nIs the reward currently in stock. If false, viewers …\nIs the reward currently in stock. If false, viewers …\nIs the reward currently paused. If true, viewers can’t …\nIs the reward currently paused. If true, viewers can’t …\nIs the reward currently paused. If true, viewers can’t …\nDoes the viewer need to enter information when redeeming …\nDoes the viewer need to enter information when redeeming …\nDoes the viewer need to enter information when redeeming …\nWhether a maximum per stream is enabled and what the …\nWhether a maximum per stream is enabled and what the …\nWhether a maximum per stream is enabled and what the …\nWhether a maximum per user per stream is enabled and what …\nWhether a maximum per user per stream is enabled and what …\nWhether a maximum per user per stream is enabled and what …\nThe reward description.\nThe reward description.\nThe reward description.\nThe number of redemptions redeemed during the current live …\nThe number of redemptions redeemed during the current live …\nThe number of redemptions redeemed during the current live …\nA custom channel points reward has been removed from the …\nOptional. Specify a reward id to only receive …\nOptional. Specify a reward id to only receive …\nShould redemptions be set to fulfilled status immediately …\nShould redemptions be set to fulfilled status immediately …\nShould redemptions be set to fulfilled status immediately …\nThe reward title.\nThe reward title.\nThe reward title.\nA custom channel points reward has been updated for the …\n<code>channel.channel_points_custom_reward.add</code>: a custom channel …\n<code>channel.channel_points_custom_reward.add</code> response payload.\nCustom background color for the reward. Format: Hex with # …\nThe broadcaster user ID for the channel you want to …\nThe broadcaster user ID for the channel you want to …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building …\nTimestamp of the cooldown expiration. null if the reward …\nThe reward cost.\nSet of default images of 1x, 2x and 4x sizes for the …\nWhether a cooldown is enabled and what the cooldown is in …\nThe reward identifier.\nSet of custom images of 1x, 2x and 4x sizes for the …\nIs the reward currently enabled. If false, the reward …\nIs the reward currently in stock. If false, viewers …\nIs the reward currently paused. If true, viewers can’t …\nDoes the viewer need to enter information when redeeming …\nWhether a maximum per stream is enabled and what the …\nWhether a maximum per user per stream is enabled and what …\nThe reward description.\nThe number of redemptions redeemed during the current live …\nShould redemptions be set to fulfilled status immediately …\nThe reward title.\n<code>channel.channel_points_custom_reward.remove</code>: a custom …\n<code>channel.channel_points_custom_reward.remove</code> response …\nCustom background color for the reward. Format: Hex with # …\nThe broadcaster user ID for the channel you want to …\nThe broadcaster user ID for the channel you want to …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building …\nTimestamp of the cooldown expiration. null if the reward …\nThe reward cost.\nSet of default images of 1x, 2x and 4x sizes for the …\nWhether a cooldown is enabled and what the cooldown is in …\nThe reward identifier.\nSet of custom images of 1x, 2x and 4x sizes for the …\nIs the reward currently enabled. If false, the reward …\nIs the reward currently in stock. If false, viewers …\nIs the reward currently paused. If true, viewers can’t …\nDoes the viewer need to enter information when redeeming …\nWhether a maximum per stream is enabled and what the …\nWhether a maximum per user per stream is enabled and what …\nThe reward description.\nThe number of redemptions redeemed during the current live …\nSpecify a reward id to only receive notifications for a …\nOptional. Specify a reward id to only receive …\nShould redemptions be set to fulfilled status immediately …\nThe reward title.\n<code>channel.channel_points_custom_reward.update</code>: a custom …\n<code>channel.channel_points_custom_reward.update</code> response …\nCustom background color for the reward. Format: Hex with # …\nThe broadcaster user ID for the channel you want to …\nThe broadcaster user ID for the channel you want to …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building …\nTimestamp of the cooldown expiration. null if the reward …\nThe reward cost.\nSet of default images of 1x, 2x and 4x sizes for the …\nWhether a cooldown is enabled and what the cooldown is in …\nThe reward identifier.\nSet of custom images of 1x, 2x and 4x sizes for the …\nIs the reward currently enabled. If false, the reward …\nIs the reward currently in stock. If false, viewers …\nIs the reward currently paused. If true, viewers can’t …\nDoes the viewer need to enter information when redeeming …\nWhether a maximum per stream is enabled and what the …\nWhether a maximum per user per stream is enabled and what …\nThe reward description.\nThe number of redemptions redeemed during the current live …\nSpecify a reward id to only receive notifications for a …\nOptional. Specify a reward id to only receive …\nShould redemptions be set to fulfilled status immediately …\nThe reward title.\nCancelled reward - the reward has been cancelled before …\n<code>channel.channel_points_custom_reward_redemption.add</code>: a …\n<code>channel.channel_points_custom_reward_redemption.add</code> …\n<code>channel.channel_points_custom_reward_redemption.update</code>: a …\n<code>channel.channel_points_custom_reward_redemption.update</code> …\nFulfilled reward - the user has claimed it and the reward …\nCustom reward redemption statuses: UNFULFILLED, FULFILLED …\nBasic information about the reward that was redeemed, at …\nUnfulfilled reward - the user has claimed it but it is …\nUnknown reward status\nA viewer has redeemed a custom channel points reward on …\nThe broadcaster user ID for the channel you want to …\nThe requested broadcaster ID.\nThe broadcaster user ID for the channel you want to …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nThe requested broadcaster display name.\nThe reward cost.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe redemption identifier.\nThe redemption identifier.\nThe reward identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe reward description.\nRFC3339 timestamp of when the reward was redeemed.\nRFC3339 timestamp of when the reward was redeemed.\nBasic information about the reward that was redeemed, at …\nBasic information about the reward that was redeemed, at …\nOptional. Specify a reward id to only receive …\nOptional. Specify a reward id to only receive …\nDefaults to unfulfilled. Possible values are unknown, …\nWill be fulfilled or canceled. Possible values are …\nThe reward name.\nA redemption of a channel points custom reward has been …\nUser ID of the user that redeemed the reward.\nUser ID of the user that redeemed the reward.\nThe user input provided. Empty string if not provided.\nThe user input provided. Empty string if not provided.\nLogin of the user that redeemed the reward.\nLogin of the user that redeemed the reward.\nDisplay name of the user that redeemed the reward.\nDisplay name of the user that redeemed the reward.\n<code>channel.channel_points_custom_reward_redemption.add</code>: a …\n<code>channel.channel_points_custom_reward_redemption.add</code> …\nThe broadcaster user ID for the channel you want to …\nThe broadcaster user ID for the channel you want to …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building …\nThe redemption identifier.\nRFC3339 timestamp of when the reward was redeemed.\nBasic information about the reward that was redeemed, at …\nSpecify a reward id to only receive notifications for a …\nOptional. Specify a reward id to only receive …\nDefaults to unfulfilled. Possible values are unknown, …\nUser ID of the user that redeemed the reward.\nThe user input provided. Empty string if not provided.\nLogin of the user that redeemed the reward.\nDisplay name of the user that redeemed the reward.\n<code>channel.channel_points_custom_reward_redemption.update</code>: a …\n<code>channel.channel_points_custom_reward_redemption.update</code> …\nThe broadcaster user ID for the channel you want to …\nThe broadcaster user ID for the channel you want to …\nThe requested broadcaster ID.\nThe requested broadcaster login.\nThe requested broadcaster display name.\nCreate a builder for building …\nThe redemption identifier.\nRFC3339 timestamp of when the reward was redeemed.\nBasic information about the reward that was redeemed, at …\nSpecify a reward id to only receive notifications for a …\nOptional. Specify a reward id to only receive …\nWill be fulfilled or canceled. Possible values are …\nUser ID of the user that redeemed the reward.\nThe user input provided. Empty string if not provided.\nLogin of the user that redeemed the reward.\nDisplay name of the user that redeemed the reward.\n<code>channel.charity_campaign.donate</code>: a user donates to the …\n<code>channel.charity_campaign.donate</code> response payload.\n<code>channel.charity_campaign.progress</code>: progress is made …\n<code>channel.charity_campaign.progress</code> response payload.\n<code>channel.charity_campaign.start</code>: a broadcaster starts a …\n<code>channel.charity_campaign.start</code> response payload.\n<code>channel.charity_campaign.stop</code>: a broadcaster stops a …\n<code>channel.charity_campaign.stop</code> response payload.\nAn object that contains the amount of money that the user …\nAn ID that identifies the broadcaster that’s running the …\nAn ID that identifies the broadcaster that’s running the …\nAn ID that identifies the broadcaster that’s running the …\nAn ID that identifies the broadcaster that ran the …\nAn ID that identifies the charity campaign.\nAn ID that identifies the charity campaign.\nThe broadcaster’s login name.\nThe broadcaster’s login name.\nAn ID that identifies the broadcaster that’s running the …\nAn ID that identifies the broadcaster that’s running the …\nThe broadcaster’s display name.\nThe broadcaster’s display name.\nThe ID of the broadcaster that you want to receive …\nThe ID of the broadcaster that you want to receive …\nThe ID of the broadcaster that you want to receive …\nThe ID of the broadcaster that you want to receive …\nAn ID that identifies the charity campaign.\nA description of the charity.\nA description of the charity.\nA description of the charity.\nA description of the charity.\nA URL to an image of the charity’s logo. The image’s …\nA URL to an image of the charity’s logo. The image’s …\nA URL to an image of the charity’s logo. The image’s …\nA URL to an image of the charity’s logo. The image’s …\nThe charity’s name.\nThe charity’s name.\nThe charity’s name.\nThe charity’s name.\nA URL to the charity’s website.\nA URL to the charity’s website.\nA URL to the charity’s website.\nA URL to the charity’s website.\nAn object that contains the current amount of donations …\nAn object that contains the current amount of donations …\nAn object that contains the current amount of donations …\nSends an event notification when a user donates to the …\nAn ID that identifies the donation. The ID is unique …\nAn ID that identifies the charity campaign.\nAn ID that identifies the charity campaign.\nAn ID that identifies the charity campaign.\nSends an event notification when progress is made towards …\nSends an event notification when a broadcaster starts a …\nThe UTC timestamp (in RFC3339 format) of when the …\nSends an event notification when a broadcaster stops a …\nThe UTC timestamp (in RFC3339 format) of when the …\nAn object that contains the campaign’s target …\nAn object that contains the campaign’s target …\nAn object that contains the campaign’s target …\nAn ID that identifies the user that donated to the …\nThe user’s login name.\nThe user’s display name.\n<code>channel.charity_campaign.donate</code>: a user donates to the …\n<code>channel.charity_campaign.donate</code> response payload.\nAn object that contains the amount of money that the user …\nAn ID that identifies the broadcaster that’s running the …\nAn ID that identifies the charity campaign.\nAn ID that identifies the broadcaster that’s running the …\nThe ID of the broadcaster to get notified about.\nThe ID of the broadcaster that you want to receive …\nCreate a builder for building …\nAn ID that identifies the charity campaign.\nA description of the charity.\nA URL to an image of the charity’s logo. The image’s …\nThe charity’s name.\nA URL to the charity’s website.\nAn ID that identifies the donation. The ID is unique …\nAn ID that identifies the user that donated to the …\nThe user’s login name.\nThe user’s display name.\n<code>channel.charity_campaign.progress</code>: progress is made …\n<code>channel.charity_campaign.progress</code> response payload.\nAn ID that identifies the broadcaster that’s running the …\nAn ID that identifies the charity campaign.\nAn ID that identifies the broadcaster that’s running the …\nThe ID of the broadcaster to get notified about.\nThe ID of the broadcaster that you want to receive …\nCreate a builder for building …\nA description of the charity.\nA URL to an image of the charity’s logo. The image’s …\nThe charity’s name.\nA URL to the charity’s website.\nAn object that contains the current amount of donations …\nAn ID that identifies the charity campaign.\nAn object that contains the campaign’s target …\n<code>channel.charity_campaign.start</code>: a broadcaster starts a …\n<code>channel.charity_campaign.start</code> response payload.\nAn ID that identifies the broadcaster that’s running the …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nThe ID of the broadcaster to get notified about.\nThe ID of the broadcaster that you want to receive …\nCreate a builder for building <code>ChannelCharityCampaignStartV1</code>…\nA description of the charity.\nA URL to an image of the charity’s logo. The image’s …\nThe charity’s name.\nA URL to the charity’s website.\nAn object that contains the current amount of donations …\nAn ID that identifies the charity campaign.\nThe UTC timestamp (in RFC3339 format) of when the …\nAn object that contains the campaign’s target …\n<code>channel.charity_campaign.stop</code>: a broadcaster stops a …\n<code>channel.charity_campaign.stop</code> response payload.\nAn ID that identifies the broadcaster that ran the …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nThe ID of the broadcaster to get notified about.\nThe ID of the broadcaster that you want to receive …\nCreate a builder for building <code>ChannelCharityCampaignStopV1</code>.\nA description of the charity.\nA URL to an image of the charity’s logo. The image’s …\nThe charity’s name.\nA URL to the charity’s website.\nAn object that contains the current amount of donations …\nAn ID that identifies the charity campaign.\nThe UTC timestamp (in RFC3339 format) of when the …\nAn object that contains the campaign’s target …\nA badge\n<code>channel.chat.clear_user_messages</code>: a moderator or bot …\n<code>channel.chat.clear_user_messages</code> response payload.\n<code>channel.chat.clear</code>: a moderator or bot clears all messages …\n<code>channel.chat.clear</code> response payload.\n<code>channel.chat.message_delete</code>: a moderator removes a …\n<code>channel.chat.message_delete</code> response payload.\n<code>channel.chat.message</code>: a user sends a message to a specific …\n<code>channel.chat.message</code> response payload.\n<code>channel.chat.notification</code>: an event that appears in chat …\n<code>channel.chat.notification</code> response payload.\n<code>channel.chat.user_message_hold</code>: a user’s message is …\n<code>channel.chat.user_message_hold</code> response payload.\n<code>channel.chat.user_message_update</code>: a user’s message’s …\n<code>channel.chat.user_message_update</code> response payload.\nA cheermote fragment\nA Cheermote.\nAn emote fragment\nA Emote.\nA chat message fragment\nA user mention fragment\nA Mention.\nA message\nA text fragment, see <code>Fragment::text</code>.\nList of chat badges.\nList of chat badges.\nThe amount of bits cheered.\nUser ID of the channel to receive chat clear user messages …\nThe broadcaster user ID.\nUser ID of the channel to receive chat clear user messages …\nThe broadcaster user ID.\nUser ID of the channel to receive chat message events for.\nThe broadcaster user ID.\nUser ID of the channel to receive chat message delete …\nThe broadcaster user ID.\nUser ID of the channel to receive chat notification events …\nThe broadcaster user ID.\nUser ID of the channel to receive chat message events for.\nThe ID of the broadcaster specified in the request.\nUser ID of the channel to receive chat message events for.\nThe ID of the broadcaster specified in the request.\nThe broadcaster login.\nThe broadcaster login.\nThe broadcaster login.\nThe broadcaster login.\nThe broadcaster login.\nThe login of the broadcaster specified in the request.\nThe login of the broadcaster specified in the request.\nThe broadcaster display name.\nThe broadcaster display name.\nThe broadcaster display name.\nThe broadcaster display name.\nThe broadcaster display name.\nThe user name of the broadcaster specified in the request.\nThe user name of the broadcaster specified in the request.\nAn ID for the type of animation selected as part of an …\nThe ID of a channel points custom reward that was redeemed.\nThe user ID of the user that sent the message.\nThe user ID of the user that sent the message.\nThe user login of the user that sent the message.\nThe user name of the user that sent the message.\nMetadata if this message is a cheer.\nA moderator or bot clears all messages from the chat room.\nA moderator or bot clears all messages for a specific user.\nThe color of the user’s name in the chat room. This is a …\nAn ID that identifies the emote set that the emote belongs …\nThe formats that the emote is available in. For example, …\nOrdered list of chat message fragments.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn ID that uniquely identifies this emote.\nAn ID that identifies this version of the badge. The ID …\nContains metadata related to the chat badges in the badges …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAny user sends a message to a specific chat room.\nThe structured chat message.\nThe structured chat message\nThe body of the message.\nThe body of the message.\nA moderator removes a specific message.\nA UUID that identifies the message.\nA UUID that identifies the message that was removed.\nA UUID that identifies the message.\nThe ID of the message that was flagged by automod.\nThe ID of the message that was flagged by automod.\nThe type of message.\nAn event that appears in chat occurs, such as someone …\nThe notification\nThe ID of the broadcaster who owns the emote.\nThe name portion of the Cheermote string that you use in …\nMetadata if this message is a reply.\nAn ID that identifies this set of chat badges. For …\nOnly present when in a shared chat session. The list of …\nOnly present when in a shared chat session. The list of …\nOnly present when in a shared chat session. The …\nOnly present when in a shared chat session. The …\nOnly present when in a shared chat session. The login of …\nOnly present when in a shared chat session. The login of …\nOnly present when in a shared chat session. The user name …\nOnly present when in a shared chat session. The user name …\nOnly present when in a shared chat session. The UUID that …\nOnly present when in a shared chat session. The UUID that …\nThe message’s status\nThe message Twitch shows in the chat room for this notice.\nThe ID of the user that was banned or put in a timeout.\nThe ID of the user whose message was deleted.\nThe user login of the user that was banned or put in a …\nThe user login of the user whose message was deleted.\nThe user name of the user that was banned or put in a …\nThe user name of the user whose message was deleted.\nGet the text data\nThe chat message in plain text.\nThe tier level of the cheermote.\nThe user ID to read chat as.\nThe user ID to read chat as.\nThe user ID to read chat as.\nThe user ID to read chat as.\nThe user ID to read chat as.\nThe user ID to read chat as.\nThe User ID of the message sender.\nThe user ID to read chat as.\nThe User ID of the message sender.\nThe user ID of the mentioned user.\nThe message sender’s login.\nThe message sender’s login.\nThe user login of the mentioned user.\nA user’s message is caught by automod.\nA user’s message’s automod status is updated\nThe message sender’s display name.\nThe message sender’s display name.\nThe user name of the mentioned user.\nA Cheermote.\nA Emote.\nA Mention.\nMessage text in fragment\nMessage text in fragment\nMessage text in fragment\nMessage text in fragment\n<code>channel.chat.clear</code>: a moderator or bot clears all messages …\n<code>channel.chat.clear</code> response payload.\nUser ID of the channel to receive chat clear user messages …\nThe broadcaster user ID.\nThe broadcaster login.\nThe broadcaster display name.\nCreate a builder for building <code>ChannelChatClearV1</code>. On the …\nGet chat clear on broadcasters channel reading chat as a …\nThe user ID to read chat as.\n<code>channel.chat.clear_user_messages</code>: a moderator or bot …\n<code>channel.chat.clear_user_messages</code> response payload.\nUser ID of the channel to receive chat clear user messages …\nThe broadcaster user ID.\nThe broadcaster login.\nThe broadcaster display name.\nCreate a builder for building …\nGet chat clear user messages on broadcasters channel …\nThe ID of the user that was banned or put in a timeout.\nThe user login of the user that was banned or put in a …\nThe user name of the user that was banned or put in a …\nThe user ID to read chat as.\nChat badge\n<code>channel.chat.message</code>: a user sends a message to a specific …\n<code>channel.chat.message</code> response payload.\nA highlighted message with channel points\nA message sent with channel points during sub-only mode\nMetadata for cheer messages\nThe type a message.\nA gigantified emote\nA message sent with effects\nMetadata for reply messages\nA regular text message\nA first message from a user\nList of chat badges.\nThe amount of Bits the user cheered.\nUser ID of the channel to receive chat message events for.\nThe broadcaster user ID.\nThe broadcaster login.\nThe broadcaster display name.\nCreate a builder for building <code>ChannelChatMessageV1</code>. On the …\nAn ID for the type of animation selected as part of an …\nThe ID of a channel points custom reward that was redeemed.\nThe user ID of the user that sent the message.\nThe user login of the user that sent the message.\nThe user name of the user that sent the message.\nMetadata if this message is a cheer.\nThe color of the user’s name in the chat room. This is a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn ID that identifies this version of the badge. The ID …\nContains metadata related to the chat badges in the badges …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe structured chat message.\nA UUID that identifies the message.\nThe type of message.\nCreate a new ChannelChatMessageV1\nThe message body of the parent message.\nAn ID that uniquely identifies the parent message that …\nUser ID of the sender of the parent message.\nUser login of the sender of the parent message.\nUser name of the sender of the parent message.\nMetadata if this message is a reply.\nAn ID that identifies this set of chat badges. For …\nOnly present when in a shared chat session. The list of …\nOnly present when in a shared chat session. The …\nOnly present when in a shared chat session. The login of …\nOnly present when in a shared chat session. The user name …\nOnly present when in a shared chat session. The UUID that …\nAn ID that identifies the parent message of the reply …\nUser ID of the sender of the thread’s parent message.\nUser login of the sender of the thread’s parent message.\nUser name of the sender of the thread’s parent message.\nThe user ID to read chat as.\n<code>channel.chat.message_delete</code>: a moderator removes a …\n<code>channel.chat.message_delete</code> response payload.\nUser ID of the channel to receive chat message delete …\nThe broadcaster user ID.\nThe broadcaster login.\nThe broadcaster display name.\nCreate a builder for building <code>ChannelChatMessageDeleteV1</code>. …\nA UUID that identifies the message that was removed.\nGet chat message delete events on broadcasters channel …\nThe ID of the user whose message was deleted.\nThe user login of the user whose message was deleted.\nThe user name of the user whose message was deleted.\nThe user ID to read chat as.\nA announcement notification\nInformation about the announcement event.\nChatter is anonymous\nAn anonymous gifter\nA bits badge tier upgrade notification\nInformation about the bits badge tier event.\n<code>channel.chat.notification</code>: an event that appears in chat …\n<code>channel.chat.notification</code> response payload.\nA charity donation notification\nInformation about the charity donation event.\nInformation about the user that triggered this notification\nChatter\nA gift notification for multiple gifted subscriptions. …\nInformation about the community gift sub event.\nA gift notification for a paid upgrade of a previously …\nInformation about the community gift paid upgrade event.\nA gifter\nA gifter\nNo gifter\nAll possible notifications in …\nA pay it forward notification\nInformation about the pay it forward event.\nA notification for a paid upgrade of a previous Twitch …\nInformation about the Prime gift paid upgrade event.\nA raid notification\nInformation about the raid event.\nA resubcription notification\nInformation about the resub event.\nInformation about the announcement event that happened in …\nInformation about the community gift sub event that …\nInformation about the community gift paid upgrade event …\nInformation about the pay it forward event that happened …\nInformation about the Prime gift paid upgrade event that …\nInformation about the raid event that happened in a shared …\nInformation about the resub event that happened in a …\nInformation about the sub event that happened in a shared …\nInformation about the gift sub event that happened in a …\nA subscription gift notification\nInformation about the gift sub event.\nA subscription notification\nInformation about the sub event.\nA unraid notification\na unraid event.\nAn object that contains the amount of money that the user …\nList of chat badges.\nUser ID of the channel to receive chat notification events …\nThe broadcaster user ID.\nThe broadcaster login.\nThe broadcaster display name.\nCreate a builder for building <code>ChannelChatNotificationV1</code>. …\nName of the charity.\nThe user ID of the user that sent the message.\nColor of the announcement.\nThe ID of the associated community gift. Null if not …\nThe total number of months the user has subscribed.\nThe amount of gifts the gifter has given in this channel. …\nThe amount of gifts the gifter has given in this channel. …\nThe number of months the subscription is for.\nThe number of months the subscription is for.\nThe number of months the subscription is for.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe gifter\nThe gifter\nThe gifter\nThe ID of the associated community gift.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")