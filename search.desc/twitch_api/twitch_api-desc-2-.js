searchState.loadedDescShard("twitch_api", 2, "The User ID of the host channel.\nEmote ID.\nID of the chat badge version.\nID of the emote.\nID of the emote.\nURL to png of size 28x28\nURL to png of size 56x56\nURL to png of size 112x112\nObject of image URLs for the emote.\nObject of image URLs for the emote.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the message passed all checks and was sent.\nThe announcement to make in the broadcaster’s chat room. …\nThe message to send.\nMessage for why the message was dropped.\nThe message id for the message that was sent.\nThe ID of a user that has permission to moderate the …\nRequired only to access the <code>non_moderator_chat_delay</code> or …\nThe ID of the moderator or the specified broadcaster …\nThe ID of the broadcaster or a user that is one of the …\nThe ID of a user who has permission to moderate the …\nThe ID of a user that has permission to moderate the …\nThe ID of the moderator specified in the request for chat …\nName of the emote a viewer types into Twitch chat for the …\nName of the emote a viewer types into Twitch chat for the …\nName of the emote a viewer types into Twitch chat for the …\nGet chatters in broadcasters channel\nGet global chat badges\nGet global emotes\nCreate a new <code>SendAShoutoutRequest</code>\nSend announcement in channel as this moderator\nCreate a new announcement with specified color\nCreate a new <code>SendChatMessageRequest</code>\nSend a message in the broadcaster’s channel\nUpdate the chat settings for the specified broadcaster as …\nUpdate the users chat color\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nThe amount of time, in seconds, that messages are delayed …\nThe amount of time, in seconds, that messages are delayed …\nUser ID of the broadcaster who owns the emote.\nThe list of participants in the session.\nSet the reply parent message-id\nThe ID of the chat message being replied to.\nThe sizes that the emote is available in.\nThe sizes that the emote is available in.\nThe sizes that the emote is available in.\nSends a Shoutout to the specified broadcaster. …\nSends an announcement to the broadcaster’s chat room. …\nSends an message in the broadcaster’s chat room. …\nThe ID of the user sending the message. This ID must match …\nThe unique identifier for the shared chat session.\nID for the chat badge set.\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nThe amount of time, in seconds, that users need to wait …\nThe amount of time, in seconds, that users need to wait …\nA Boolean value that determines whether only users that …\nA Boolean value that determines whether only users that …\nThe background themes that the emote is available in.\nThe background themes that the emote is available in.\nThe background themes that the emote is available in.\nIf the emote_type is “subscriptions”, this indicates …\nTitle of the badge\nThe ID of the broadcaster that’s receiving the Shoutout.\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nUpdates the broadcaster’s chat settings. …\nUpdates the color used for the user’s name in chat.\nThe UTC date and time (in RFC3339 format) for when the …\nCreate an emote builder for this emote.\nCreate an emote builder for this emote.\nGet emotes available to the user across all channels.\nThe ID of a user that’s connected to the broadcaster’s …\nThe ID of the user whose color you want to get.\nThe ID of the user.\nThe ID of the user. This ID must match the user ID in the …\nThe ID of the user whose chat color you want to update.\nGet chat colors of specified users\nThe user’s login name.\nThe user’s login name.\nThe user’s display name.\nThe user’s display name.\nContains chat badge objects for the set.\nQuery Parameters for Get Channel Chat Badges\nReturn Values for Get Channel Chat Badges\nThe broadcaster whose chat badges are being requested. …\nID for the chat badge set.\nContains chat badge objects for the set.\nQuery Parameters for Get Channel Emotes\nReturn Values for Get Channel Emotes\nThe broadcaster whose emotes are being requested.\nID of the emote set the emote belongs to.\nThe type of emote.\nThe formats that the emote is available in.\nID of the emote.\nObject of image URLs for the emote.\nName of the emote a viewer types into Twitch chat for the …\nThe sizes that the emote is available in.\nThe background themes that the emote is available in.\nIf the emote_type is “subscriptions”, this indicates …\nQuery Parameters for Get Chat Settings\nThe ID of the broadcaster whose chat settings you want to …\nRequired only to access the <code>non_moderator_chat_delay</code> or …\nReturn Values for Get Chatters\nQuery Parameters for Get Chatters\nThe cursor used to get the next page of results. The …\nThe ID of the broadcaster whose list of chatters you want …\nThe maximum number of items to return per page in the …\nThe ID of the moderator or the specified broadcaster …\nThe ID of a user that’s connected to the broadcaster’s …\nThe user’s login name.\nThe user’s display name.\nReturn Values for Get Channel Emotes\nQuery Parameters for Get Channel Emotes\nThe broadcaster whose emotes are being requested. Minimum: …\nID of the emote set the emote belongs to.\nThe type of emote.\nThe formats that the emote is available in.\nReturns the argument unchanged.\nEmote ID.\nObject of image URLs for the emote.\nCalls <code>U::from(self)</code>.\nName of the emote a viewer types into Twitch chat for the …\nUser ID of the broadcaster who owns the emote.\nThe sizes that the emote is available in.\nThe background themes that the emote is available in.\nCreate an emote builder for this emote.\nQuery Parameters for Get Global Chat Badges\nReturn Values for Get Global Chat Badges\nID for the chat badge set.\nContains chat badge objects for the set.\nReturn Values for Get Channel Emotes\nQuery Parameters for Get Channel Emotes\nThe formats that the emote is available in.\nID of the emote.\nObject of image URLs for the emote.\nName of the emote a viewer types into Twitch chat for the …\nThe sizes that the emote is available in.\nThe background themes that the emote is available in.\nQuery Parameters for Get Shared Chat Session\nA participant in a shared chat session\nReturn Values for Get Shared Chat Session\nThe User ID of the channel broadcaster.\nThe User ID of the participant channel.\nThe UTC date and time (in RFC3339 format) for when the …\nThe User ID of the host channel.\nThe list of participants in the session.\nThe unique identifier for the shared chat session.\nThe UTC date and time (in RFC3339 format) for when the …\nQuery Parameters for Get Chatters\nReturn Values for Get Chatters\nThe Hex color code that the user uses in chat for their …\nThe ID of the user whose color you want to get.\nThe ID of the user.\nThe user’s login name.\nThe user’s display name.\nQuery Parameters for Get User Emotes\nReturn Values for Get User Emotes\nThe cursor used to get the next page of results. The …\nThe User ID of a broadcaster you wish to get follower …\nID of the emote set the emote belongs to.\nThe type of emote.\nThe formats that the emote is available in.\nEmote ID.\nName of the emote a viewer types into Twitch chat for the …\nUser ID of the broadcaster who owns the emote.\nThe sizes that the emote is available in.\nThe background themes that the emote is available in.\nThe ID of the user. This ID must match the user ID in the …\nQuery Parameters for Send A Shoutout\nReturn Values for Send A Shoutout\nShoutout successful\nThe ID of the broadcaster that’s sending the Shoutout.\nThe ID of the broadcaster or a user that is one of the …\nThe ID of the broadcaster that’s receiving the Shoutout.\nBody Parameters for Send Chat Announcement\nQuery Parameters for Send Chat Announcement\nReturn Values for Send Chat Announcement\nSuccessfully sent the announcement.\nThe ID of the broadcaster that owns the chat room to send …\nThe color used to highlight the announcement. Possible …\nThe announcement to make in the broadcaster’s chat room. …\nThe ID of a user who has permission to moderate the …\nCode for why a message was dropped.\nA drop reason of a sent message.\nYour message was not sent because it contained too many …\nYou are permanently banned from talking in <code>&lt;channel&gt;</code>.\nYour message was not sent because your account is not in …\nThis channel does not exist or has been suspended.\nYour message was not sent because it is identical to the …\nThis room is in emote-only mode. You can find your …\nThis room is in <code>&lt;duration&gt;</code> followers-only mode. Follow …\nThis room is in <code>&lt;duration1&gt;</code> followers-only mode. You have …\nThis room is in followers-only mode. Follow <code>&lt;channel&gt;</code> to …\nThis room is in unique-chat mode and the message you …\nYour message was not sent because you are sending messages …\nHey! Your message is being checked by mods and has not …\nYour message wasn’t posted due to conflicts with the …\nA verified phone number is required to chat in this …\nThis room is in slow mode and you are sending messages too …\nThis room is in subscribers only mode. To talk, purchase a …\nYou don’t have permission to perform that action.\nYou are timed out for <code>&lt;number&gt;</code> more seconds.\nThis room requires a verified account to chat. Please …\nBody Parameters for Send Chat message\nQuery Parameters for Send Chat message\nReturn Values for Send Chat message\nAn unknown drop-code.\nThe ID of the broadcaster whose chat room the message will …\nCode for why the message was dropped.\nThe reason the message was dropped, if any.\nIf the message passed all checks and was sent.\nThe message to send.\nMessage for why the message was dropped.\nThe message id for the message that was sent.\nThe ID of the chat message being replied to.\nThe ID of the user sending the message. This ID must match …\nBody Parameters for Update Chat Settings\nQuery Parameters for Update Chat Settings\nReturn Values for Update Chat Settings\nThe ID of the broadcaster specified in the request.\nThe ID of the broadcaster whose chat settings you want to …\nA Boolean value that determines whether chat messages must …\nA Boolean value that determines whether chat messages must …\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nThe length of time, in minutes, that the followers must …\nThe length of time, in minutes, that the followers must …\nThe ID of the moderator specified in the request for chat …\nThe ID of a user that has permission to moderate the …\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nThe amount of time, in seconds, that messages are delayed …\nThe amount of time, in seconds, that messages are delayed …\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nThe amount of time, in seconds, that users need to wait …\nThe amount of time, in seconds, that users need to wait …\nA Boolean value that determines whether only users that …\nA Boolean value that determines whether only users that …\nA Boolean value that determines whether the broadcaster …\nA Boolean value that determines whether the broadcaster …\nSuccessfully updated the user’s chat color.\nQuery Parameters for Update Chat Settings\nReturn Values for Update Chat Settings\nThe color to use for the user’s name in chat.\nThe ID of the user whose chat color you want to update.\nHttp client error\nError type to combine a http client error with a other …\nClient for Helix or the New Twitch API\nOther error\nRetrieve a clone of the <code>HttpClient</code> inside this <code>HelixClient</code>\nRetrieve a reference of the <code>HttpClient</code> inside this …\nCreate a new <code>HelixClient</code> with a default <code>HttpClient</code>\nRequest on a valid <code>RequestDelete</code> endpoint\nRequest on a valid <code>RequestGet</code> endpoint\nRequest on a valid <code>RequestPatch</code> endpoint\nRequest on a valid <code>RequestPost</code> endpoint\nRequest on a valid <code>RequestPut</code> endpoint\nCreate a new client with an existing client\nReturn Values for Get Clips\nQuery Parameters for Create Clip\nReturn Value for Create Clip\nQuery Parameters for Get Clips\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nBroadcaster for whom clips are returned.\nCreate a new <code>CreateClipRequest</code> with the given …\nID of the broadcaster for whom clips are returned. The …\nUser ID of the stream from which the clip was created.\nThe ID of the broadcaster whose stream you want to create …\nDisplay name corresponding to broadcaster_id.\nCreate a builder for building <code>GetClipsRequest</code>. On the …\nCreate a builder for building <code>CreateClipRequest</code>. On the …\nIDs of clips being queried\nCreate Clip using Broadcaster ID (one only) <code>create-clip</code>\nDate when the clip was created.\nID of the user who created the clip.\nDisplay name corresponding to creator_id.\nDuration of the Clip in seconds (up to 0.1 precision).\nA URL that you can use to edit the clip’s title, …\nURL to embed the clip.\nAn empty request\nEnding date/time for the returned clips\nEnding date/time for returned clips, in RFC3339 format. …\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGame for which clips are returned.\nID of the game for which clips are returned. The number of …\nID of the game assigned to the stream when the clip was …\nGets clip information by clip ID (one or more), …\nSets the has_delay parameter\nA Boolean value that determines whether the API captures …\nID of the clip being queried. Limit: 100.\nID of the clip being queried.\nID of the created clip.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines whether the response includes featured clips. …\nIndicates if the clip is featured or not.\nLanguage of the stream from which the clip was created.\nEnding date/time for the returned clips\nStarting date/time for returned clips, in RFC3339 format. …\nURL of the clip thumbnail.\nTitle of the clip.\nURL where the clip can be viewed.\nID of the video from which the clip was created.\nNumber of times the clip has been viewed.\nThe zero-based offset, in seconds, to where the clip …\nQuery Parameters for Create Clip\nReturn Value for Create Clip\nThe ID of the broadcaster whose stream you want to create …\nA URL that you can use to edit the clip’s title, …\nA Boolean value that determines whether the API captures …\nID of the created clip.\nReturn Values for Get Clips\nQuery Parameters for Get Clips\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nID of the broadcaster for whom clips are returned. The …\nUser ID of the stream from which the clip was created.\nDisplay name corresponding to broadcaster_id.\nDate when the clip was created.\nID of the user who created the clip.\nDisplay name corresponding to creator_id.\nDuration of the Clip in seconds (up to 0.1 precision).\nURL to embed the clip.\nEnding date/time for returned clips, in RFC3339 format. …\nMaximum number of objects to return. Maximum: 100. …\nID of the game for which clips are returned. The number of …\nID of the game assigned to the stream when the clip was …\nID of the clip being queried. Limit: 100.\nID of the clip being queried.\nDetermines whether the response includes featured clips. …\nIndicates if the clip is featured or not.\nLanguage of the stream from which the clip was created.\nStarting date/time for returned clips, in RFC3339 format. …\nURL of the clip thumbnail.\nTitle of the clip.\nURL where the clip can be viewed.\nID of the video from which the clip was created.\nNumber of times the clip has been viewed.\nThe zero-based offset, in seconds, to where the clip …\nReturn Values for Get Conduit Shards\nBody Parameters for Create Conduit\nQuery Parameters for Create Conduit\nReturn Values for Create EventSub Subscription\nBody Parameters for Create EventSub Subscription\nQuery Parameters for Create EventSub Subscription\nQuery Parameters for Delete Conduit\nReturn Values for Delete Conduit\nReturn Values for Delete EventSub Subscriptions\nQuery Parameters for Delete EventSub Subscriptions\nReturn Values for Get EventSub Subscriptions\nQuery Parameters for Get Conduit Shards\nQuery Parameters for Get Conduits\nQuery Parameters for Get EventSub Subscriptions\n204 - Conduit deleted\n204 - Subscription deleted\nBody Parameters for Update Conduit\nQuery Parameters for Update Conduit\nBody Parameters for Update Conduit Shards\nQuery Parameters for Update Conduit Shards\nThe structured response for Update Conduit Shards\nSet the cursor to get a page of results\nThe cursor used to get the next page of results. The …\nCursor for forward pagination\nCreate a builder for building <code>CreateConduitRequest</code>. On the …\nCreate a builder for building <code>CreateConduitBody</code>. On the …\nCreate a builder for building …\nCreate a builder for building …\nCreate a builder for building <code>DeleteConduitRequest</code>. On the …\nCreate a builder for building …\nCreate a builder for building <code>GetConduitShardsRequest</code>. On …\nCreate a builder for building <code>GetConduitsRequest</code>. On the …\nCreate a builder for building …\nCreate a builder for building <code>UpdateConduitRequest</code>. On the …\nCreate a builder for building <code>UpdateConduitBody</code>. On the …\nCreate a builder for building <code>UpdateConduitShardsRequest</code>. …\nCreate a builder for building <code>UpdateConduitShardsBody</code>. On …\nJSON object specifying custom parameters for the …\nConduit ID.\nConduit ID.\nHow much the subscription counts against your limit.\nCreates a new conduit for your Client. <code>create-conduit</code>\nCreates an EventSub subscription.\nRFC3339 timestamp indicating when the subscription was …\nDeletes a specified conduit. <code>delete-conduit</code>\nDelete an EventSub subscription.\nList of unsuccessful updates.\nGet eventsub subscriptions by this type\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a list of all shards for a conduit. <code>get-conduit-shards</code>\nGet the conduits for your Client. <code>get-conduits</code>\nGet a list of your EventSub subscriptions.\nDelete this eventsub subscription.\nID of the subscription created.\nConduit ID.\nThe subscription ID for the subscription you want to …\nConduit ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum total cost allowed for all of the …\nThe maximum total cost allowed for all of the …\nConduit body settings\nCreate a new eventsub subscription\nCreate a new <code>CreateEventSubSubscriptionBody</code>\nDelete a specific conduit\nRequest the shards of a conduit\nConduit body settings\nConduit body settings\nThe number of shards to create for this conduit.\nThe new number of shards for this conduit.\nList of information about a conduit’s shards.\nList of successful shard updates.\nList of shards to update.\nFilter shards by a specific status\nGet eventsub subscriptions by this status\nStatus of the subscription.\nStatus to filter by.\nInclude this parameter to filter subscriptions by their …\nSubscription that will be created\nArray containing subscriptions.\nTotal number of subscriptions for the client ID that made …\nTotal number of subscriptions for the client ID that made …\nTotal cost of all the subscriptions for the client ID that …\nTotal cost of all the subscriptions for the client ID that …\nThe notification delivery specific information\nJSON object indicating the notification delivery specific …\nThe category of the subscription that was created.\nFilter subscriptions by subscription type (e.g., …\nUpdates a conduit’s shard count. <code>update-conduit</code>\nUpdates shard(s) for a conduit. <code>update-conduit-shards</code>\nFilter subscriptions by user ID.\nThe version of the subscription type that was created.\nBody Parameters for Create Conduit\nQuery Parameters for Create Conduit\nThe number of shards to create for this conduit.\nReturn Values for Create EventSub Subscription\nBody Parameters for Create EventSub Subscription\nQuery Parameters for Create EventSub Subscription\nJSON object specifying custom parameters for the …\nHow much the subscription counts against your limit.\nRFC3339 timestamp indicating when the subscription was …\nID of the subscription created.\nThe maximum total cost allowed for all of the …\nStatus of the subscription.\nSubscription that will be created\nTotal number of subscriptions for the client ID that made …\nTotal cost of all the subscriptions for the client ID that …\nThe notification delivery specific information\nJSON object indicating the notification delivery specific …\nThe category of the subscription that was created.\nThe version of the subscription type that was created.\nQuery Parameters for Delete Conduit\nReturn Values for Delete Conduit\n204 - Conduit deleted\nConduit ID.\nReturn Values for Delete EventSub Subscriptions\nQuery Parameters for Delete EventSub Subscriptions\n204 - Subscription deleted\nThe subscription ID for the subscription you want to …\nReturn Values for Get Conduit Shards\nQuery Parameters for Get Conduit Shards\nThe cursor used to get the next page of results. The …\nConduit ID.\nList of information about a conduit’s shards.\nStatus to filter by.\nQuery Parameters for Get Conduits\nReturn Values for Get EventSub Subscriptions\nQuery Parameters for Get EventSub Subscriptions\nCursor for forward pagination\nMaximum number of objects to return. Maximum: 100. …\nThe maximum total cost allowed for all of the …\nInclude this parameter to filter subscriptions by their …\nArray containing subscriptions.\nTotal number of subscriptions for the client ID that made …\nTotal cost of all the subscriptions for the client ID that …\nFilter subscriptions by subscription type (e.g., …\nFilter subscriptions by user ID.\nBody Parameters for Update Conduit\nQuery Parameters for Update Conduit\nConduit ID.\nThe new number of shards for this conduit.\nBody Parameters for Update Conduit Shards\nQuery Parameters for Update Conduit Shards\nThe structured response for Update Conduit Shards\nConduit ID.\nList of unsuccessful updates.\nList of successful shard updates.\nList of shards to update.\nA game or category as defined by Twitch\nQuery Parameters for Get Games\nQuery Parameters for Get Top Games\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nTemplate URL for the game’s box art.\nCreate a builder for building <code>GetGamesRequest</code>. On the …\nCreate a builder for building <code>GetTopGamesRequest</code>. On the …\nReturns an empty <code>GetGamesRequest</code>\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets game information by game ID or name. <code>get-games</code>\nGets games sorted by number of current viewers on Twitch, …\nGame or category ID.\nGame ID. At most 100 id values can be specified.\nGet games with specific exact id match.\nThe ID that IGDB uses to identify this game.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGame name.\nGame name. The name must be an exact match. For instance, …\nGet games with specific exact name match.\nReturn Values for Get Games\nQuery Parameters for Get Games\nTemplate URL for the game’s box art.\nGame or category ID.\nGame ID. At most 100 id values can be specified.\nThe ID that IGDB uses to identify this game.\nGame name.\nGame name. The name must be an exact match. For instance, …\nReturn Values for Get Top Games\nQuery Parameters for Get Top Games\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nTemplate URL for the game’s box art.\nMaximum number of objects to return. Maximum: 100. …\nGame or category ID.\nThe ID that IGDB uses to identify this game.\nGame name.\nReturn Values for Get Creator Goals\nQuery Parameters for Get Creator Goals\nGets the broadcaster’s list of active goals.\nMust match the User ID in the Bearer token.\nAn ID that uniquely identifies the broadcaster.\nThe broadcaster’s user handle.\nThe broadcaster’s display name.\nCreate a builder for building <code>GetCreatorGoalsRequest</code>. On …\nThe UTC timestamp in RFC 3339 format, which indicates when …\nThe current value.\nCursor for forward pagination: tells the server where to …\nA description of the goal, if specified. The description …\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the broadcaster’s list of active goals. Use this to …\nRetreive a single event by event ID\nAn ID that uniquely identifies this goal.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe goal’s target value. For example, if the broadcaster …\nThe type of goal.\nReturn Values for Get Creator Goals\nQuery Parameters for Get Creator Goals\nMust match the User ID in the Bearer token.\nAn ID that uniquely identifies the broadcaster.\nThe broadcaster’s user handle.\nThe broadcaster’s display name.\nThe UTC timestamp in RFC 3339 format, which indicates when …\nThe current value.\nCursor for forward pagination: tells the server where to …\nA description of the goal, if specified. The description …\nMaximum number of objects to return. Maximum: 100. …\nRetreive a single event by event ID\nAn ID that uniquely identifies this goal.\nThe goal’s target value. For example, if the broadcaster …\nThe type of goal.\nBits\nA contribution to a hype train\nType of contribution to a hype train\nQuery Parameters for Get Hype Train Events\nCovers other contribution methods not listed.\nChannel Subscriptions. Either gifted or not.\nGet hypetrain evens\nMust match the User ID in the Bearer token.\nCreate a builder for building <code>GetHypeTrainEventsRequest</code>. …\nCursor for forward pagination: tells the server where to …\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the information of the most recent Hype Train of the …\nRetreive a single event by event ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe total contributed.\nType of contribution. Valid values include bits, …\nThe ID of the user.\nQuery Parameters for Get Hype Train Events\nReturn Values for Get Hype Train Events\nEvent data for\nType of Hype Train event\nProgression\nMust match the User ID in the Bearer token.\nThe requested broadcaster ID.\nRFC3339 formatted timestamp of when another hype train can …\nCursor for forward pagination: tells the server where to …\nReturns <code>broadcaster_id</code>, <code>broadcaster_name</code>, <code>user_id</code>, …\nRFC3339 formatted timestamp for events.\nDisplays hypetrain.{event_name}, currently only …\nThe time at which the hype train expires. The expiration …\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe number of points required to reach the next level.\nRetreive a single event by event ID\nEvent ID\nThe distinct ID of this Hype Train\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe most recent contribution.\nCurrent level of hype train event.\nThe timestamp at which the hype train started.\nThe contributors with the most points contributed.\nTotal points contributed to the hype train.\nReturns the version of the endpoint.\nThe request has been approved and the user acknowledged …\nBody Parameters for Add Blocked Term\nQuery Parameters for Add Blocked Term\nQuery Parameters for Add Channel Moderator\nReturn Values for Add Channel Moderator\nQuery Parameters for Add Channel Vip\nReturn Values for Add Channel Vip\nAllow the message\nThe request has been approved by a moderator/broadcaster\nAction to take for a message.\nReturn Values for Get AutoMod Settings\nReturn Values for Ban User\nBody Parameters for Ban User\nQuery Parameters for Ban User\nReturn Values for Get Banned Users\nA blocked term in automod\nThe user cancelled the request\nReturn Values for Check AutoMod Status\nBody Parameters for Check AutoMod Status\nQuery Parameters for Check AutoMod Status\nQuery Parameters for Delete Chat Messages\nReturn Values for Delete Chat Messages\nThe request has been denied by a moderator/broadcaster\nDeny the message\nQuery Parameters for Get AutoMod Settings\nQuery Parameters for Get Banned Users\nQuery Parameters for Get Moderated Channels\nQuery Parameters for Get Moderators\nQuery Parameters for Get Shield Mode Status\nQuery Parameters for Get Unban Requests\nQuery Parameters for Get VIPs\nSet the individual levels for each setting\nInformation about a shield mode\nReturn Values for Manage Held AutoMod Messages\nBody Parameters for Manage Held AutoMod Messages\nQuery Parameters for Manage Held AutoMod Messages\nReturn Values for Get Moderated Channels\nReturn Values for Get Moderators\nSet the <code>overall_level</code>\nThe request has been created, but not yet resolved\nReturn Values for Remove Blocked Terms\nQuery Parameters for Remove Blocked Terms\nQuery Parameters for Remove Channel Moderator\nReturn Values for Remove Channel Moderator\nQuery Parameters for Remove Channel VIP\nReturn Values for Remove Channel VIP\nQuery Parameters for Resolve Unban Request\nReturn Values for Get Shield Mode Status\nSuccessfully added the VIP.\nSuccessfully removed the VIP.\nSuccessfully added the moderator.\nSuccessfully removed the specified messages.\nSuccessfully approved or denied the message\n204 - Term removed successfully.\nSuccessfully removed the moderator.\nUnban was successful\nReturn Values for Get Unban Requests\nThe status of an unban request\nQuery Parameters for Unban User\nReturn Values for Unban User\nBody Parameters for Update AutoMod Settings\nSet the individual levels for each setting\nQuery Parameters for Update AutoMod Settings\nReturn Values for Get VIPs\nReturn Values for Warn Chat User\nBody Parameters for Warn Chat User\nQuery Parameters for Warn Chat User\nThe action to take for the message. Must be “ALLOW” or …\nAdds a word or phrase to the broadcaster’s list of …\nAdds a moderator to the broadcaster’s moderation room. …\nAdds a VIP to the broadcaster’s chat room. …\nThe cursor used to get the next page of results. The …\nCursor for forward pagination: tells the server where to …\nThe cursor used to get the next page of results. The …\nCursor for forward pagination: tells the server where to …\nCursor used to get next page of results. Pagination object …\nThe Automod level for hostility involving aggression.\nThe Automod level for hostility involving aggression.\nApprove an unban request\nBans a user from participating in a broadcaster’s chat …\nCursor for backward pagination: tells the server where to …\nCheck automod status in this broadcasters channel.\nGet banned users in a broadcasters channel.\nGet moderators in a broadcasters channel.\nThe ID of the broadcaster that’s granting VIP status to …\nThe ID of the broadcaster whose list of VIPs you want to …\nThe ID of the broadcaster that’s removing VIP status …\nThe ID of the broadcaster that owns the list of blocked …\nThe ID of the broadcaster that owns the chat room.\nThe ID of the broadcaster whose chat room the user is …\nThe broadcaster whose chat room the user was banned from …\nMust match the User ID in the Bearer token.\nThe ID of the broadcaster that owns the chat room to …\nThe ID of the broadcaster whose AutoMod settings you want …\nThe broadcaster’s ID.\nMust match the User ID in the Bearer token.\nAn ID that uniquely identifies the channel this user can …\nMust match the User ID in the Bearer token.\nThe ID of the broadcaster whose Shield Mode activation …\nThe ID of the broadcaster whose channel is receiving unban …\nUser ID of broadcaster whose channel is receiving the …\nThe ID of the broadcaster that owns the list of blocked …\nThe ID of the broadcaster that owns the chat room.\nThe ID of the broadcaster whose channel is approving or …\nThe ID of the broadcaster whose chat room the user is …\nThe ID of the broadcaster whose AutoMod settings you want …\nThe ID of the broadcaster whose chat room the user is …\nThe broadcaster whose chat room the user was warned in.\nThe broadcaster that owns the list of blocked terms.\nThe channel’s login name.\nThe broadcaster’s login name.\nThe channels’ display name.\nThe broadcaster’s display name.\nCreate a builder for building <code>AddBlockedTermRequest</code>. On …\nCreate a builder for building <code>AddBlockedTermBody</code>. On the …\nCreate a builder for building <code>AddChannelModeratorRequest</code>. …\nCreate a builder for building <code>BanUserRequest</code>. On the …\nCreate a builder for building <code>BanUserBody</code>. On the builder, …\nCreate a builder for building <code>CheckAutoModStatusRequest</code>. …\nCreate a builder for building <code>CheckAutoModStatusBody</code>. On …\nCreate a builder for building <code>DeleteChatMessagesRequest</code>. …\nCreate a builder for building <code>GetAutoModSettingsRequest</code>. …\nCreate a builder for building <code>GetBannedUsersRequest</code>. On …\nCreate a builder for building <code>GetModeratedChannelsRequest</code>. …\nCreate a builder for building <code>GetModeratorsRequest</code>. On the …\nCreate a builder for building <code>GetShieldModeStatusRequest</code>. …\nCreate a builder for building <code>GetUnbanRequestsRequest</code>. On …\nCreate a builder for building …\nCreate a builder for building <code>ManageHeldAutoModMessagesBody</code>…\nCreate a builder for building <code>RemoveBlockedTermRequest</code>. On …\nCreate a builder for building <code>RemoveChannelModeratorRequest</code>…\nCreate a builder for building <code>ResolveUnbanRequest</code>. On the …\nCreate a builder for building <code>UnbanUserRequest</code>. On the …\nCreate a builder for building <code>UpdateAutoModSettingsRequest</code>.\nCreate a builder for building …\nCreate a builder for building <code>WarnChatUserRequest</code>. On the …\nCreate a builder for building <code>WarnChatUserBody</code>. On the …\nThe Automod level for hostility involving name calling or …\nThe Automod level for hostility involving name calling or …\nDetermines whether a string message meets the channel’s …\nThe UTC date and time (in RFC3999 format) when the ban was …\nTimestamp of when the unban request was created.\nThe UTC date and time (in RFC3339 format) of when the term …\nRemoves a single chat message or all chat messages from …\nDeny an unban request\nThe Automod level for discrimination against disability.\nThe Automod level for discrimination against disability.\nDuration of the (optional) timeout in seconds.\nThe UTC date and time (in RFC3339 format) that the timeout …\nRFC3339 formatted timestamp for timeouts; empty string for …\nThe UTC date and time (in RFC3339 format) of when the …\nSet amount of results returned per page.\nSet amount of results returned per page.\nSet amount of results returned per page.\nSet amount of results returned per page.\nThe maximum number of items to return per page in the …\nNumber of values to be returned per page. Limit: 100. …\nThe maximum number of items to return per page in the …\nNumber of values to be returned per page. Limit: 100. …\nThe maximum number of items to return per page in response\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an <code>Individual</code> from AutoModSettings\nConstructs an update on individual settings from …\nGets the broadcaster’s AutoMod settings. …\nReturns all banned and timed-out users in a channel. …\nGets the broadcaster’s list of non-private, blocked …\nGets a list of channels that the specified user has …\nReturns all moderators in a channel. <code>get-moderators</code>\nGets the broadcaster’s Shield Mode activation status. …\nGets a list of unban requests for a broadcaster’s …\nGets a list of the channel’s VIPs. <code>get-vips</code>\nUnban request ID.\nThe ID of the blocked term you want to delete.\nAn ID that uniquely identifies this blocked term.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA Boolean value that determines whether Shield Mode is …\nIndicates if this message meets AutoMod requirements.\nThe UTC timestamp (in RFC3339 format) of when Shield Mode …\nInformation about the last activated shield mode\nAllow or deny a message that was held for review by …\nA specific message to remove\nThe ID of the message to remove.\nThe Automod level for discrimination against women.\nThe Automod level for discrimination against women.\nThe ID of a user that has permission to moderate the …\nThe ID of the user to add as a moderator in the …\nThe ID of a user that has permission to moderate the …\nThe moderator that banned or put the user in the timeout.\nThe ID of a user that has permission to moderate the …\nThe ID of the broadcaster or a user that has permission to …\nThe moderator’s ID.\nUser ID of the moderator who initiated the ban.\nThe ID of the broadcaster or a user that is one of the …\nAn ID that identifies the moderator that last activated …\nThe ID of the broadcaster or a user that has permission to …\nUser ID of moderator who approved/denied the request.\nThe ID of a user that has permission to moderate the …\nThe ID of the user to remove as a moderator from the …\nThe ID of the broadcaster or a user that has permission to …\nThe ID of a user that has permission to moderate the …\nThe ID of the broadcaster or a user that has permission to …\nThe ID of a user that has permission to moderate the …\nThe moderator that warned the user.\nThe moderator that blocked the word or phrase from being …\nLogin of the moderator who initiated the ban.\nThe moderator’s login name.\nThe moderator’s login name.\nDisplay name of the moderator who initiated the ban.\nThe moderator’s display name.\nThe moderator’s display name.\nDeveloper-generated identifier for mapping messages to …\nThe msg_id passed in the body of the POST message. Maps …\nID of the message to be allowed or denied. These message …\nMessage text.\nWhere to add blocked term\nCreate a new <code>AddBlockedTermBody</code>\nAdd moderator on channel\nBan a user on this channel\nCreate a new <code>BanUserBody</code>\nCreate a new <code>CheckAutoModStatusBody</code>\nRemove chat message(s)\nGet AutoMod settings in a broadcasters channel as …\nGet shield mode status in a broadcasters channel as …\nGet Unban Requests in a broadcasters channel filtered by a …\nCreate a new <code>ManageHeldAutoModMessagesRequest</code>\nCreate a new <code>ManageHeldAutoModMessagesBody</code>\nRemove blocked term\nRemove moderator\nResolve an unban request\nRemove the ban or timeout that was placed on the specified …\nUpdate the AutoMod settings on the specified channel as …\nWarn a user on this channel\nCreate a new <code>WarnChatUserBody</code>\nSet the <code>overall_level</code>\nThe default AutoMod level for the broadcaster. This field …\nThe Automod level for racial discrimination.\nThe Automod level for racial discrimination.\nThe reason the user is being banned or put in a timeout. …\nThe reason for the ban if provided by the moderator.\nThe reason the user is being warned.\nThe reason provided for the warning.\nRemoves the word or phrase that the broadcaster is …\nRemoves a moderator from the broadcaster’s chat room. …\nRemoves a VIP from the broadcaster’s chat room. …\nSet the resolution text for a request\nText input by the resolver (moderator) of the unban. …\nMessage supplied by the unban request resolver. The …\nResolves an unban request by approving or denying it.\nTimestamp of when moderator/broadcaster approved or denied …\nThe Automod level for sexual content.\nThe Automod level for sexual content.\nThe AutoMod level for discrimination based on sexuality, …\nThe AutoMod level for discrimination based on sexuality, …\nFilter by a status.\nStatus of the request.\nResolution status.\nThe Automod level for profanity.\nThe Automod level for profanity.\nThe word or phrase to block from being used in the …\nText of the request from the requesting user.\nThe blocked word or phrase.\nThe ID of the Unban Request to resolve.\nRemoves the ban or timeout that was placed on the …\nUpdates the broadcaster’s AutoMod settings.\nActivates or deactivates the broadcaster’s Shield Mode.\nThe UTC date and time (in RFC3339 format) of when the term …\nFilter for unban requests from a specific user\nGet Moderated Channels for an authenticated user.\nThe ID of the user to add as a VIP in the broadcaster’s …\nFilters the list for specific VIPs. To specify more than …\nAn ID that uniquely identifies the VIP user.\nThe ID of the user to remove as a VIP from the …\nThe ID of the user to ban or put in a timeout.\nThe user that was banned or was put in a timeout.\nUser ID of the sender.\nFilters the results and only returns a status object for …\nUser ID of a user who has been banned.\nA user’s ID. Returns the list of channels that this user …\nFilters the results and only returns a status object for …\nUser ID of a moderator in the channel.\nThe ID used to filter what unban requests are returned.\nUser ID of the requestor who is asking for an unban.\nThe moderator who is approving or rejecting the held …\nThe ID of the user to remove the ban or timeout from.\nThe ID of the user to warn.\nThe user that was warned.\nFilter the results for specific users.\nThe user’s login name.\nLogin of a user who has been banned.\nLogin of a moderator in the channel.\nThe user’s login name.\nThe user’s display name.\nDisplay name of a user who has been banned.\nDisplay name of a moderator in the channel.\nThe user’s display name.\nCheck if supplied users are banned.\nWarns a user in a broadcaster’s chat room, preventing …\nThe default AutoMod level for the broadcaster.\nBody Parameters for Add Blocked Term\nQuery Parameters for Add Blocked Term\nReturn Values for Add Blocked Term\nThe broadcaster that owns the list of blocked terms.\nThe ID of the broadcaster that owns the list of blocked …\nThe UTC date and time (in RFC3339 format) of when the term …\nThe UTC date and time (in RFC3339 format) of when the …\nAn ID that uniquely identifies this blocked term.\nThe moderator that blocked the word or phrase from being …\nThe ID of a user that has permission to moderate the …\nThe blocked word or phrase.\nThe word or phrase to block from being used in the …\nThe UTC date and time (in RFC3339 format) of when the term …\nQuery Parameters for Add Channel Moderator\nReturn Values for Add Channel Moderator\nSuccessfully added the moderator.\nThe ID of the broadcaster that owns the chat room.\nThe ID of the user to add as a moderator in the …\nQuery Parameters for Add Channel Vip\nReturn Values for Add Channel Vip\nSuccessfully added the VIP.\nThe ID of the broadcaster that’s granting VIP status to …\nThe ID of the user to add as a VIP in the broadcaster’s …\nReturn Values for Ban User\nBody Parameters for Ban User\nQuery Parameters for Ban User\nThe ID of the broadcaster whose chat room the user is …\nThe broadcaster whose chat room the user was banned from …\nThe UTC date and time (in RFC3999 format) when the ban was …\nDuration of the (optional) timeout in seconds.\nThe UTC date and time (in RFC3339 format) that the timeout …\nThe ID of a user that has permission to moderate the …\nThe moderator that banned or put the user in the timeout.\nThe reason the user is being banned or put in a timeout. …\nThe ID of the user to ban or put in a timeout.\nThe user that was banned or was put in a timeout.\nReturn Values for Check AutoMod Status\nBody Parameters for Check AutoMod Status\nQuery Parameters for Check AutoMod Status\nMust match the User ID in the Bearer token.\nIndicates if this message meets AutoMod requirements.\nDeveloper-generated identifier for mapping messages to …\nThe msg_id passed in the body of the POST message. Maps …\nMessage text.\nUser ID of the sender.\nQuery Parameters for Delete Chat Messages\nReturn Values for Delete Chat Messages\nSuccessfully removed the specified messages.\nThe ID of the broadcaster that owns the chat room to …\nThe ID of the message to remove.\nThe ID of a user that has permission to moderate the …\nReturn Values for Get AutoMod Settings\nQuery Parameters for Get AutoMod Settings\nThe Automod level for hostility involving aggression.\nThe ID of the broadcaster whose AutoMod settings you want …\nThe broadcaster’s ID.\nThe Automod level for hostility involving name calling or …\nThe Automod level for discrimination against disability.\nThe Automod level for discrimination against women.\nThe ID of the broadcaster or a user that has permission to …\nThe moderator’s ID.\nThe default AutoMod level for the broadcaster. This field …\nThe Automod level for racial discrimination.\nThe Automod level for sexual content.\nThe AutoMod level for discrimination based on sexuality, …\nThe Automod level for profanity.\nReturn Values for Get Banned Users\nQuery Parameters for Get Banned Users\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nMust match the User ID in the Bearer token.\nRFC3339 formatted timestamp for timeouts; empty string for …\nNumber of values to be returned per page. Limit: 100. …\nUser ID of the moderator who initiated the ban.\nLogin of the moderator who initiated the ban.\nDisplay name of the moderator who initiated the ban.\nThe reason for the ban if provided by the moderator.\nFilters the results and only returns a status object for …\nUser ID of a user who has been banned.\nLogin of a user who has been banned.\nDisplay name of a user who has been banned.\nQuery Parameters for Get Blocked Terms\nReturn Values for Get Blocked Terms\nThe cursor used to get the next page of results. The …\nThe broadcaster that owns the list of blocked terms.\nThe ID of the broadcaster whose blocked terms you’re …\nCreate a builder for building <code>GetBlockedTermsRequest</code>. On …\nThe UTC date and time (in RFC3339 format) of when the term …\nThe UTC date and time (in RFC3339 format) of when the …\nSet amount of results returned per page.\nThe maximum number of blocked terms to return per page in …\nReturns the argument unchanged.\nAn ID that uniquely identifies this blocked term.\nCalls <code>U::from(self)</code>.\nThe moderator that blocked the word or phrase from being …\nThe ID of a user that has permission to moderate the …\nGet blocked terms in a broadcasters channel as specified …\nThe blocked word or phrase.\nThe UTC date and time (in RFC3339 format) of when the term …\nQuery Parameters for Get Moderated Channels\nReturn Values for Get Moderated Channels\nThe cursor used to get the next page of results. The …\nAn ID that uniquely identifies the channel this user can …\nThe channel’s login name.\nThe channels’ display name.\nThe maximum number of items to return per page in the …\nA user’s ID. Returns the list of channels that this user …\nQuery Parameters for Get Moderators\nReturn Values for Get Moderators\nCursor for forward pagination: tells the server where to …\nMust match the User ID in the Bearer token.\nNumber of values to be returned per page. Limit: 100. …\nFilters the results and only returns a status object for …\nUser ID of a moderator in the channel.\nLogin of a moderator in the channel.\nDisplay name of a moderator in the channel.\nQuery Parameters for Get Shield Mode Status\nInformation about a shield mode\nReturn Values for Get Shield Mode Status\nThe ID of the broadcaster whose Shield Mode activation …\nA Boolean value that determines whether Shield Mode is …\nThe UTC timestamp (in RFC3339 format) of when Shield Mode …\nInformation about the last activated shield mode\nThe ID of the broadcaster or a user that is one of the …\nAn ID that identifies the moderator that last activated …\nThe moderator’s login name.\nThe moderator’s display name.\nThe request has been approved and the user acknowledged …\nThe request has been approved by a moderator/broadcaster\nThe user cancelled the request\nThe request has been denied by a moderator/broadcaster\nQuery Parameters for Get Unban Requests\nThe request has been created, but not yet resolved\nReturn Values for Get Unban Requests\nThe status of an unban request\nCursor used to get next page of results. Pagination object …\nThe ID of the broadcaster whose channel is receiving unban …\nUser ID of broadcaster whose channel is receiving the …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nTimestamp of when the unban request was created.\nThe maximum number of items to return per page in response\nUnban request ID.\nThe ID of the broadcaster or a user that has permission to …\nUser ID of moderator who approved/denied the request.\nThe moderator’s login name.\nThe moderator’s display name.\nText input by the resolver (moderator) of the unban. …\nTimestamp of when moderator/broadcaster approved or denied …\nFilter by a status.\nStatus of the request.\nText of the request from the requesting user.\nThe ID used to filter what unban requests are returned.\nUser ID of the requestor who is asking for an unban.\nThe user’s login name.\nThe user’s display name.\nQuery Parameters for Get VIPs\nReturn Values for Get VIPs\nThe cursor used to get the next page of results. The …\nThe ID of the broadcaster whose list of VIPs you want to …\nThe maximum number of items to return per page in the …\nFilters the list for specific VIPs. To specify more than …\nAn ID that uniquely identifies the VIP user.\nThe user’s login name.\nThe user’s display name.\nAllow the message\nAction to take for a message.\nDeny the message\nReturn Values for Manage Held AutoMod Messages\nBody Parameters for Manage Held AutoMod Messages\nQuery Parameters for Manage Held AutoMod Messages\nSuccessfully approved or denied the message\nThe action to take for the message. Must be “ALLOW” or …\nID of the message to be allowed or denied. These message …\nThe moderator who is approving or rejecting the held …\nReturn Values for Remove Blocked Terms\nQuery Parameters for Remove Blocked Terms\n204 - Term removed successfully.\nThe ID of the broadcaster that owns the list of blocked …\nThe ID of the blocked term you want to delete.\nThe ID of a user that has permission to moderate the …\nQuery Parameters for Remove Channel Moderator\nReturn Values for Remove Channel Moderator\nSuccessfully removed the moderator.\nThe ID of the broadcaster that owns the chat room.\nThe ID of the user to remove as a moderator from the …\nQuery Parameters for Remove Channel VIP\nReturn Values for Remove Channel VIP\nSuccessfully removed the VIP.\nThe ID of the broadcaster that’s removing VIP status …\nThe ID of the user to remove as a VIP from the …\nThe request has been approved and the user acknowledged …\nThe request has been approved by a moderator/broadcaster\nThe user cancelled the request\nThe request has been denied by a moderator/broadcaster\nThe request has been created, but not yet resolved\nQuery Parameters for Resolve Unban Request\nReturn Values for Get Unban Requests\nThe status of an unban request\nUser ID of broadcaster whose channel is receiving the …\nThe ID of the broadcaster whose channel is approving or …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nTimestamp of when the unban request was created.\nUnban request ID.\nUser ID of moderator who approved/denied the request.\nThe ID of the broadcaster or a user that has permission to …\nThe moderator’s login name.\nThe moderator’s display name.\nText input by the resolver (moderator) of the unban. …\nMessage supplied by the unban request resolver. The …\nTimestamp of when moderator/broadcaster approved or denied …\nStatus of the request.\nResolution status.\nText of the request from the requesting user.\nThe ID of the Unban Request to resolve.\nUser ID of the requestor who is asking for an unban.\nThe user’s login name.\nThe user’s display name.\nUnban was successful\nQuery Parameters for Unban User\nReturn Values for Unban User\nThe ID of the broadcaster whose chat room the user is …\nThe ID of a user that has permission to moderate the …\nThe ID of the user to remove the ban or timeout from.\nReturn Values for Get AutoMod Settings\nSet the individual levels for each setting\nSet the <code>overall_level</code>\nBody Parameters for Update AutoMod Settings\nSet the individual levels for each setting\nQuery Parameters for Update AutoMod Settings\nThe Automod level for hostility involving aggression.\nThe Automod level for hostility involving aggression.\nThe broadcaster’s ID.\nThe ID of the broadcaster whose AutoMod settings you want …\nThe Automod level for hostility involving name calling or …\nThe Automod level for hostility involving name calling or …\nThe Automod level for discrimination against disability.\nThe Automod level for discrimination against disability.\nThe Automod level for discrimination against women.\nThe Automod level for discrimination against women.\nThe moderator’s ID.\nThe ID of the broadcaster or a user that has permission to …\nThe default AutoMod level for the broadcaster. This field …\nThe Automod level for racial discrimination.\nThe Automod level for racial discrimination.\nThe Automod level for sexual content.\nThe Automod level for sexual content.\nThe AutoMod level for discrimination based on sexuality, …\nThe AutoMod level for discrimination based on sexuality, …\nThe Automod level for profanity.\nThe Automod level for profanity.\nThe default AutoMod level for the broadcaster.\nReturn Values for Get Shield Mode Status\nBody Parameters for Update Shield Mode Status\nQuery Parameters for Update Shield Mode Status\nThe ID of the broadcaster whose Shield Mode you want to …\nCreate a builder for building <code>UpdateShieldModeStatusRequest</code>…\nCreate a builder for building <code>UpdateShieldModeStatusBody</code>. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet status of shield mode\nA Boolean value that determines whether Shield Mode is …\nA Boolean value that determines whether to activate Shield …\nInformation about the last activated shield mode\nThe ID of the broadcaster or a user that is one of the …\nSet the shield mode status on specified channel as the …\nReturn Values for Warn Chat User\nBody Parameters for Warn Chat User\nQuery Parameters for Warn Chat User\nThe ID of the broadcaster whose chat room the user is …\nThe broadcaster whose chat room the user was warned in.\nThe ID of a user that has permission to moderate the …\nThe moderator that warned the user.\nThe reason the user is being warned.\nThe reason provided for the warning.\nThe ID of the user to warn.\nThe user that was warned.\nCancelled reward - the reward has been cancelled before …\nBody Parameters for Create Custom Rewards\nQuery Parameters for Create Custom Rewards\nReturn Values for Create Custom Rewards\nReturn Values for Get Custom Reward\nReturn Values for Get Custom Reward Redemption\nCustom reward redemption statuses: UNFULFILLED, FULFILLED …\nReturn Values for Delete CustomReward\nQuery Parameters for Delete CustomReward\nFulfilled reward - the user has claimed it and the reward …\nQuery Parameters for Get Custom Reward Redemption\nQuery Parameters for Get Custom Reward\nReward deleted\n200 - OK\nUnfulfilled reward - the user has claimed it but it is …\nBody Parameters for Update Custom Rewards\nQuery Parameters for Update Custom Rewards\nBody Parameters for Update Redemption Status\nFIXME: Returns an object. Return Values for Update …\nQuery Parameters for Update Redemption Status\nCursor for forward pagination: tells the server where to …\nCustom background color for the reward. Format: Hex with # …\nCustom background color for the reward. Format: Hex with # …\nCustom background color for the reward. Format: Hex with # …\nCustom background color for the reward. Format: Hex with # …\nChannel to create reward on\nRewards on this broadcasters channel\nReward to fetch\nID of the channel the reward is for\nProvided broadcaster_id must match the user_id in the auth …\nProvided broadcaster_id must match the user_id in the auth …\nProvided broadcaster_id must match the user_id in the auth …\nID of the channel the reward is for\nProvided broadcaster_id must match the user_id in the auth …\nThe id of the broadcaster that the reward belongs to.\nProvided broadcaster_id must match the user_id in the auth …\nProvided broadcaster_id must match the user_id in the auth …\nLogin of the channel the reward is for\nLogin of the channel the reward is for\nBroadcaster’s user login name.\nDisplay name of the channel the reward is for\nDisplay name of the channel the reward is for\nThe display name of the broadcaster that the reward …\nCreate a builder for building <code>CreateCustomRewardRequest</code>. …\nCreate a builder for building <code>CreateCustomRewardBody</code>. On …\nCreate a builder for building <code>DeleteCustomRewardRequest</code>. …\nCreate a builder for building <code>GetCustomRewardRequest</code>. On …\nCreate a builder for building …\nCreate a builder for building <code>UpdateCustomRewardRequest</code>. …\nCreate a builder for building <code>UpdateCustomRewardBody</code>. On …\nCreate a builder for building <code>UpdateRedemptionStatusRequest</code>…\nCreate a builder for building <code>UpdateRedemptionStatusBody</code>. …\nTimestamp of the cooldown expiration. Null if the reward …\nTimestamp of the cooldown expiration. Null if the reward …\nThe cost of the reward\nThe cost of the reward\nThe cost of the reward\nThe cost of the reward\nAdds a specified user to the followers of a specified …\nSet of default images of 1x, 2x and 4x sizes for the …\nSet of default images of 1x, 2x and 4x sizes for the …\nDeletes a Custom Reward on a channel. <code>delete-custom-reward</code>\nNumber of results to be returned when getting the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a list of Custom Reward objects for the Custom …\nReturns Custom Reward Redemption objects for a Custom …\nThe cooldown in seconds if enabled\nThe cooldown in seconds if enabled\nWhether a cooldown is enabled and what the cooldown is. { …\nWhether a cooldown is enabled and what the cooldown is. { …\nID of the reward\nID of the Custom Reward to delete, must match a Custom …\nWhen used, this parameter filters the results and only …\nID of the reward\nA list of IDs to filter the redemptions by.\nThe ID of the redemption.\nID of the Custom Reward to update, must match a Custom …\nID of the Custom Reward Redemption to update, must match a …\nGet rewards with these ids. Maximum 50\nGet redemptions with these ids\nSet of custom images of 1x, 2x and 4x sizes for the reward …\nSet of custom images of 1x, 2x and 4x sizes for the reward …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the reward currently enabled, if false the reward …\nIs the reward currently enabled, if false the reward …\nIs the reward currently enabled, if false the reward …\nIs the reward currently enabled, if false the reward …\nWhether a cooldown is enabled. Defaults to false.\nWhether a cooldown is enabled. Defaults to false.\nIs the reward currently in stock, if false viewers can’t …\nIs the reward currently in stock, if false viewers can’t …\nWhether a maximum per stream is enabled. Defaults to false.\nWhether a maximum per stream is enabled\nWhether a maximum per user per stream is enabled. Defaults …\nWhether a maximum per user per stream is enabled. Defaults …\nIs the reward currently paused, if true viewers can’t …\nIs the reward currently paused, if true viewers can’t …\nIs the reward currently paused, if true viewers can’t …\nDoes the user need to enter information when redeeming the …\nDoes the user need to enter information when redeeming the …\nDoes the user need to enter information when redeeming the …\nDoes the user need to enter information when redeeming the …\nThe maximum number per stream if enabled\nThe maximum number per stream if enabled\nWhether a maximum per stream is enabled and what the …\nWhether a maximum per stream is enabled and what the …\nThe maximum number per user per stream if enabled\nThe maximum number per user per stream if enabled\nWhether a maximum per user per stream is enabled and what …\nWhether a maximum per user per stream is enabled and what …\nReward to create with title.\nReward to delete\nUpdate a Custom Reward created on the broadcaster’s …\nUpdate the status of Custom Reward Redemption object on a …\nOnly return rewards that this application/client id can …\nWhen set to true, only returns custom rewards that the …\nThe prompt for the viewer when they are redeeming the …\nThe prompt for the viewer when they are redeeming the …\nThe prompt for the viewer when they are redeeming the …\nThe prompt for the viewer when they are redeeming the …\nRFC3339 timestamp of when the reward was redeemed.\nThe number of redemptions redeemed during the current live …\nThe number of redemptions redeemed during the current live …\nBasic information about the Custom Reward that was …\nSpecific reward to query\nWhen ID is not provided, this parameter returns paginated …\nID of the Custom Reward the redemptions to be updated are …\nShould redemptions be set to FULFILLED status immediately …\nShould redemptions be set to FULFILLED status immediately …\nShould redemptions be set to FULFILLED status immediately …\nShould redemptions be set to FULFILLED status immediately …\nThe order to sort redemptions by.\nThe order to sort redemptions by.\nStatus of rewards to return\nThe new status to set\nWhen id is not provided, this param is required and …\nOne of UNFULFILLED, FULFILLED or CANCELED\nThe new status to set redemptions to. Can be either …\nThe title of the reward\nThe title of the reward\nThe title of the reward\nThe title of the reward\nUpdates a Custom Reward created on a channel.\nUpdates the status of Custom Reward Redemption objects on …\nThe ID of the user that redeemed the reward\nThe user input provided. Empty string if not provided.\nThe login of the user who redeemed the reward.\nThe display name of the user that redeemed the reward.\nBody Parameters for Create Custom Rewards\nQuery Parameters for Create Custom Rewards\nReturn Values for Create Custom Rewards\nCustom background color for the reward. Format: Hex with # …\nCustom background color for the reward. Format: Hex with # …\nID of the channel the reward is for\nProvided broadcaster_id must match the user_id in the auth …\nLogin of the channel the reward is for\nDisplay name of the channel the reward is for\nTimestamp of the cooldown expiration. Null if the reward …\nThe cost of the reward\nThe cost of the reward\nSet of default images of 1x, 2x and 4x sizes for the …\nThe cooldown in seconds if enabled\nWhether a cooldown is enabled and what the cooldown is. { …\nID of the reward\nSet of custom images of 1x, 2x and 4x sizes for the reward …\nIs the reward currently enabled, if false the reward …\nIs the reward currently enabled, if false the reward …\nWhether a cooldown is enabled. Defaults to false.\nIs the reward currently in stock, if false viewers can’t …\nWhether a maximum per stream is enabled. Defaults to false.\nWhether a maximum per user per stream is enabled. Defaults …\nIs the reward currently paused, if true viewers can’t …\nDoes the user need to enter information when redeeming the …\nDoes the user need to enter information when redeeming the …\nThe maximum number per stream if enabled\nWhether a maximum per stream is enabled and what the …\nThe maximum number per user per stream if enabled\nWhether a maximum per user per stream is enabled and what …\nThe prompt for the viewer when they are redeeming the …\nThe prompt for the viewer when they are redeeming the …\nThe number of redemptions redeemed during the current live …\nShould redemptions be set to FULFILLED status immediately …\nShould redemptions be set to FULFILLED status immediately …\nThe title of the reward\nThe title of the reward\nReturn Values for Delete CustomReward\nQuery Parameters for Delete CustomReward\nReward deleted\nProvided broadcaster_id must match the user_id in the auth …\nID of the Custom Reward to delete, must match a Custom …\nReturn Values for Get Custom Reward\nQuery Parameters for Get Custom Reward\nCustom background color for the reward. Format: Hex with # …\nProvided broadcaster_id must match the user_id in the auth …\nID of the channel the reward is for\nLogin of the channel the reward is for\nDisplay name of the channel the reward is for\nTimestamp of the cooldown expiration. Null if the reward …\nThe cost of the reward\nSet of default images of 1x, 2x and 4x sizes for the …\nWhether a cooldown is enabled and what the cooldown is. { …\nWhen used, this parameter filters the results and only …\nID of the reward\nSet of custom images of 1x, 2x and 4x sizes for the reward …\nIs the reward currently enabled, if false the reward …\nIs the reward currently in stock, if false viewers can’t …\nIs the reward currently paused, if true viewers can’t …\nDoes the user need to enter information when redeeming the …\nWhether a maximum per stream is enabled and what the …\nWhether a maximum per user per stream is enabled and what …\nWhen set to true, only returns custom rewards that the …\nThe prompt for the viewer when they are redeeming the …\nThe number of redemptions redeemed during the current live …\nShould redemptions be set to FULFILLED status immediately …\nThe title of the reward\nReturn Values for Get Custom Reward Redemption\nQuery Parameters for Get Custom Reward Redemption\nThe order to sort redemptions by.\nSort by newest\nSort by oldest\nInformation about the reward involved\nCursor for forward pagination: tells the server where to …\nProvided broadcaster_id must match the user_id in the auth …\nThe id of the broadcaster that the reward belongs to.\nBroadcaster’s user login name.\nThe display name of the broadcaster that the reward …\nThe cost of the reward in channel points.\nNumber of results to be returned when getting the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nA list of IDs to filter the redemptions by.\nThe ID of the redemption.\nThe ID of the custom reward.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe prompt to the user, if any, for the reward.\nRFC3339 timestamp of when the reward was redeemed.\nBasic information about the Custom Reward that was …\nWhen ID is not provided, this parameter returns paginated …\nThe order to sort redemptions by.\nWhen id is not provided, this param is required and …\nOne of UNFULFILLED, FULFILLED or CANCELED\nThe title of the custom reward.\nThe ID of the user that redeemed the reward\nThe user input provided. Empty string if not provided.\nThe login of the user who redeemed the reward.\nThe display name of the user that redeemed the reward.\nReward updated\nReturn Values for Update CustomReward\nBody Parameters for Update Custom Rewards\nQuery Parameters for Update Custom Rewards\nCustom background color for the reward. Format: Hex with # …\nProvided broadcaster_id must match the user_id in the auth …\nThe cost of the reward\nReturns the argument unchanged.\nThe cooldown in seconds if enabled\nID of the Custom Reward to update, must match a Custom …\nCalls <code>U::from(self)</code>.\nIs the reward currently enabled, if false the reward …\nWhether a cooldown is enabled. Defaults to false.\nWhether a maximum per stream is enabled\nWhether a maximum per user per stream is enabled. Defaults …\nIs the reward currently paused, if true viewers can’t …\nDoes the user need to enter information when redeeming the …\nThe maximum number per stream if enabled\nThe maximum number per user per stream if enabled\nThe prompt for the viewer when they are redeeming the …\nShould redemptions be set to FULFILLED status immediately …\nThe title of the reward\nReturn Values for Get Custom Reward Redemption\n200 - OK\nBody Parameters for Update Redemption Status\nFIXME: Returns an object. Return Values for Update …\nQuery Parameters for Update Redemption Status\nThe id of the broadcaster that the reward belongs to.\nProvided broadcaster_id must match the user_id in the auth …\nBroadcaster’s user login name.\nThe display name of the broadcaster that the reward …\nThe ID of the redemption.\nID of the Custom Reward Redemption to update, must match a …\nRFC3339 timestamp of when the reward was redeemed.\nBasic information about the Custom Reward that was …\nID of the Custom Reward the redemptions to be updated are …\nOne of UNFULFILLED, FULFILLED or CANCELED\nThe new status to set redemptions to. Can be either …\nThe ID of the user that redeemed the reward\nThe user input provided. Empty string if not provided.\nThe login of the user who redeemed the reward.\nThe display name of the user that redeemed the reward.\nBody Parameters for Create Poll\nQuery Parameters for Create Poll\nBody Parameters for End Poll\nQuery Parameters for End Poll\nQuery Parameters for Get polls\nChoice settings for a poll\nReturn Values for Get polls\nCursor for forward pagination\nThe broadcaster running polls.\nThe broadcaster running polls. Provided broadcaster_id …\nThe broadcaster running polls. Provided broadcaster_id …\nThe broadcaster running polls. Provided broadcaster_id …\nID of the broadcaster.\nLogin of the broadcaster.\nName of the broadcaster.\nCreate a builder for building <code>CreatePollRequest</code>. On the …\nCreate a builder for building <code>CreatePollBody</code>. On the …\nCreate a builder for building <code>NewPollChoice</code>. On the …\nCreate a builder for building <code>EndPollRequest</code>. On the …\nCreate a builder for building <code>EndPollBody</code>. On the builder, …\nCreate a builder for building <code>GetPollsRequest</code>. On the …\nChannel points per vote\nNumber of Channel Points required to vote once with …\nNumber of Channel Points required to vote once with …\nSet if Channel Points voting is enabled\nIndicates if Channel Points can be used for voting. …\nIndicates if Channel Points can be used for voting.\nArray of the poll choices. Minimum: 2 choices. Maximum: 5 …\nArray of the poll choices.\nCreate a poll for a specific Twitch channel. <code>create-poll</code>\nTotal duration for the poll (in seconds). Minimum: 15. …\nTotal duration for the poll (in seconds).\nEnd a poll that is currently active.\nUTC timestamp for the poll’s end time. Set to null if …\nMaximum number of objects to return. Maximum: 20. Default: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet information about all polls or specific polls for a …\nID of the poll.\nID of a poll. Filters results to one or more specific …\nID of the poll.\nIDs of the polls to query.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>CreatePollRequest</code>\nPoll settings\nCreate a new <code>NewPollChoice</code>\nMake a new <code>EndPollRequest</code>\nEnd a poll that is currently active.\nUTC timestamp for the poll’s start time.\nThe poll status to be set.\nPoll status. Valid values are:\nQuestion displayed for the poll. Maximum: 60 characters.\nText displayed for the choice. Maximum: 25 characters.\nQuestion displayed for the poll.\nBody Parameters for Create Poll\nQuery Parameters for Create Poll\nReturn Values for Create Poll\nChoice settings for a poll\nID of the broadcaster.\nThe broadcaster running polls. Provided broadcaster_id …\nLogin of the broadcaster.\nName of the broadcaster.\nNumber of Channel Points required to vote once with …\nNumber of Channel Points required to vote once with …\nIndicates if Channel Points can be used for voting.\nIndicates if Channel Points can be used for voting. …\nArray of the poll choices.\nArray of the poll choices. Minimum: 2 choices. Maximum: 5 …\nTotal duration for the poll (in seconds).\nTotal duration for the poll (in seconds). Minimum: 15. …\nUTC timestamp for the poll’s end time. Set to null if …\nID of the poll.\nUTC timestamp for the poll’s start time.\nPoll status. Valid values are:\nQuestion displayed for the poll.\nQuestion displayed for the poll. Maximum: 60 characters.\nText displayed for the choice. Maximum: 25 characters.\nPoll is currently in progress.\nPoll is no longer visible on the channel.\nUnauthenticated: Missing/invalid Token\nPoll has reached its ended_at time.\nReturn Values for Update CustomReward\nBody Parameters for End Poll\nQuery Parameters for End Poll\nSomething went wrong determining the state.\nBad Request: Query/Body Parameter missing or invalid\nPoll is no longer visible to any user on Twitch.\nStatus of a poll\nPoll ended successfully.\nPoll has been manually terminated before its ended_at time.\nThe broadcaster running polls. Provided broadcaster_id …\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the poll.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe poll status to be set.\nPoll is currently in progress.\nPoll is no longer visible on the channel.\nPoll has reached its ended_at time.\nQuery Parameters for Get polls\nSomething went wrong determining the state.\nPoll is no longer visible to any user on Twitch.\nReturn Values for Get polls\nPoll choice\nStatus of a poll\nPoll has been manually terminated before its ended_at time.\nCursor for forward pagination\nNumber of votes received via Bits.\nThe broadcaster running polls. Provided broadcaster_id …\nID of the broadcaster.\nLogin of the broadcaster.\nName of the broadcaster.\nNumber of Channel Points required to vote once with …\nNumber of votes received via Channel Points.\nIndicates if Channel Points can be used for voting.\nArray of the poll choices.\nTotal duration for the poll (in seconds).\nUTC timestamp for the poll’s end time. Set to null if …\nMaximum number of objects to return. Maximum: 20. Default: …\nReturns the argument unchanged.\nID for the choice.\nID of a poll. Filters results to one or more specific …\nID of the poll.\nCalls <code>U::from(self)</code>.\nUTC timestamp for the poll’s start time.\nPoll status. Valid values are:\nText displayed for the choice.\nQuestion displayed for the poll.\nTotal number of votes received for the choice across all …\nQuery Parameters for Get predictions\nReturn Values for Get predictions\nCursor for forward pagination\nGet information about predictions for this broadcasters …\nThe broadcaster running Predictions. Provided …\nID of the broadcaster.\nLogin of the broadcaster.\nName of the broadcaster.\nCreate a builder for building <code>GetPredictionsRequest</code>. On …\nCreate a Channel Points Prediction for a specific Twitch …\nUTC timestamp for the Prediction’s start time.\nEnd a prediction that is currently active.\nUTC timestamp for when the Prediction ended. If the status …\nMaximum number of objects to return. Maximum: 20. Default: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet information about all predictions or specific …\nID of a Prediction. Filters results to one or more …\nID of the Prediction.\nIDs of a Predictions.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUTC timestamp for when the Prediction was locked. If the …\nArray of possible outcomes for the Prediction.\nTotal duration for the Prediction (in seconds).\nStatus of the Prediction.\nTitle for the Prediction.\nID of the winning outcome. If the status is ACTIVE, this …\nBody Parameters for Create Prediction\nQuery Parameters for Create Prediction\nReturn Values for Create Prediction\nChoice settings for a poll\nID of the broadcaster.\nThe broadcaster running Predictions. Provided …\nLogin of the broadcaster.\nName of the broadcaster.\nCreate a builder for building <code>CreatePredictionRequest</code>. On …\nCreate a builder for building <code>CreatePredictionBody</code>. On the …\nCreate a builder for building <code>NewPredictionOutcome</code>. On the …\nUTC timestamp for the Prediction’s start time.\nUTC timestamp for when the Prediction ended. If the status …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the Prediction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUTC timestamp for when the Prediction was locked. If the …\nCreate a new <code>CreatePredictionRequest</code>\nCreate a Channel Points Prediction for a specific Twitch …\nCreate a new <code>NewPredictionOutcome</code>\nArray of possible outcomes for the Prediction.\nArray of outcome objects with titles for the Prediction. …\nTotal duration for the Prediction (in seconds).\nTotal duration for the Prediction (in seconds). Minimum: …\nStatus of the Prediction.\nTitle for the Prediction.\nTitle for the Prediction. Maximum: 45 characters.\nText displayed for the choice. Maximum: 25 characters.\nID of the winning outcome. If the status is ACTIVE, this …\nUnauthenticated: Missing/invalid Token\nReturn Values for Update CustomReward\nBody Parameters for End Prediction\nQuery Parameters for End Prediction\nBad Request: Query/Body Parameter missing or invalid\nPrediction ended successfully.\nThe broadcaster running predictions. Provided …\nCreate a builder for building <code>EndPredictionRequest</code>. On the …\nCreate a builder for building <code>EndPredictionBody</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the prediction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a new <code>EndPredictionRequest</code>\nEnd given prediction that is currently active.\nThe Prediction status to be set. Valid values:\nID of the winning outcome for the Prediction\nID of the winning outcome for the Prediction. This …\nThe Prediction is active and viewers can make predictions.\nThe Prediction has been canceled and the Channel Points …\nQuery Parameters for Get predictions\nThe Prediction has been locked and viewers can no longer …\nReturn Values for Get predictions\nOutcome for the Prediction\nA prediction choice ID\nStatus of the Prediction\nA winning outcome has been chosen and the Channel Points …\nCursor for forward pagination\nThe broadcaster running Predictions. Provided …\nID of the broadcaster.\nLogin of the broadcaster.\nName of the broadcaster.\nNumber of Channel Points used for the outcome.\nColor for the outcome. Valid values: BLUE, PINK\nUTC timestamp for the Prediction’s start time.\nUTC timestamp for when the Prediction ended. If the status …\nMaximum number of objects to return. Maximum: 20. Default: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a newPredictionOutcomeIdfrom a static reference\nID for the outcome.\nID of a Prediction. Filters results to one or more …\nID of the Prediction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>PredictionOutcomeId</code> into a …\nUTC timestamp for when the Prediction was locked. If the …\nConstructs a new PredictionOutcomeId\nArray of possible outcomes for the Prediction.\nTotal duration for the Prediction (in seconds).\nStatus of the Prediction.\nUnwraps the underlying <code>String</code> value\nText displayed for outcome.\nTitle for the Prediction.\nArray of users who were the top predictors. null if none. …\nNumber of unique users that chose the outcome.\nID of the winning outcome. If the status is ACTIVE, this …\nQuery Parameters for Cancel A Raid\nReturn Values for Cancel A Raid\nQuery Parameters for Start A Raid\nReturn Values for Start A Raid\n204 - The pending raid was successfully canceled.\nCancel a pending raid on this broadcasters channel\nThe ID of the broadcaster that sent the raiding party.\nCreate a builder for building <code>CancelARaidRequest</code>. On the …\nCreate a builder for building <code>StartARaidRequest</code>. On the …\nCancel a pending raid. <code>cancel-a-raid</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>StartARaidRequest</code>\nRaid another channel by sending the broadcaster’s …\nQuery Parameters for Cancel A Raid\nReturn Values for Cancel A Raid\n204 - The pending raid was successfully canceled.\nThe ID of the broadcaster that sent the raiding party.\nQuery Parameters for Start A Raid\nReturn Values for Start A Raid\nBody parameters\nBody parameters\nBody parameters\nOptional scopes needed by this endpoint\nThe path to the endpoint relative to the helix root. eg. …\nA request is a Twitch endpoint, see New Twitch API …\nHelix endpoint DELETEs information\nHelix endpoint GETs information\nHelix endpoint PATCHs information\nHelix endpoint POSTs information\nHelix endpoint PUTs information\nResponse type. twitch’s response will  deserialize to …\nScopes needed for this endpoint\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nErrors that can occur during request processing.\nReturns bare URI for the request, NOT including query …\nReturns full URI for the request, including query …\nParse a response string into the response.\nParse a response string into the response.\nParse a response string into the response.\nParse a response string into the response.\nParse a response string into the response.\nParse response.\nParse response.\nParse response.\nParse response.\nParse response.\nDefines layout of the url parameters.\nErrors for <code>HelixClient::req_get</code> and similar functions.\nCould not create request\nCould not create request\nCustom error\n{0}\n{0}\ndeserialization failed when processing request response …\ndeserialization failed when processing request response …\ndeserialization failed when processing request response …\ndeserialization failed when processing request response …\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nfield serializer only supports strings, sequences, …\nCould not parse DELETE response\nGot error from DELETE response\nCould not parse GET response\nGot error from GET response\nCould not parse PATCH response\nGot error from PATCH response\nCould not parse POST response\nGot error from POST response\nCould not parse PUT response\nGot error from PUT response\nhttp crate returned an error\nRequest failed from reqwests side\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\nErrors that can happen when creating <code>http::Uri</code> for <code>Request</code>\ncould not assemble URI for request\nNo pagination found\npair serializer only supports strings, integers, floats, …\ncould not serialize request to query\nRequest failed from reqwests side\nErrors from the query serializer\nserialization of body failed\nserializer only supports structs and maps on top-level\nURI could not be parsed\ncould not assemble URI for request\ncould not parse response as utf8 when calling <code>GET {2}</code>\ncould not parse response as utf8 when calling <code>PUT {2}</code>\ncould not parse response as utf8 when calling <code>POST {2}</code>\ncould not parse response as utf8 when calling <code>POST {2}</code>\ncould not parse response as utf8 when calling <code>DELETE {2}</code>\nvalue serializer only supports primitive types\nBody sent to DELETE response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nBody sent to POST response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nBody sent to POST response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nBody sent to PUT response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nLocation where this was triggered\nLocation where this was triggered\nLocation where this was triggered\nLocation where this was triggered\nResponse retrieved from endpoint. Data is the type in …\nTwitch’s response field for <code>data</code>.\nGet first result of this response.\nGet the next page in the responses.\nGet a field from the response that is not part of <code>data</code>.\nCreate a new response.\nFields which are not part of the data response, but are …\nA cursor value, to be used in a subsequent request to …\nThe request that was sent, used for pagination.\nResponse would return this many results if fully …\nCreate a new response without pagination, total or other …\nThe category for a scheduled broadcast.\nBody Parameters for Create Channel Stream Schedule Segment\nQuery Parameters for Create Channel Stream Schedule Segment\nReturn Values for Delete Channel Stream Schedule Segment\nQuery Parameters for Delete Channel Stream Schedule Segment\nQuery Parameters for Get Channel Stream Schedule\nScheduled broadcasts for a specific channel given by Get …\nScheduled broadcast for a stream schedule.\n204 - User successfully deleted from list of channel …\nStream schedule settings updated successfully.\nReturn Values for Update Channel Stream Schedule\nQuery Parameters for Update Channel Stream Schedule\nInformation on Vacation Mode\nCursor for forward pagination: tells the server where to …\nCreate a single scheduled broadcast or a recurring …\nGet a broadcasters schedule\nUpdate the settings for a channel’s stream schedule.\nUser ID of the broadcaster who owns the channel streaming …\nUser ID of the broadcaster who owns the channel streaming …\nUser ID of the broadcaster who owns the channel streaming …\nUser ID of the broadcaster who owns the channel streaming …\nUser ID of the broadcaster.\nLogin of the broadcaster.\nDisplay name of the broadcaster.\nCreate a builder for building …\nCreate a builder for building …\nCreate a builder for building …\nCreate a builder for building …\nCreate a builder for building …\nUsed with recurring scheduled broadcasts. Specifies the …\nThe category for the scheduled broadcast. Set to null if …\nGame/Category ID for the scheduled broadcast.\nCreate a single scheduled broadcast or a recurring …\nDelete a single scheduled broadcast or a recurring …\nDuration of the scheduled broadcast in minutes from the …\nScheduled end time for the scheduled broadcast in RFC3339 …\nEnd time for vacation specified in RFC3339 format.\nSet amount of results returned per page.\nMaximum number of stream segments to return. Maximum: 25. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets all scheduled broadcasts or specific scheduled …\nSet the id for the request.\nThe ID of the streaming segment to delete.\nThe ID of the stream segment to return. Maximum: 100.\nThe ID for the scheduled broadcast.\nGame/category ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if the scheduled broadcast is recurring weekly.\nIndicates if the scheduled broadcast is recurring weekly.\nIndicates if Vacation Mode is enabled. Set to true to add …\nGame/category name.\nCreate a single scheduled broadcast or a recurring …\nDelete a single scheduled broadcast or a recurring …\nScheduled broadcasts for this stream schedule.\nSet the start_time for the request.\nStart time for the scheduled broadcast specified in …\nA timestamp in RFC3339 format to start returning stream …\nScheduled start time for the scheduled broadcast in …\nStart time for vacation specified in RFC3339 format.\nThe timezone of the application creating the scheduled …\nThe timezone for when the vacation is being scheduled …\nTitle for the scheduled broadcast. Maximum: 140 characters.\nTitle for the scheduled broadcast.\nUpdate the settings for a channel’s stream schedule. …\nUpdate a single scheduled broadcast or a recurring …\nSet the utc_offset for the request.\nA timezone offset for the requester specified in minutes. …\nIf Vacation Mode is enabled, this includes start and end …\nEnd time for vacation specified in RFC3339 format. …\nStart time for vacation specified in RFC3339 format. …\nBody Parameters for Create Channel Stream Schedule Segment\nQuery Parameters for Create Channel Stream Schedule Segment\nReturn Values for Create Channel Stream Schedule Segment\nUser ID of the broadcaster.\nUser ID of the broadcaster who owns the channel streaming …\nLogin of the broadcaster.\nDisplay name of the broadcaster.\nGame/Category ID for the scheduled broadcast.\nDuration of the scheduled broadcast in minutes from the …\nIndicates if the scheduled broadcast is recurring weekly.\nScheduled broadcasts for this stream schedule.\nStart time for the scheduled broadcast specified in …\nThe timezone of the application creating the scheduled …\nTitle for the scheduled broadcast. Maximum: 140 characters.\nIf Vacation Mode is enabled, this includes start and end …\nReturn Values for Delete Channel Stream Schedule Segment\nQuery Parameters for Delete Channel Stream Schedule Segment\n204 - User successfully deleted from list of channel …\nUser ID of the broadcaster who owns the channel streaming …\nThe ID of the streaming segment to delete.\nQuery Parameters for Get Channel Stream Schedule\nReturn Values for Get Channel Stream Schedule\nCursor for forward pagination: tells the server where to …\nUser ID of the broadcaster.\nUser ID of the broadcaster who owns the channel streaming …\nLogin of the broadcaster.\nDisplay name of the broadcaster.\nMaximum number of stream segments to return. Maximum: 25. …\nThe ID of the stream segment to return. Maximum: 100.\nScheduled broadcasts for this stream schedule.\nA timestamp in RFC3339 format to start returning stream …\nA timezone offset for the requester specified in minutes. …\nIf Vacation Mode is enabled, this includes start and end …\nStream schedule settings updated successfully.\nReturn Values for Update Channel Stream Schedule\nQuery Parameters for Update Channel Stream Schedule\nUser ID of the broadcaster who owns the channel streaming …\nIndicates if Vacation Mode is enabled. Set to true to add …\nThe timezone for when the vacation is being scheduled …\nEnd time for vacation specified in RFC3339 format. …\nStart time for vacation specified in RFC3339 format. …\nBody Parameters for Update Channel Stream Schedule Segment\nQuery Parameters for Update Channel Stream Schedule Segment\nReturn Values for Update Channel Stream Schedule Segment\nUser ID of the broadcaster.\nUser ID of the broadcaster who owns the channel streaming …\nLogin of the broadcaster.\nDisplay name of the broadcaster.\nCreate a builder for building …\nCreate a builder for building …\nGame/Category ID for the scheduled broadcast.\nDuration of the scheduled broadcast in minutes from the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ID of the streaming segment to update.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicated if the scheduled broadcast is canceled.\nUpdate a single scheduled broadcast or a recurring …\nScheduled broadcasts for this stream schedule.\nStart time for the scheduled broadcast specified in …\nThe timezone of the application creating the scheduled …\nTitle for the scheduled broadcast. Maximum: 140 characters.\nIf Vacation Mode is enabled, this includes start and end …\nA game or category as defined by Twitch\nReturn Values for Search Channels\nQuery Parameters for Search Categories\nQuery Parameters for Search Channels\nCursor for forward pagination: tells the server where to …\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nTemplate URL for the game’s box art.\nChannel language (Broadcaster Language field from the …\nLogin of the broadcaster.\nCreate a builder for building <code>SearchCategoriesRequest</code>. On …\nCreate a builder for building <code>SearchChannelsRequest</code>. On …\nDisplay name corresponding to user_id\nSet amount of results returned per page.\nSet amount of results returned per page.\nNumber of values to be returned per page. Limit: 100. …\nMaximum number of objects to return. Maximum: 100 Default: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the game being played on the stream\nName of the game being played on the stream.\nGame or category ID.\nChannel ID\nThe ID that IGDB uses to identify this game.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLive status\nGet live streams only\nFilter results for live streams only. Default: false\nGame name.\nSearch categories with the following query.\nSearch channels with the following query.\nURI encoded search query\nURL encoded search query\nReturns a list of games or categories that match the query …\nReturns a list of channels (users who have streamed within …\nUTC timestamp. (live only)\nShows tag IDs that apply to the stream (live only).See …\nThe tags applied to the channel.\nThumbnail URL of the stream. All image URLs have variable …\nchannel title\nReturn Values for Search Categories\nQuery Parameters for Search Categories\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nTemplate URL for the game’s box art.\nNumber of values to be returned per page. Limit: 100. …\nGame or category ID.\nThe ID that IGDB uses to identify this game.\nGame name.\nURI encoded search query\nReturn Values for Search Channels\nQuery Parameters for Search Channels\nCursor for forward pagination: tells the server where to …\nChannel language (Broadcaster Language field from the …\nLogin of the broadcaster.\nDisplay name corresponding to user_id\nMaximum number of objects to return. Maximum: 100 Default: …\nID of the game being played on the stream\nName of the game being played on the stream.\nChannel ID\nLive status\nFilter results for live streams only. Default: false\nURL encoded search query\nUTC timestamp. (live only)\nShows tag IDs that apply to the stream (live only).See …\nThe tags applied to the channel.\nThumbnail URL of the stream. All image URLs have variable …\nchannel title\nBody Parameters for Create Stream Marker\nQuery Parameters for Create Stream Marker\nReturn Value for Create Stream Marker\nQuery Parameters for Get Followed Streams\nQuery Parameters for Get Stream Key\nReturn Values for Get Stream Key\nQuery Parameters for Get Stream Markers\nQuery Parameters for Get Stream Tags\nQuery Parameters for Get Streams\nStream is live.\nStream not live\nReturn Values for Replace Stream Tags\nBody Parameters for Replace Stream Tags\nQuery Parameters for Replace Stream Tags\nReturn Values for Get Streams\nA marker on a video\nReturn Values for Get Stream Markers\nA video with markers\nGotten from <code>Stream.type_</code>\n204 - Stream Tags replaced successfully\nReturn Values for Get Stream Tags\nCursor for forward pagination: tells the server where to …\nCursor for forward pagination: tells the server where to …\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nID of the broadcaster whose stream key should be retrieved\nID of the stream whose tags are going to be fetched\nID of the stream for which tags are to be replaced.\nThe ID of the broadcaster that owns the channel. The ID …\nID of the stream whose tags are going to be fetched\nID of the stream for which tags are to be replaced.\nCreate a builder for building <code>CreateStreamMarkerRequest</code>. …\nCreate a builder for building <code>CreateStreamMarkerBody</code>. On …\nCreate a builder for building <code>GetFollowedStreamsRequest</code>. …\nCreate a builder for building <code>GetStreamKeyRequest</code>. On the …\nCreate a builder for building <code>GetStreamMarkersRequest</code>. On …\nCreate a builder for building <code>GetStreamTagsRequest</code>. On the …\nCreate a builder for building <code>GetStreamsRequest</code>. On the …\nCreate a builder for building <code>ReplaceStreamTagsRequest</code>. On …\nCreate a builder for building <code>ReplaceStreamTagsBody</code>. On …\nAdds a marker to a live stream. <code>create-stream-marker</code>\nThe UTC date and time (in RFC3339 format) of when the user …\nThe UTC date and time (in RFC3339 format) of when the user …\nA short description of the marker to help the user …\nA description that the user gave the marker to help them …\nThe description that the user gave the marker to help them …\nSet amount of results returned per page.\nSet amount of results returned per page.\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100. …\nMaximum number of objects to return. Maximum: 100. …\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns streams broadcasting a specified game ID. You can …\nID of the game being played on the stream.\nReturn streams with these Ids\nName of the game being played.\nGets information about active streams belonging to …\nGets the channel’s stream key. <code>get-stream-key</code>\nGets a list of markers from the user’s most recent …\nGets the list of tags for a specified stream (channel). …\nGets information about active streams. <code>get-streams</code>\nID of the tag.\nAn ID that identifies this marker.\nAn ID that identifies this marker.\nStream ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ntrue if the tag is auto-generated; otherwise, false . An …\nCheck if the stream is live or not\nIndicates if the broadcaster has specified their channel …\nStream language. You can specify up to 100 languages.\nStream language.\nAll localized descriptions of the tag.\nAll localized names of the tag.\nThe list of markers in this video. The list in ascending …\nCreate a new CreateStreamMarkerRequest\nCreate a new stream marker with a description\nThe relative offset (in seconds) of the marker from the …\nThe relative offset (in seconds) of the marker from the …\nApplies specified tags to a specified stream, overwriting …\nUTC timestamp.\nThe channel’s stream key.\nIDs of tags to be applied to the stream.\nShows tag IDs that apply to the stream.\nIDs of tags to be applied to the stream.\nThe tags applied to the stream.\nThumbnail URL of the stream. All image URLs have variable …\nStream title.\nStream type: “live” or “” (in case of error).\nA URL that opens the video in Twitch Highlighter.\nCreate a new stream marker without a description\nGet a users followed streams.\nReturn stream markers from the most recent video of the …\nThe ID of the broadcaster that’s streaming content. This …\nReturns streams broadcast by one or more specified user …\nA user ID. The request returns the markers from this …\nThe ID of the user that created the marker.\nReturns streams broadcast by one or more specified user …\nID of the user who is streaming.\nReturn streams for specified user ids\nThe user’s login name.\nReturns streams broadcast by one or more specified user …\nLogin of the user who is streaming.\nReturn streams for specified users by nickname\nThe user’s display name.\nDisplay name corresponding to user_id.\nReturn stream markers for a specific video.\nA video on demand (VOD)/video ID. The request returns the …\nAn ID that identifies this video.\nA list of videos that contain markers. The list contains a …\nNumber of viewers watching the stream at the time of the …\nBody Parameters for Create Stream Marker\nQuery Parameters for Create Stream Marker\nReturn Value for Create Stream Marker\nThe UTC date and time (in RFC3339 format) of when the user …\nA short description of the marker to help the user …\nA description that the user gave the marker to help them …\nAn ID that identifies this marker.\nThe relative offset (in seconds) of the marker from the …\nThe ID of the broadcaster that’s streaming content. This …\nQuery Parameters for Get Followed Streams\nReturn Values for Get Followed Streams\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nMaximum number of objects to return. Maximum: 100. …\nID of the game being played on the stream.\nName of the game being played.\nStream ID.\nIndicates if the broadcaster has specified their channel …\nStream language.\nUTC timestamp.\nShows tag IDs that apply to the stream.\nThe tags applied to the stream.\nThumbnail URL of the stream. All image URLs have variable …\nStream title.\nStream type: “live” or “” (in case of error).\nID of the user who is streaming.\nReturns streams broadcast by one or more specified user …\nLogin of the user who is streaming.\nDisplay name corresponding to user_id.\nNumber of viewers watching the stream at the time of the …\nQuery Parameters for Get Stream Key\nReturn Values for Get Stream Key\nThe ID of the broadcaster that owns the channel. The ID …\nThe channel’s stream key.\nQuery Parameters for Get Stream Markers\nA marker on a video\nReturn Values for Get Stream Markers\nA video with markers\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nThe UTC date and time (in RFC3339 format) of when the user …\nThe description that the user gave the marker to help them …\nMaximum number of objects to return. Maximum: 100. …\nAn ID that identifies this marker.\nThe list of markers in this video. The list in ascending …\nThe relative offset (in seconds) of the marker from the …\nA URL that opens the video in Twitch Highlighter.\nA user ID. The request returns the markers from this …\nThe ID of the user that created the marker.\nThe user’s login name.\nThe user’s display name.\nA video on demand (VOD)/video ID. The request returns the …\nAn ID that identifies this video.\nA list of videos that contain markers. The list contains a …\nQuery Parameters for Get Stream Tags\nReturn Values for Get Stream Tags\nID of the stream whose tags are going to be fetched\nID of the tag.\ntrue if the tag is auto-generated; otherwise, false . An …\nAll localized descriptions of the tag.\nAll localized names of the tag.\nQuery Parameters for Get Streams\nReturn Values for Get Streams\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nMaximum number of objects to return. Maximum: 100. …\nReturns streams broadcasting a specified game ID. You can …\nID of the game being played on the stream.\nName of the game being played.\nStream ID.\nIndicates if the broadcaster has specified their channel …\nStream language. You can specify up to 100 languages.\nStream language.\nUTC timestamp.\nShows tag IDs that apply to the stream.\nThe tags applied to the stream.\nThumbnail URL of the stream. All image URLs have variable …\nStream title.\nStream type: “live” or “” (in case of error).\nReturns streams broadcast by one or more specified user …\nID of the user who is streaming.\nReturns streams broadcast by one or more specified user …\nLogin of the user who is streaming.\nDisplay name corresponding to user_id.\nNumber of viewers watching the stream at the time of the …\nReturn Values for Replace Stream Tags\nBody Parameters for Replace Stream Tags\nQuery Parameters for Replace Stream Tags\n204 - Stream Tags replaced successfully\nID of the stream for which tags are to be replaced.\nIDs of tags to be applied to the stream.\nReturn Values for Get Broadcaster Subscriptions\nReturn Values for Get Broadcaster Subscriptions Events\nQuery Parameters for Check User Subscription\nQuery Parameters for Get Broadcaster Subscriptions Events\nQuery Parameters for Get Broadcaster Subscriptions\nReturn Values for Check User Subscription\nCursor for forward pagination: tells the server where to …\nCursor for forward pagination: tells the server where to …\nChecks subscribed users to this specific channel.\nGet a broadcasters subscribers\nGet events for this broadcaster\nUser ID of the broadcaster. Must match the User ID in the …\nUser ID of the broadcaster.\nUser ID of the broadcaster. Must match the User ID in the …\nUser ID of the broadcaster.\nMust match the User ID in the Bearer token.\nLogin of the broadcaster.\nLogin of the broadcaster.\nDisplay name of the broadcaster.\nDisplay name of the broadcaster.\nCreate a builder for building <code>CheckUserSubscriptionRequest</code>.\nCreate a builder for building …\nCreate a builder for building …\nChecks if a specific user is subscribed to a specific …\nReturns <code>broadcaster_id</code>, <code>broadcaster_name</code>, <code>user_id</code>, …\nRFC3339 formatted timestamp for events.\n<code>subscriptions.subscribe</code>, <code>subscriptions.unsubscribe</code> or …\nSet amount of results returned per page.\nNumber of values to be returned per page. Limit: 100. …\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all of a broadcaster’s subscriptions. …\nReturns a list of subscription events. …\nUser ID of the broadcaster.\nLogin of the gifter (if is_gift is true).\nLogin of the gifter.\nDisplay name of the gifter (if is_gift is true).\nDisplay name of the gifter.\nRetreive a single event by event ID\nEvent ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if the subscription is a gift.\nDetermines if the subscription is a gift subscription.\nName of the subscription.\ncheck for specific users in broadcasters subscriptions\nSubscription tier. 1000 is tier 1, 2000 is tier 2, and …\nType of subscription (Tier 1, Tier 2, Tier 3). 1000 = Tier …\nUnique identifier of account to get subscription status …\nUnique identifier of account to get subscription status …\nID of the subscribed user.\nFilters the results and only returns a status object for …\nFilter the results for specific users.\nFilter the results for specific users.\nLogin of the subscribed user.\nDisplay name of the subscribed user.\nReturns the version of the endpoint.\nQuery Parameters for Check User Subscription\nReturn Values for Check User Subscription\nUser ID of the broadcaster. Must match the User ID in the …\nUser ID of the broadcaster.\nLogin of the broadcaster.\nDisplay name of the broadcaster.\nLogin of the gifter (if is_gift is true).\nDisplay name of the gifter (if is_gift is true).\nIndicates if the subscription is a gift.\nSubscription tier. 1000 is tier 1, 2000 is tier 2, and …\nUnique identifier of account to get subscription status …\nReturn Values for Get Broadcaster Subscriptions\nErrors when retrieving <code>points</code> in Get Broadcaster …\nDeserialization error\nQuery Parameters for Get Broadcaster Subscriptions\n<code>points</code> not found in the response\nCursor for forward pagination: tells the server where to …\nUser ID of the broadcaster. Must match the User ID in the …\nUser ID of the broadcaster.\nLogin of the broadcaster.\nDisplay name of the broadcaster.\nNumber of values to be returned per page. Limit: 100. …\nReturns the argument unchanged.\nUser ID of the broadcaster.\nLogin of the gifter.\nDisplay name of the gifter.\nCalls <code>U::from(self)</code>.\nDetermines if the subscription is a gift subscription.\nName of the subscription.\nType of subscription (Tier 1, Tier 2, Tier 3). 1000 = Tier …\nUnique identifier of account to get subscription status …\nID of the subscribed user.\nLogin of the subscribed user.\nDisplay name of the subscribed user.\nReturn Values for Get Broadcaster Subscriptions Events\nEvent data for broadcaster events.\nType of event\nQuery Parameters for Get Broadcaster Subscriptions Events\nUser shared a subscription in channel\nUser has subscribed\nUser has unsubscribed\nCursor for forward pagination: tells the server where to …\nMust match the User ID in the Bearer token.\nUser ID of the broadcaster.\nDisplay name of the broadcaster.\nReturns <code>broadcaster_id</code>, <code>broadcaster_name</code>, <code>user_id</code>, …\nRFC3339 formatted timestamp for events.\n<code>subscriptions.subscribe</code>, <code>subscriptions.unsubscribe</code> or …\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the subscribed user.\nDisplay name of the gifter.\nRetreive a single event by event ID\nEvent ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if the subscription is a gift subscription.\nName of the subscription.\nType of subscription (Tier 1, Tier 2, Tier 3). 1000 = Tier …\nFilters the results and only returns a status object for …\nID of the subscribed user.\nDisplay name of the subscribed user.\nReturns the version of the endpoint.\nTag is auto-generated or not.\nWas not auto-generated\nQuery Parameters for Get All Stream Tags\nQuery Parameters for Get Stream Tags\nReturn Values for Get All Stream Tags\nLanguage code, formatted as 2 letter language by ISO …\nLanguage code, formatted as 2 letter language by ISO …\nWas auto-generated\nA stream tag as defined by Twitch.\nCursor for forward pagination: tells the server where to …\nProvides access to the underlying value as a string slice.\nID of the stream whose tags are going to be fetched\nCreate a builder for building <code>GetAllStreamTagsRequest</code>. On …\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new TagLanguage from a static reference\nTransparently reinterprets the static string slice as a …\nTransparently reinterprets the string slice as a …\nGets the list of all stream tags defined by Twitch, …\nGets the list of tags for a specified stream (channel). …\nID of the tag.\nID of the tag.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>TagLanguage</code> into a <code>Box&lt;TagLanguageRef&gt;</code>\nConverts a <code>Box&lt;TagLanguageRef&gt;</code> into a <code>TagLanguage</code> without …\ntrue if the tag is auto-generated; otherwise, false . An …\ntrue if the tag is auto-generated; otherwise, false . An …\nAll localized descriptions of the tag.\nAll localized descriptions of the tag.\nAll localized names of the tag.\nAll localized names of the tag.\nConstructs a new TagLanguage\nID of a tag. Multiple IDs can be specified. If provided, …\nFilter the results for specific tag.\nUnwraps the underlying <code>String</code> value\nQuery Parameters for Get All Stream Tags\nReturn Values for Get All Stream Tags\nCursor for forward pagination: tells the server where to …\nMaximum number of objects to return. Maximum: 100. …\nID of the tag.\ntrue if the tag is auto-generated; otherwise, false . An …\nAll localized descriptions of the tag.\nAll localized names of the tag.\nID of a tag. Multiple IDs can be specified. If provided, …\nQuery Parameters for Get Stream Tags\nReturn Values for Get Stream Tags\nID of the stream whose tags are going to be fetched\nID of the tag.\ntrue if the tag is auto-generated; otherwise, false . An …\nAll localized descriptions of the tag.\nAll localized names of the tag.\nInformation about a team. Get team <code>members</code> with …\nURL of the Team background <code>image</code>.\nURL for the Team banner.\nDate and time the Team was created.\nReturns the argument unchanged.\nGets information for a specific Twitch Team. <code>get-teams</code>\nGets information for a specific Twitch Team. <code>get-teams</code>\nTeam ID.\nTeam description.\nCalls <code>U::from(self)</code>.\nTeam display name.\nTeam name.\nImage URL for the Team logo.\nDate and time the Team was last updated.\nReturn Values for Get Channel Teams\nQuery Parameters for Get Channel Teams\nGet the team of this specific broadcaster\nTeam ID.\nUser ID of the broadcaster.\nLogin of the broadcaster.\nDisplay name of the broadcaster.\nCreate a builder for building <code>GetChannelTeamsRequest</code>. On …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTeam information\nQuery Parameters for Get Teams\nReturn Values for Get Teams\nCreate a builder for building <code>GetTeamsRequest</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet team with this <code>TeamId</code>\nTeam ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet team with this name\nTeam name.\nInformation about the team.\nUsers in the team.\nThe slot is configured\nReturn Values for Block User\nQuery Parameters for Block User\nDisplays as part of the video, taking up part of the …\nReturn Values for Get User Extensions\nReturn Values for Get User Active Extensions\nA slot for an extension to be active in\nInner body for Update User Extensions\nWhere an extension can appear.\nDescribes a follow relationship\nQuery Parameters for Get User Active Extensions\nQuery Parameters for Get Users Block List\nQuery Parameters for Get User Extensions\nQuery Parameters for Get Users Follows\nQuery Parameters for Get Users\nThe slot is not configured\nDisplays on mobile\nDisplays on top of the whole video as a transparent …\nDisplays in a box under the video.\n204 - User blocked successfully.\n204 - User unblocked successfully.\nReturn Values for Unblock User\nQuery Parameters for Unblock User\nAn unknown type, contains the raw string provided by …\nBody for Update User Extensions\nQuery Parameters for Update User Extensions\nQuery Parameters for Update User\nReturn Values for Get Users\nReturn Values for Get Users Block List\nReturn Values for Get Users Follows\nCursor for forward pagination: tells the server where to …\nCursor for forward pagination: tells the server where to …\nBlocks the specified user on behalf of the authenticated …\nBlock a user\nGet a specified user’s block list\nUser ID for a Twitch user.\nUser’s broadcaster type: “partner”, “affiliate”, …\nCreate a builder for building <code>BlockUserRequest</code>. On the …\nCreate a builder for building …\nCreate a builder for building <code>GetUserBlockListRequest</code>. On …\nCreate a builder for building <code>GetUserExtensionsRequest</code>. On …\nCreate a builder for building <code>GetUsersRequest</code>. On the …\nCreate a builder for building <code>GetUsersFollowsRequest</code>. On …\nCreate a builder for building <code>UnblockUserRequest</code>. On the …\nCreate a builder for building <code>UpdateUserRequest</code>. On the …\nCreate a builder for building <code>UpdateUserExtensionsRequest</code>. …\nCreate a builder for building <code>UpdateUserExtensionsBody</code>. On …\nCreate a builder for building <code>ExtensionSpecification</code>. On …\nA Boolean value that determines whether the extension is …\nSet the component extensions\nA dictionary that contains the data for a video-component …\nA dictionary that contains the data for a video-component …\nDate when the user was created.\nThe specification for the user’s extensions (which …\nUpdate the description of the current user\nUser’s channel description.\nThe string to update the channel’s description to. The …\nDisplay name of the blocked user.\nUser’s display name.\nUser’s email address. Returned if the request includes …\nReturns an empty <code>GetUsersFollowsRequest</code>\nUpdate nothing (returns the current user)\nMaximum number of objects to return. Maximum: 100. …\nMaximum number of objects to return. Maximum: 100. …\nThe follow relationships returned by this endpoint on this …\nDate and time when the from_id user followed the to_id …\nGet the followers of <code>to_id</code>\nGet the broadcasters that <code>from_id</code> is following\nCheck if user follows a specific broadcaster\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUser ID. The request returns information about users who …\nID of the user following the to_id user.\nLogin of the user following the to_id user.\nDisplay name corresponding to from_id.\nGets the active extensions that the broadcaster has …\nGets a specified user’s block list. The list is sorted …\nGets a list of all extensions (both active and inactive) …\nGets information about one or more specified Twitch users. …\nGets information on follow relationships between two …\nAn ID that identifies the extension.\nUser ID. Multiple user IDs can be specified. Limit: 100.\nUser’s ID.\nGet multiple user by their <code>UserId</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUser login name. Multiple login names can be specified. …\nUser’s login name.\nGet multiple user by their <code>UserName</code>\nThe extension’s name.\nGets the active extensions that the broadcaster has …\nGet a list of all extensions (both active and inactive) …\nReturns an empty <code>GetUsersRequest</code>\nCreate a new update request\nCreate a new specificaton for the user’s extensions\nCreate an empty specification\nURL of the user’s offline image.\nSet the overlay extensions\nA dictionary that contains the data for a video-overlay …\nA dictionary that contains the data for a video-overlay …\nSet the panel extensions\nA dictionary that contains the data for a panel extension.\nA dictionary that contains the data for a panel extension.\nURL of the user’s profile image.\nSet the reason for this block.\nReason for blocking the user. Valid values: “spam”, “…\nSet the source_context for this block.\nSource context for blocking the user. Valid values: “chat…\nUser ID of the follower\nUser ID of the follower\nUser ID. The request returns information about users who …\nID of the user being followed by the from_id user.\nLogin of the user being followed by the from_id user.\nDisplay name corresponding to to_id.\nTotal number of items returned in all pages.\nThe extension types that you can activate for this …\nUser’s type: “staff”, “admin”, “global_mod”, …\nUnblocks the specified user on behalf of the authenticated …\nCreate a new unblock request\nUpdates the specified user’s information.\nUpdates the specified user’s information.\nGets the active extensions that the user has installed for …\nThe ID of the broadcaster whose active extensions you want …\nUser ID of the blocked user.\nLogin of the blocked user.\nThe extension’s version.\nTotal number of views of the user’s channel.\nReturn Values for Block User\nQuery Parameters for Block User\nChat\nHarassment\nOther\nReason for blocking the user.\nSource context for blocking the user.\nSpam\n204 - User blocked successfully.\nWhisper\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReason for blocking the user. Valid values: “spam”, “…\nSource context for blocking the user. Valid values: “chat…\nUser ID of the follower\nAn active extension slot\nAn active extension slot where the extension can be …\nReturn Values for Get User Active Extensions\nQuery Parameters for Get User Active Extensions\nA dictionary that contains the data for a video-component …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn ID that identifies the extension.\nAn ID that identifies the extension.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe extension’s name.\nThe extension’s name.\nA dictionary that contains the data for a video-overlay …\nA dictionary that contains the data for a panel extension.")