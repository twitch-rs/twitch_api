searchState.loadedDescShard("twitch_api", 2, "Timestamp of when the unban request was created.\nSet amount of results returned per page.\nThe maximum number of items to return per page in response\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnban request ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ID of the broadcaster or a user that has permission to …\nUser ID of moderator who approved/denied the request.\nThe moderator’s login name.\nThe moderator’s display name.\nGet Unban Requests in a broadcasters channel filtered by a …\nText input by the resolver (moderator) of the unban. …\nTimestamp of when moderator/broadcaster approved or denied …\nFilter by a status.\nStatus of the request.\nText of the request from the requesting user.\nFilter for unban requests from a specific user\nThe ID used to filter what unban requests are returned.\nUser ID of the requestor who is asking for an unban.\nThe user’s login name.\nThe user’s display name.\nQuery Parameters for Get VIPs\nReturn Values for Get VIPs\nThe cursor used to get the next page of results. The …\nThe ID of the broadcaster whose list of VIPs you want to …\nThe maximum number of items to return per page in the …\nFilters the list for specific VIPs. To specify more than …\nAn ID that uniquely identifies the VIP user.\nThe user’s login name.\nThe user’s display name.\nAllow the message\nAction to take for a message.\nDeny the message\nReturn Values for Manage Held AutoMod Messages\nBody Parameters for Manage Held AutoMod Messages\nQuery Parameters for Manage Held AutoMod Messages\nSuccessfully approved or denied the message\nThe action to take for the message. Must be “ALLOW” or …\nCreate a builder for building …\nCreate a builder for building <code>ManageHeldAutoModMessagesBody</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nID of the message to be allowed or denied. These message …\nCreate a new <code>ManageHeldAutoModMessagesRequest</code>\nCreate a new <code>ManageHeldAutoModMessagesBody</code>\nThe moderator who is approving or rejecting the held …\nReturn Values for Remove Blocked Terms\nQuery Parameters for Remove Blocked Terms\n204 - Term removed successfully.\nThe ID of the broadcaster that owns the list of blocked …\nCreate a builder for building <code>RemoveBlockedTermRequest</code>. On …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ID of the blocked term you want to delete.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ID of a user that has permission to moderate the …\nRemove blocked term\nQuery Parameters for Remove Channel Moderator\nReturn Values for Remove Channel Moderator\nSuccessfully removed the moderator.\nThe ID of the broadcaster that owns the chat room.\nCreate a builder for building <code>RemoveChannelModeratorRequest</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ID of the user to remove as a moderator from the …\nRemove moderator\nQuery Parameters for Remove Channel VIP\nReturn Values for Remove Channel VIP\nSuccessfully removed the VIP.\nThe ID of the broadcaster that’s removing VIP status …\nThe ID of the user to remove as a VIP from the …\nThe request has been approved and the user acknowledged …\nThe request has been approved by a moderator/broadcaster\nThe user cancelled the request\nThe request has been denied by a moderator/broadcaster\nThe request has been created, but not yet resolved\nQuery Parameters for Resolve Unban Request\nReturn Values for Get Unban Requests\nThe status of an unban request\nApprove an unban request\nUser ID of broadcaster whose channel is receiving the …\nThe ID of the broadcaster whose channel is approving or …\nThe broadcaster’s login name.\nThe broadcaster’s display name.\nCreate a builder for building <code>ResolveUnbanRequest</code>. On the …\nTimestamp of when the unban request was created.\nDeny an unban request\nReturns the argument unchanged.\nUnban request ID.\nCalls <code>U::from(self)</code>.\nUser ID of moderator who approved/denied the request.\nThe ID of the broadcaster or a user that has permission to …\nThe moderator’s login name.\nThe moderator’s display name.\nResolve an unban request\nSet the resolution text for a request\nText input by the resolver (moderator) of the unban. …\nMessage supplied by the unban request resolver. The …\nTimestamp of when moderator/broadcaster approved or denied …\nStatus of the request.\nResolution status.\nText of the request from the requesting user.\nThe ID of the Unban Request to resolve.\nUser ID of the requestor who is asking for an unban.\nThe user’s login name.\nThe user’s display name.\nUnban was successful\nQuery Parameters for Unban User\nReturn Values for Unban User\nThe ID of the broadcaster whose chat room the user is …\nCreate a builder for building <code>UnbanUserRequest</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ID of a user that has permission to moderate the …\nRemove the ban or timeout that was placed on the specified …\nThe ID of the user to remove the ban or timeout from.\nReturn Values for Get AutoMod Settings\nSet the individual levels for each setting\nSet the <code>overall_level</code>\nBody Parameters for Update AutoMod Settings\nSet the individual levels for each setting\nQuery Parameters for Update AutoMod Settings\nThe Automod level for hostility involving aggression.\nThe Automod level for hostility involving aggression.\nThe broadcaster’s ID.\nThe ID of the broadcaster whose AutoMod settings you want …\nCreate a builder for building <code>UpdateAutoModSettingsRequest</code>.\nCreate a builder for building …\nThe Automod level for hostility involving name calling or …\nThe Automod level for hostility involving name calling or …\nThe Automod level for discrimination against disability.\nThe Automod level for discrimination against disability.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an <code>Individual</code> from AutoModSettings\nConstructs an update on individual settings from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Automod level for discrimination against women.\nThe Automod level for discrimination against women.\nThe moderator’s ID.\nThe ID of the broadcaster or a user that has permission to …\nUpdate the AutoMod settings on the specified channel as …\nSet the <code>overall_level</code>\nThe default AutoMod level for the broadcaster. This field …\nThe Automod level for racial discrimination.\nThe Automod level for racial discrimination.\nThe Automod level for sexual content.\nThe Automod level for sexual content.\nThe AutoMod level for discrimination based on sexuality, …\nThe AutoMod level for discrimination based on sexuality, …\nThe Automod level for profanity.\nThe Automod level for profanity.\nThe default AutoMod level for the broadcaster.\nReturn Values for Get Shield Mode Status\nBody Parameters for Update Shield Mode Status\nQuery Parameters for Update Shield Mode Status\nThe ID of the broadcaster whose Shield Mode you want to …\nCreate a builder for building <code>UpdateShieldModeStatusRequest</code>…\nCreate a builder for building <code>UpdateShieldModeStatusBody</code>. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet status of shield mode\nA Boolean value that determines whether Shield Mode is …\nA Boolean value that determines whether to activate Shield …\nInformation about the last activated shield mode\nThe ID of the broadcaster or a user that is one of the …\nSet the shield mode status on specified channel as the …\nReturn Values for Warn Chat User\nBody Parameters for Warn Chat User\nQuery Parameters for Warn Chat User\nThe ID of the broadcaster whose chat room the user is …\nThe broadcaster whose chat room the user was warned in.\nCreate a builder for building <code>WarnChatUserRequest</code>. On the …\nCreate a builder for building <code>WarnChatUserBody</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ID of a user that has permission to moderate the …\nThe moderator that warned the user.\nWarn a user on this channel\nCreate a new <code>WarnChatUserBody</code>\nThe reason the user is being warned.\nThe reason provided for the warning.\nThe ID of the user to warn.\nThe user that was warned.\nCancelled reward - the reward has been cancelled before …\nBody Parameters for Create Custom Rewards\nQuery Parameters for Create Custom Rewards\nReturn Values for Create Custom Rewards\nReturn Values for Get Custom Reward\nReturn Values for Get Custom Reward Redemption\nCustom reward redemption statuses: UNFULFILLED, FULFILLED …\nReturn Values for Delete CustomReward\nQuery Parameters for Delete CustomReward\nFulfilled reward - the user has claimed it and the reward …\nQuery Parameters for Get Custom Reward Redemption\nQuery Parameters for Get Custom Reward\nReward deleted\n200 - OK\nUnfulfilled reward - the user has claimed it but it is …\nBody Parameters for Update Custom Rewards\nQuery Parameters for Update Custom Rewards\nBody Parameters for Update Redemption Status\nFIXME: Returns an object. Return Values for Update …\nQuery Parameters for Update Redemption Status\nCursor for forward pagination: tells the server where to …\nCustom background color for the reward. Format: Hex with # …\nCustom background color for the reward. Format: Hex with # …\nCustom background color for the reward. Format: Hex with # …\nCustom background color for the reward. Format: Hex with # …\nID of the channel the reward is for\nProvided broadcaster_id must match the user_id in the auth …\nProvided broadcaster_id must match the user_id in the auth …\nProvided broadcaster_id must match the user_id in the auth …\nID of the channel the reward is for\nProvided broadcaster_id must match the user_id in the auth …\nThe id of the broadcaster that the reward belongs to.\nProvided broadcaster_id must match the user_id in the auth …\nProvided broadcaster_id must match the user_id in the auth …\nLogin of the channel the reward is for\nLogin of the channel the reward is for\nBroadcaster’s user login name.\nDisplay name of the channel the reward is for\nDisplay name of the channel the reward is for\nThe display name of the broadcaster that the reward …\nTimestamp of the cooldown expiration. Null if the reward …\nTimestamp of the cooldown expiration. Null if the reward …\nThe cost of the reward\nThe cost of the reward\nThe cost of the reward\nThe cost of the reward\nAdds a specified user to the followers of a specified …\nSet of default images of 1x, 2x and 4x sizes for the …\nSet of default images of 1x, 2x and 4x sizes for the …\nDeletes a Custom Reward on a channel. <code>delete-custom-reward</code>\nNumber of results to be returned when getting the …\nReturns the argument unchanged.\nReturns a list of Custom Reward objects for the Custom …\nReturns Custom Reward Redemption objects for a Custom …\nThe cooldown in seconds if enabled\nThe cooldown in seconds if enabled\nWhether a cooldown is enabled and what the cooldown is. { …\nWhether a cooldown is enabled and what the cooldown is. { …\nID of the reward\nID of the Custom Reward to delete, must match a Custom …\nWhen used, this parameter filters the results and only …\nID of the reward\nA list of IDs to filter the redemptions by.\nThe ID of the redemption.\nID of the Custom Reward to update, must match a Custom …\nID of the Custom Reward Redemption to update, must match a …\nSet of custom images of 1x, 2x and 4x sizes for the reward …\nSet of custom images of 1x, 2x and 4x sizes for the reward …\nCalls <code>U::from(self)</code>.\nIs the reward currently enabled, if false the reward …\nIs the reward currently enabled, if false the reward …\nIs the reward currently enabled, if false the reward …\nIs the reward currently enabled, if false the reward …\nWhether a cooldown is enabled. Defaults to false.\nWhether a cooldown is enabled. Defaults to false.\nIs the reward currently in stock, if false viewers can’t …\nIs the reward currently in stock, if false viewers can’t …\nWhether a maximum per stream is enabled. Defaults to false.\nWhether a maximum per stream is enabled\nWhether a maximum per user per stream is enabled. Defaults …\nWhether a maximum per user per stream is enabled. Defaults …\nIs the reward currently paused, if true viewers can’t …\nIs the reward currently paused, if true viewers can’t …\nIs the reward currently paused, if true viewers can’t …\nDoes the user need to enter information when redeeming the …\nDoes the user need to enter information when redeeming the …\nDoes the user need to enter information when redeeming the …\nDoes the user need to enter information when redeeming the …\nThe maximum number per stream if enabled\nThe maximum number per stream if enabled\nWhether a maximum per stream is enabled and what the …\nWhether a maximum per stream is enabled and what the …\nThe maximum number per user per stream if enabled\nThe maximum number per user per stream if enabled\nWhether a maximum per user per stream is enabled and what …\nWhether a maximum per user per stream is enabled and what …\nWhen set to true, only returns custom rewards that the …\nThe prompt for the viewer when they are redeeming the …\nThe prompt for the viewer when they are redeeming the …\nThe prompt for the viewer when they are redeeming the …\nThe prompt for the viewer when they are redeeming the …\nRFC3339 timestamp of when the reward was redeemed.\nThe number of redemptions redeemed during the current live …\nThe number of redemptions redeemed during the current live …\nBasic information about the Custom Reward that was …\nWhen ID is not provided, this parameter returns paginated …\nID of the Custom Reward the redemptions to be updated are …\nShould redemptions be set to FULFILLED status immediately …\nShould redemptions be set to FULFILLED status immediately …\nShould redemptions be set to FULFILLED status immediately …\nShould redemptions be set to FULFILLED status immediately …\nThe order to sort redemptions by.\nWhen id is not provided, this param is required and …\nOne of UNFULFILLED, FULFILLED or CANCELED\nThe new status to set redemptions to. Can be either …\nThe title of the reward\nThe title of the reward\nThe title of the reward\nThe title of the reward\nUpdates a Custom Reward created on a channel.\nUpdates the status of Custom Reward Redemption objects on …\nThe ID of the user that redeemed the reward\nThe user input provided. Empty string if not provided.\nThe login of the user who redeemed the reward.\nThe display name of the user that redeemed the reward.\nBody Parameters for Create Custom Rewards\nQuery Parameters for Create Custom Rewards\nReturn Values for Create Custom Rewards\nCustom background color for the reward. Format: Hex with # …\nCustom background color for the reward. Format: Hex with # …\nChannel to create reward on\nID of the channel the reward is for\nProvided broadcaster_id must match the user_id in the auth …\nLogin of the channel the reward is for\nDisplay name of the channel the reward is for\nCreate a builder for building <code>CreateCustomRewardRequest</code>. …\nCreate a builder for building <code>CreateCustomRewardBody</code>. On …\nTimestamp of the cooldown expiration. Null if the reward …\nThe cost of the reward\nThe cost of the reward\nSet of default images of 1x, 2x and 4x sizes for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe cooldown in seconds if enabled\nWhether a cooldown is enabled and what the cooldown is. { …\nID of the reward\nSet of custom images of 1x, 2x and 4x sizes for the reward …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the reward currently enabled, if false the reward …\nIs the reward currently enabled, if false the reward …\nWhether a cooldown is enabled. Defaults to false.\nIs the reward currently in stock, if false viewers can’t …\nWhether a maximum per stream is enabled. Defaults to false.\nWhether a maximum per user per stream is enabled. Defaults …\nIs the reward currently paused, if true viewers can’t …\nDoes the user need to enter information when redeeming the …\nDoes the user need to enter information when redeeming the …\nThe maximum number per stream if enabled\nWhether a maximum per stream is enabled and what the …\nThe maximum number per user per stream if enabled\nWhether a maximum per user per stream is enabled and what …\nReward to create with title.\nThe prompt for the viewer when they are redeeming the …\nThe prompt for the viewer when they are redeeming the …\nThe number of redemptions redeemed during the current live …\nShould redemptions be set to FULFILLED status immediately …\nShould redemptions be set to FULFILLED status immediately …\nThe title of the reward\nThe title of the reward\nReturn Values for Delete CustomReward\nQuery Parameters for Delete CustomReward\nReward deleted\nProvided broadcaster_id must match the user_id in the auth …\nCreate a builder for building <code>DeleteCustomRewardRequest</code>. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the Custom Reward to delete, must match a Custom …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReward to delete\nReturn Values for Get Custom Reward\nQuery Parameters for Get Custom Reward\nCustom background color for the reward. Format: Hex with # …\nRewards on this broadcasters channel\nProvided broadcaster_id must match the user_id in the auth …\nID of the channel the reward is for\nLogin of the channel the reward is for\nDisplay name of the channel the reward is for\nCreate a builder for building <code>GetCustomRewardRequest</code>. On …\nTimestamp of the cooldown expiration. Null if the reward …\nThe cost of the reward\nSet of default images of 1x, 2x and 4x sizes for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether a cooldown is enabled and what the cooldown is. { …\nWhen used, this parameter filters the results and only …\nID of the reward\nGet rewards with these ids. Maximum 50\nSet of custom images of 1x, 2x and 4x sizes for the reward …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the reward currently enabled, if false the reward …\nIs the reward currently in stock, if false viewers can’t …\nIs the reward currently paused, if true viewers can’t …\nDoes the user need to enter information when redeeming the …\nWhether a maximum per stream is enabled and what the …\nWhether a maximum per user per stream is enabled and what …\nOnly return rewards that this application/client id can …\nWhen set to true, only returns custom rewards that the …\nThe prompt for the viewer when they are redeeming the …\nThe number of redemptions redeemed during the current live …\nShould redemptions be set to FULFILLED status immediately …\nThe title of the reward\nReturn Values for Get Custom Reward Redemption\nQuery Parameters for Get Custom Reward Redemption\nThe order to sort redemptions by.\nSort by newest\nSort by oldest\nInformation about the reward involved\nCursor for forward pagination: tells the server where to …\nReward to fetch\nProvided broadcaster_id must match the user_id in the auth …\nThe id of the broadcaster that the reward belongs to.\nBroadcaster’s user login name.\nThe display name of the broadcaster that the reward …\nCreate a builder for building …\nThe cost of the reward in channel points.\nNumber of results to be returned when getting the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA list of IDs to filter the redemptions by.\nThe ID of the redemption.\nThe ID of the custom reward.\nGet redemptions with these ids\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe prompt to the user, if any, for the reward.\nRFC3339 timestamp of when the reward was redeemed.\nBasic information about the Custom Reward that was …\nSpecific reward to query\nWhen ID is not provided, this parameter returns paginated …\nThe order to sort redemptions by.\nThe order to sort redemptions by.\nStatus of rewards to return\nWhen id is not provided, this param is required and …\nOne of UNFULFILLED, FULFILLED or CANCELED\nThe title of the custom reward.\nThe ID of the user that redeemed the reward\nThe user input provided. Empty string if not provided.\nThe login of the user who redeemed the reward.\nThe display name of the user that redeemed the reward.\nReward updated\nReturn Values for Update CustomReward\nBody Parameters for Update Custom Rewards\nQuery Parameters for Update Custom Rewards\nCustom background color for the reward. Format: Hex with # …\nProvided broadcaster_id must match the user_id in the auth …\nCreate a builder for building <code>UpdateCustomRewardRequest</code>. …\nCreate a builder for building <code>UpdateCustomRewardBody</code>. On …\nThe cost of the reward\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe cooldown in seconds if enabled\nID of the Custom Reward to update, must match a Custom …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the reward currently enabled, if false the reward …\nWhether a cooldown is enabled. Defaults to false.\nWhether a maximum per stream is enabled\nWhether a maximum per user per stream is enabled. Defaults …\nIs the reward currently paused, if true viewers can’t …\nDoes the user need to enter information when redeeming the …\nThe maximum number per stream if enabled\nThe maximum number per user per stream if enabled\nUpdate a Custom Reward created on the broadcaster’s …\nThe prompt for the viewer when they are redeeming the …\nShould redemptions be set to FULFILLED status immediately …\nThe title of the reward\nReturn Values for Get Custom Reward Redemption\n200 - OK\nBody Parameters for Update Redemption Status\nFIXME: Returns an object. Return Values for Update …\nQuery Parameters for Update Redemption Status\nThe id of the broadcaster that the reward belongs to.\nProvided broadcaster_id must match the user_id in the auth …\nBroadcaster’s user login name.\nThe display name of the broadcaster that the reward …\nCreate a builder for building <code>UpdateRedemptionStatusRequest</code>…\nCreate a builder for building <code>UpdateRedemptionStatusBody</code>. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ID of the redemption.\nID of the Custom Reward Redemption to update, must match a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdate the status of Custom Reward Redemption object on a …\nRFC3339 timestamp of when the reward was redeemed.\nBasic information about the Custom Reward that was …\nID of the Custom Reward the redemptions to be updated are …\nThe new status to set\nOne of UNFULFILLED, FULFILLED or CANCELED\nThe new status to set redemptions to. Can be either …\nThe ID of the user that redeemed the reward\nThe user input provided. Empty string if not provided.\nThe login of the user who redeemed the reward.\nThe display name of the user that redeemed the reward.\nBody Parameters for Create Poll\nQuery Parameters for Create Poll\nBody Parameters for End Poll\nQuery Parameters for End Poll\nQuery Parameters for Get polls\nChoice settings for a poll\nReturn Values for Get polls\nCursor for forward pagination\nThe broadcaster running polls. Provided broadcaster_id …\nThe broadcaster running polls. Provided broadcaster_id …\nThe broadcaster running polls. Provided broadcaster_id …\nID of the broadcaster.\nLogin of the broadcaster.\nName of the broadcaster.\nNumber of Channel Points required to vote once with …\nNumber of Channel Points required to vote once with …\nIndicates if Channel Points can be used for voting. …\nIndicates if Channel Points can be used for voting.\nArray of the poll choices. Minimum: 2 choices. Maximum: 5 …\nArray of the poll choices.\nCreate a poll for a specific Twitch channel. <code>create-poll</code>\nTotal duration for the poll (in seconds). Minimum: 15. …\nTotal duration for the poll (in seconds).\nEnd a poll that is currently active.\nUTC timestamp for the poll’s end time. Set to null if …\nMaximum number of objects to return. Maximum: 20. Default: …\nGet information about all polls or specific polls for a …\nID of the poll.\nID of a poll. Filters results to one or more specific …\nID of the poll.\nUTC timestamp for the poll’s start time.\nThe poll status to be set.\nPoll status. Valid values are:\nQuestion displayed for the poll. Maximum: 60 characters.\nText displayed for the choice. Maximum: 25 characters.\nQuestion displayed for the poll.\nBody Parameters for Create Poll\nQuery Parameters for Create Poll\nReturn Values for Create Poll\nChoice settings for a poll\nID of the broadcaster.\nThe broadcaster running polls. Provided broadcaster_id …\nLogin of the broadcaster.\nName of the broadcaster.\nCreate a builder for building <code>CreatePollRequest</code>. On the …\nCreate a builder for building <code>CreatePollBody</code>. On the …\nCreate a builder for building <code>NewPollChoice</code>. On the …\nChannel points per vote\nNumber of Channel Points required to vote once with …\nNumber of Channel Points required to vote once with …\nSet if Channel Points voting is enabled\nIndicates if Channel Points can be used for voting.\nIndicates if Channel Points can be used for voting. …\nArray of the poll choices.\nArray of the poll choices. Minimum: 2 choices. Maximum: 5 …\nTotal duration for the poll (in seconds).\nTotal duration for the poll (in seconds). Minimum: 15. …\nUTC timestamp for the poll’s end time. Set to null if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the poll.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>CreatePollRequest</code>\nPoll settings\nCreate a new <code>NewPollChoice</code>\nUTC timestamp for the poll’s start time.\nPoll status. Valid values are:\nQuestion displayed for the poll.\nQuestion displayed for the poll. Maximum: 60 characters.\nText displayed for the choice. Maximum: 25 characters.\nPoll is currently in progress.\nPoll is no longer visible on the channel.\nUnauthenticated: Missing/invalid Token\nPoll has reached its ended_at time.\nReturn Values for Update CustomReward\nBody Parameters for End Poll\nQuery Parameters for End Poll\nSomething went wrong determining the state.\nBad Request: Query/Body Parameter missing or invalid\nPoll is no longer visible to any user on Twitch.\nStatus of a poll\nPoll ended successfully.\nPoll has been manually terminated before its ended_at time.\nThe broadcaster running polls. Provided broadcaster_id …\nCreate a builder for building <code>EndPollRequest</code>. On the …\nCreate a builder for building <code>EndPollBody</code>. On the builder, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the poll.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a new <code>EndPollRequest</code>\nEnd a poll that is currently active.\nThe poll status to be set.\nPoll is currently in progress.\nPoll is no longer visible on the channel.\nPoll has reached its ended_at time.\nQuery Parameters for Get polls\nSomething went wrong determining the state.\nPoll is no longer visible to any user on Twitch.\nReturn Values for Get polls\nPoll choice\nStatus of a poll\nPoll has been manually terminated before its ended_at time.\nCursor for forward pagination\nNumber of votes received via Bits.\nThe broadcaster running polls.\nThe broadcaster running polls. Provided broadcaster_id …\nID of the broadcaster.\nLogin of the broadcaster.\nName of the broadcaster.\nCreate a builder for building <code>GetPollsRequest</code>. On the …\nNumber of Channel Points required to vote once with …\nNumber of votes received via Channel Points.\nIndicates if Channel Points can be used for voting.\nArray of the poll choices.\nTotal duration for the poll (in seconds).\nUTC timestamp for the poll’s end time. Set to null if …\nMaximum number of objects to return. Maximum: 20. Default: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID for the choice.\nID of a poll. Filters results to one or more specific …\nID of the poll.\nIDs of the polls to query.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUTC timestamp for the poll’s start time.\nPoll status. Valid values are:\nText displayed for the choice.\nQuestion displayed for the poll.\nTotal number of votes received for the choice across all …\nQuery Parameters for Get predictions\nReturn Values for Get predictions\nCursor for forward pagination\nThe broadcaster running Predictions. Provided …\nID of the broadcaster.\nLogin of the broadcaster.\nName of the broadcaster.\nCreate a Channel Points Prediction for a specific Twitch …\nUTC timestamp for the Prediction’s start time.\nEnd a prediction that is currently active.\nUTC timestamp for when the Prediction ended. If the status …\nMaximum number of objects to return. Maximum: 20. Default: …\nGet information about all predictions or specific …\nID of a Prediction. Filters results to one or more …\nID of the Prediction.\nUTC timestamp for when the Prediction was locked. If the …\nArray of possible outcomes for the Prediction.\nTotal duration for the Prediction (in seconds).\nStatus of the Prediction.\nTitle for the Prediction.\nID of the winning outcome. If the status is ACTIVE, this …\nBody Parameters for Create Prediction\nQuery Parameters for Create Prediction\nReturn Values for Create Prediction\nChoice settings for a poll\nID of the broadcaster.\nThe broadcaster running Predictions. Provided …\nLogin of the broadcaster.\nName of the broadcaster.\nCreate a builder for building <code>CreatePredictionRequest</code>. On …\nCreate a builder for building <code>CreatePredictionBody</code>. On the …\nCreate a builder for building <code>NewPredictionOutcome</code>. On the …\nUTC timestamp for the Prediction’s start time.\nUTC timestamp for when the Prediction ended. If the status …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the Prediction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUTC timestamp for when the Prediction was locked. If the …\nCreate a new <code>CreatePredictionRequest</code>\nCreate a Channel Points Prediction for a specific Twitch …\nCreate a new <code>NewPredictionOutcome</code>\nArray of possible outcomes for the Prediction.\nArray of outcome objects with titles for the Prediction. …\nTotal duration for the Prediction (in seconds).\nTotal duration for the Prediction (in seconds). Minimum: …\nStatus of the Prediction.\nTitle for the Prediction.\nTitle for the Prediction. Maximum: 45 characters.\nText displayed for the choice. Maximum: 25 characters.\nID of the winning outcome. If the status is ACTIVE, this …\nUnauthenticated: Missing/invalid Token\nReturn Values for Update CustomReward\nBody Parameters for End Prediction\nQuery Parameters for End Prediction\nBad Request: Query/Body Parameter missing or invalid\nPrediction ended successfully.\nThe broadcaster running predictions. Provided …\nCreate a builder for building <code>EndPredictionRequest</code>. On the …\nCreate a builder for building <code>EndPredictionBody</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the prediction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a new <code>EndPredictionRequest</code>\nEnd given prediction that is currently active.\nThe Prediction status to be set. Valid values:\nID of the winning outcome for the Prediction\nID of the winning outcome for the Prediction. This …\nThe Prediction is active and viewers can make predictions.\nThe Prediction has been canceled and the Channel Points …\nQuery Parameters for Get predictions\nThe Prediction has been locked and viewers can no longer …\nReturn Values for Get predictions\nOutcome for the Prediction\nA prediction choice ID\nStatus of the Prediction\nA winning outcome has been chosen and the Channel Points …\nCursor for forward pagination\nGet information about predictions for this broadcasters …\nThe broadcaster running Predictions. Provided …\nID of the broadcaster.\nLogin of the broadcaster.\nName of the broadcaster.\nCreate a builder for building <code>GetPredictionsRequest</code>. On …\nNumber of Channel Points used for the outcome.\nColor for the outcome. Valid values: BLUE, PINK\nUTC timestamp for the Prediction’s start time.\nUTC timestamp for when the Prediction ended. If the status …\nMaximum number of objects to return. Maximum: 20. Default: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a newPredictionOutcomeIdfrom a static reference\nID for the outcome.\nID of a Prediction. Filters results to one or more …\nID of the Prediction.\nIDs of a Predictions.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>PredictionOutcomeId</code> into a …\nUTC timestamp for when the Prediction was locked. If the …\nConstructs a new PredictionOutcomeId\nArray of possible outcomes for the Prediction.\nTotal duration for the Prediction (in seconds).\nStatus of the Prediction.\nUnwraps the underlying <code>String</code> value\nText displayed for outcome.\nTitle for the Prediction.\nArray of users who were the top predictors. null if none. …\nNumber of unique users that chose the outcome.\nID of the winning outcome. If the status is ACTIVE, this …\nQuery Parameters for Cancel A Raid\nReturn Values for Cancel A Raid\nQuery Parameters for Start A Raid\nReturn Values for Start A Raid\n204 - The pending raid was successfully canceled.\nThe ID of the broadcaster that sent the raiding party.\nCancel a pending raid. <code>cancel-a-raid</code>\nRaid another channel by sending the broadcaster’s …\nQuery Parameters for Cancel A Raid\nReturn Values for Cancel A Raid\n204 - The pending raid was successfully canceled.\nCancel a pending raid on this broadcasters channel\nThe ID of the broadcaster that sent the raiding party.\nCreate a builder for building <code>CancelARaidRequest</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQuery Parameters for Start A Raid\nReturn Values for Start A Raid\nCreate a builder for building <code>StartARaidRequest</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>StartARaidRequest</code>\nBody parameters\nBody parameters\nBody parameters\nOptional scopes needed by this endpoint\nThe path to the endpoint relative to the helix root. eg. …\nA request is a Twitch endpoint, see New Twitch API …\nHelix endpoint DELETEs information\nHelix endpoint GETs information\nHelix endpoint PATCHs information\nHelix endpoint POSTs information\nHelix endpoint PUTs information\nResponse type. twitch’s response will  deserialize to …\nScopes needed for this endpoint\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nCreate a <code>http::Request</code> from this <code>Request</code> in your client\nErrors that can occur during request processing.\nReturns bare URI for the request, NOT including query …\nReturns full URI for the request, including query …\nParse a response string into the response.\nParse a response string into the response.\nParse a response string into the response.\nParse a response string into the response.\nParse a response string into the response.\nParse response.\nParse response.\nParse response.\nParse response.\nParse response.\nDefines layout of the url parameters.\nErrors for <code>HelixClient::req_get</code> and similar functions.\nCould not create request\nCould not create request\nCustom error\n{0}\n{0}\ndeserialization failed when processing request response …\ndeserialization failed when processing request response …\ndeserialization failed when processing request response …\ndeserialization failed when processing request response …\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nhelix returned error {status:?} - {error}: {message:?} …\nfield serializer only supports strings, sequences, …\nCould not parse DELETE response\nGot error from DELETE response\nCould not parse GET response\nGot error from GET response\nCould not parse PATCH response\nGot error from PATCH response\nCould not parse POST response\nGot error from POST response\nCould not parse PUT response\nGot error from PUT response\nhttp crate returned an error\nRequest failed from reqwests side\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\ninvalid or unexpected response from twitch.\nErrors that can happen when creating <code>http::Uri</code> for <code>Request</code>\ncould not assemble URI for request\nNo pagination found\npair serializer only supports strings, integers, floats, …\ncould not serialize request to query\nRequest failed from reqwests side\nErrors from the query serializer\nserialization of body failed\nserializer only supports structs and maps on top-level\nURI could not be parsed\ncould not assemble URI for request\ncould not parse response as utf8 when calling <code>GET {2}</code>\ncould not parse response as utf8 when calling <code>PUT {2}</code>\ncould not parse response as utf8 when calling <code>POST {2}</code>\ncould not parse response as utf8 when calling <code>POST {2}</code>\ncould not parse response as utf8 when calling <code>DELETE {2}</code>\nvalue serializer only supports primitive types\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBody sent to DELETE response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nBody sent to POST response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nBody sent to POST response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nBody sent to PUT response\nError message related to status code\nError message from Twitch\nReason for error\nResponse text\nStatus code of error, usually 400-499\nStatus Code\nURI to the endpoint\nUri to endpoint\nLocation where this was triggered\nLocation where this was triggered\nLocation where this was triggered\nLocation where this was triggered\nResponse retrieved from endpoint. Data is the type in …\nTwitch’s response field for <code>data</code>.\nGet first result of this response.\nGet the next page in the responses.\nGet a field from the response that is not part of <code>data</code>.\nCreate a new response.\nFields which are not part of the data response, but are …\nA cursor value, to be used in a subsequent request to …\nThe request that was sent, used for pagination.\nResponse would return this many results if fully …\nCreate a new response without pagination, total or other …\nThe category for a scheduled broadcast.\nBody Parameters for Create Channel Stream Schedule Segment\nQuery Parameters for Create Channel Stream Schedule Segment\nReturn Values for Delete Channel Stream Schedule Segment\nQuery Parameters for Delete Channel Stream Schedule Segment\nQuery Parameters for Get Channel Stream Schedule\nScheduled broadcasts for a specific channel given by Get …\nScheduled broadcast for a stream schedule.\n204 - User successfully deleted from list of channel …\nStream schedule settings updated successfully.\nReturn Values for Update Channel Stream Schedule\nQuery Parameters for Update Channel Stream Schedule\nInformation on Vacation Mode\nCursor for forward pagination: tells the server where to …\nUser ID of the broadcaster who owns the channel streaming …\nUser ID of the broadcaster who owns the channel streaming …\nUser ID of the broadcaster who owns the channel streaming …\nUser ID of the broadcaster who owns the channel streaming …\nUser ID of the broadcaster.\nLogin of the broadcaster.\nDisplay name of the broadcaster.\nUsed with recurring scheduled broadcasts. Specifies the …\nThe category for the scheduled broadcast. Set to null if …\nGame/Category ID for the scheduled broadcast.\nCreate a single scheduled broadcast or a recurring …\nDelete a single scheduled broadcast or a recurring …\nDuration of the scheduled broadcast in minutes from the …\nScheduled end time for the scheduled broadcast in RFC3339 …\nEnd time for vacation specified in RFC3339 format.\nMaximum number of stream segments to return. Maximum: 25. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets all scheduled broadcasts or specific scheduled …\nThe ID of the streaming segment to delete.\nThe ID of the stream segment to return. Maximum: 100.\nThe ID for the scheduled broadcast.\nGame/category ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if the scheduled broadcast is recurring weekly.\nIndicates if the scheduled broadcast is recurring weekly.\nIndicates if Vacation Mode is enabled. Set to true to add …\nGame/category name.\nScheduled broadcasts for this stream schedule.\nStart time for the scheduled broadcast specified in …\nA timestamp in RFC3339 format to start returning stream …\nScheduled start time for the scheduled broadcast in …\nStart time for vacation specified in RFC3339 format.\nThe timezone of the application creating the scheduled …\nThe timezone for when the vacation is being scheduled …\nTitle for the scheduled broadcast. Maximum: 140 characters.\nTitle for the scheduled broadcast.\nUpdate the settings for a channel’s stream schedule. …\nUpdate a single scheduled broadcast or a recurring …\nA timezone offset for the requester specified in minutes. …\nIf Vacation Mode is enabled, this includes start and end …\nEnd time for vacation specified in RFC3339 format. …\nStart time for vacation specified in RFC3339 format. …\nBody Parameters for Create Channel Stream Schedule Segment\nQuery Parameters for Create Channel Stream Schedule Segment\nReturn Values for Create Channel Stream Schedule Segment\nCreate a single scheduled broadcast or a recurring …\nUser ID of the broadcaster.\nUser ID of the broadcaster who owns the channel streaming …\nLogin of the broadcaster.\nDisplay name of the broadcaster.\nCreate a builder for building …\nCreate a builder for building …\nGame/Category ID for the scheduled broadcast.\nDuration of the scheduled broadcast in minutes from the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if the scheduled broadcast is recurring weekly.\nCreate a single scheduled broadcast or a recurring …\nScheduled broadcasts for this stream schedule.\nStart time for the scheduled broadcast specified in …\nThe timezone of the application creating the scheduled …\nTitle for the scheduled broadcast. Maximum: 140 characters.\nIf Vacation Mode is enabled, this includes start and end …\nReturn Values for Delete Channel Stream Schedule Segment\nQuery Parameters for Delete Channel Stream Schedule Segment\n204 - User successfully deleted from list of channel …\nUser ID of the broadcaster who owns the channel streaming …\nCreate a builder for building …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ID of the streaming segment to delete.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDelete a single scheduled broadcast or a recurring …\nQuery Parameters for Get Channel Stream Schedule\nReturn Values for Get Channel Stream Schedule\nCursor for forward pagination: tells the server where to …\nGet a broadcasters schedule\nUser ID of the broadcaster.\nUser ID of the broadcaster who owns the channel streaming …\nLogin of the broadcaster.\nDisplay name of the broadcaster.\nCreate a builder for building …\nSet amount of results returned per page.\nMaximum number of stream segments to return. Maximum: 25. …\nReturns the argument unchanged.\nSet the id for the request.\nThe ID of the stream segment to return. Maximum: 100.\nCalls <code>U::from(self)</code>.\nScheduled broadcasts for this stream schedule.\nSet the start_time for the request.\nA timestamp in RFC3339 format to start returning stream …\nSet the utc_offset for the request.\nA timezone offset for the requester specified in minutes. …\nIf Vacation Mode is enabled, this includes start and end …\nStream schedule settings updated successfully.\nReturn Values for Update Channel Stream Schedule\nQuery Parameters for Update Channel Stream Schedule\nUpdate the settings for a channel’s stream schedule.\nUser ID of the broadcaster who owns the channel streaming …\nCreate a builder for building …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if Vacation Mode is enabled. Set to true to add …\nThe timezone for when the vacation is being scheduled …\nEnd time for vacation specified in RFC3339 format. …\nStart time for vacation specified in RFC3339 format. …\nBody Parameters for Update Channel Stream Schedule Segment\nQuery Parameters for Update Channel Stream Schedule Segment\nReturn Values for Update Channel Stream Schedule Segment\nUser ID of the broadcaster.\nUser ID of the broadcaster who owns the channel streaming …\nLogin of the broadcaster.\nDisplay name of the broadcaster.\nCreate a builder for building …\nCreate a builder for building …\nGame/Category ID for the scheduled broadcast.\nDuration of the scheduled broadcast in minutes from the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ID of the streaming segment to update.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicated if the scheduled broadcast is canceled.\nUpdate a single scheduled broadcast or a recurring …\nScheduled broadcasts for this stream schedule.\nStart time for the scheduled broadcast specified in …\nThe timezone of the application creating the scheduled …\nTitle for the scheduled broadcast. Maximum: 140 characters.\nIf Vacation Mode is enabled, this includes start and end …\nA game or category as defined by Twitch\nReturn Values for Search Channels\nQuery Parameters for Search Categories\nQuery Parameters for Search Channels\nCursor for forward pagination: tells the server where to …\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nTemplate URL for the game’s box art.\nChannel language (Broadcaster Language field from the …\nLogin of the broadcaster.\nDisplay name corresponding to user_id\nNumber of values to be returned per page. Limit: 100. …\nMaximum number of objects to return. Maximum: 100 Default: …\nReturns the argument unchanged.\nID of the game being played on the stream\nName of the game being played on the stream.\nGame or category ID.\nChannel ID\nThe ID that IGDB uses to identify this game.\nCalls <code>U::from(self)</code>.\nLive status\nFilter results for live streams only. Default: false\nGame name.\nURI encoded search query\nURL encoded search query\nReturns a list of games or categories that match the query …\nReturns a list of channels (users who have streamed within …\nUTC timestamp. (live only)\nShows tag IDs that apply to the stream (live only).See …\nThe tags applied to the channel.\nThumbnail URL of the stream. All image URLs have variable …\nchannel title\nReturn Values for Search Categories\nQuery Parameters for Search Categories\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nTemplate URL for the game’s box art.\nCreate a builder for building <code>SearchCategoriesRequest</code>. On …\nSet amount of results returned per page.\nNumber of values to be returned per page. Limit: 100. …\nReturns the argument unchanged.\nGame or category ID.\nThe ID that IGDB uses to identify this game.\nCalls <code>U::from(self)</code>.\nGame name.\nSearch categories with the following query.\nURI encoded search query\nReturn Values for Search Channels\nQuery Parameters for Search Channels\nCursor for forward pagination: tells the server where to …\nChannel language (Broadcaster Language field from the …\nLogin of the broadcaster.\nCreate a builder for building <code>SearchChannelsRequest</code>. On …\nDisplay name corresponding to user_id\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100 Default: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the game being played on the stream\nName of the game being played on the stream.\nChannel ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLive status\nGet live streams only\nFilter results for live streams only. Default: false\nSearch channels with the following query.\nURL encoded search query\nUTC timestamp. (live only)\nShows tag IDs that apply to the stream (live only).See …\nThe tags applied to the channel.\nThumbnail URL of the stream. All image URLs have variable …\nchannel title\nBody Parameters for Create Stream Marker\nQuery Parameters for Create Stream Marker\nReturn Value for Create Stream Marker\nQuery Parameters for Get Followed Streams\nQuery Parameters for Get Stream Key\nReturn Values for Get Stream Key\nQuery Parameters for Get Stream Markers\nQuery Parameters for Get Stream Tags\nQuery Parameters for Get Streams\nStream is live.\nStream not live\nReturn Values for Replace Stream Tags\nBody Parameters for Replace Stream Tags\nQuery Parameters for Replace Stream Tags\nReturn Values for Get Streams\nA marker on a video\nReturn Values for Get Stream Markers\nA video with markers\nGotten from <code>Stream.type_</code>\n204 - Stream Tags replaced successfully\nReturn Values for Get Stream Tags\nCursor for forward pagination: tells the server where to …\nCursor for forward pagination: tells the server where to …\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nThe ID of the broadcaster that owns the channel. The ID …\nID of the stream whose tags are going to be fetched\nID of the stream for which tags are to be replaced.\nAdds a marker to a live stream. <code>create-stream-marker</code>\nThe UTC date and time (in RFC3339 format) of when the user …\nThe UTC date and time (in RFC3339 format) of when the user …\nA short description of the marker to help the user …\nA description that the user gave the marker to help them …\nThe description that the user gave the marker to help them …\nMaximum number of objects to return. Maximum: 100. …\nMaximum number of objects to return. Maximum: 100. …\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns streams broadcasting a specified game ID. You can …\nID of the game being played on the stream.\nName of the game being played.\nGets information about active streams belonging to …\nGets the channel’s stream key. <code>get-stream-key</code>\nGets a list of markers from the user’s most recent …\nGets the list of tags for a specified stream (channel). …\nGets information about active streams. <code>get-streams</code>\nID of the tag.\nAn ID that identifies this marker.\nAn ID that identifies this marker.\nStream ID.\nCalls <code>U::from(self)</code>.\ntrue if the tag is auto-generated; otherwise, false . An …\nCheck if the stream is live or not\nIndicates if the broadcaster has specified their channel …\nStream language. You can specify up to 100 languages.\nStream language.\nAll localized descriptions of the tag.\nAll localized names of the tag.\nThe list of markers in this video. The list in ascending …\nThe relative offset (in seconds) of the marker from the …\nThe relative offset (in seconds) of the marker from the …\nApplies specified tags to a specified stream, overwriting …\nUTC timestamp.\nThe channel’s stream key.\nShows tag IDs that apply to the stream.\nIDs of tags to be applied to the stream.\nThe tags applied to the stream.\nThumbnail URL of the stream. All image URLs have variable …\nStream title.\nStream type: “live” or “” (in case of error).\nA URL that opens the video in Twitch Highlighter.\nThe ID of the broadcaster that’s streaming content. This …\nReturns streams broadcast by one or more specified user …\nA user ID. The request returns the markers from this …\nThe ID of the user that created the marker.\nReturns streams broadcast by one or more specified user …\nID of the user who is streaming.\nThe user’s login name.\nReturns streams broadcast by one or more specified user …\nLogin of the user who is streaming.\nThe user’s display name.\nDisplay name corresponding to user_id.\nA video on demand (VOD)/video ID. The request returns the …\nAn ID that identifies this video.\nA list of videos that contain markers. The list contains a …\nNumber of viewers watching the stream at the time of the …\nBody Parameters for Create Stream Marker\nQuery Parameters for Create Stream Marker\nReturn Value for Create Stream Marker\nCreate a builder for building <code>CreateStreamMarkerRequest</code>. …\nCreate a builder for building <code>CreateStreamMarkerBody</code>. On …\nThe UTC date and time (in RFC3339 format) of when the user …\nA short description of the marker to help the user …\nA description that the user gave the marker to help them …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn ID that identifies this marker.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new CreateStreamMarkerRequest\nCreate a new stream marker with a description\nThe relative offset (in seconds) of the marker from the …\nCreate a new stream marker without a description\nThe ID of the broadcaster that’s streaming content. This …\nQuery Parameters for Get Followed Streams\nReturn Values for Get Followed Streams\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nCreate a builder for building <code>GetFollowedStreamsRequest</code>. …\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nID of the game being played on the stream.\nName of the game being played.\nStream ID.\nCalls <code>U::from(self)</code>.\nIndicates if the broadcaster has specified their channel …\nStream language.\nUTC timestamp.\nShows tag IDs that apply to the stream.\nThe tags applied to the stream.\nThumbnail URL of the stream. All image URLs have variable …\nStream title.\nStream type: “live” or “” (in case of error).\nGet a users followed streams.\nID of the user who is streaming.\nReturns streams broadcast by one or more specified user …\nLogin of the user who is streaming.\nDisplay name corresponding to user_id.\nNumber of viewers watching the stream at the time of the …\nQuery Parameters for Get Stream Key\nReturn Values for Get Stream Key\nID of the broadcaster whose stream key should be retrieved\nThe ID of the broadcaster that owns the channel. The ID …\nCreate a builder for building <code>GetStreamKeyRequest</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe channel’s stream key.\nQuery Parameters for Get Stream Markers\nA marker on a video\nReturn Values for Get Stream Markers\nA video with markers\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nCreate a builder for building <code>GetStreamMarkersRequest</code>. On …\nThe UTC date and time (in RFC3339 format) of when the user …\nThe description that the user gave the marker to help them …\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn ID that identifies this marker.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe list of markers in this video. The list in ascending …\nThe relative offset (in seconds) of the marker from the …\nA URL that opens the video in Twitch Highlighter.\nReturn stream markers from the most recent video of the …\nA user ID. The request returns the markers from this …\nThe ID of the user that created the marker.\nThe user’s login name.\nThe user’s display name.\nReturn stream markers for a specific video.\nA video on demand (VOD)/video ID. The request returns the …\nAn ID that identifies this video.\nA list of videos that contain markers. The list contains a …\nQuery Parameters for Get Stream Tags\nReturn Values for Get Stream Tags\nID of the stream whose tags are going to be fetched\nID of the stream whose tags are going to be fetched\nCreate a builder for building <code>GetStreamTagsRequest</code>. On the …\nReturns the argument unchanged.\nID of the tag.\nCalls <code>U::from(self)</code>.\ntrue if the tag is auto-generated; otherwise, false . An …\nAll localized descriptions of the tag.\nAll localized names of the tag.\nQuery Parameters for Get Streams\nReturn Values for Get Streams\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nCreate a builder for building <code>GetStreamsRequest</code>. On the …\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns streams broadcasting a specified game ID. You can …\nID of the game being played on the stream.\nReturn streams with these Ids\nName of the game being played.\nStream ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if the broadcaster has specified their channel …\nStream language. You can specify up to 100 languages.\nStream language.\nUTC timestamp.\nShows tag IDs that apply to the stream.\nThe tags applied to the stream.\nThumbnail URL of the stream. All image URLs have variable …\nStream title.\nStream type: “live” or “” (in case of error).\nReturns streams broadcast by one or more specified user …\nID of the user who is streaming.\nReturn streams for specified user ids\nReturns streams broadcast by one or more specified user …\nLogin of the user who is streaming.\nReturn streams for specified users by nickname\nDisplay name corresponding to user_id.\nNumber of viewers watching the stream at the time of the …\nReturn Values for Replace Stream Tags\nBody Parameters for Replace Stream Tags\nQuery Parameters for Replace Stream Tags\n204 - Stream Tags replaced successfully\nID of the stream for which tags are to be replaced.\nID of the stream for which tags are to be replaced.\nCreate a builder for building <code>ReplaceStreamTagsRequest</code>. On …\nCreate a builder for building <code>ReplaceStreamTagsBody</code>. On …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIDs of tags to be applied to the stream.\nIDs of tags to be applied to the stream.\nReturn Values for Get Broadcaster Subscriptions\nReturn Values for Get Broadcaster Subscriptions Events\nQuery Parameters for Check User Subscription\nQuery Parameters for Get Broadcaster Subscriptions Events\nQuery Parameters for Get Broadcaster Subscriptions\nReturn Values for Check User Subscription\nCursor for forward pagination: tells the server where to …\nCursor for forward pagination: tells the server where to …\nUser ID of the broadcaster. Must match the User ID in the …\nUser ID of the broadcaster.\nUser ID of the broadcaster. Must match the User ID in the …\nUser ID of the broadcaster.\nMust match the User ID in the Bearer token.\nLogin of the broadcaster.\nLogin of the broadcaster.\nDisplay name of the broadcaster.\nDisplay name of the broadcaster.\nChecks if a specific user is subscribed to a specific …\nReturns <code>broadcaster_id</code>, <code>broadcaster_name</code>, <code>user_id</code>, …\nRFC3339 formatted timestamp for events.\n<code>subscriptions.subscribe</code>, <code>subscriptions.unsubscribe</code> or …\nNumber of values to be returned per page. Limit: 100. …\nMaximum number of objects to return. Maximum: 100. …\nGet all of a broadcaster’s subscriptions. …\nReturns a list of subscription events. …\nUser ID of the broadcaster.\nLogin of the gifter (if is_gift is true).\nLogin of the gifter.\nDisplay name of the gifter (if is_gift is true).\nDisplay name of the gifter.\nRetreive a single event by event ID\nEvent ID\nIndicates if the subscription is a gift.\nDetermines if the subscription is a gift subscription.\nName of the subscription.\nSubscription tier. 1000 is tier 1, 2000 is tier 2, and …\nType of subscription (Tier 1, Tier 2, Tier 3). 1000 = Tier …\nUnique identifier of account to get subscription status …\nUnique identifier of account to get subscription status …\nID of the subscribed user.\nFilters the results and only returns a status object for …\nLogin of the subscribed user.\nDisplay name of the subscribed user.\nReturns the version of the endpoint.\nQuery Parameters for Check User Subscription\nReturn Values for Check User Subscription\nChecks subscribed users to this specific channel.\nUser ID of the broadcaster. Must match the User ID in the …\nUser ID of the broadcaster.\nLogin of the broadcaster.\nDisplay name of the broadcaster.\nCreate a builder for building <code>CheckUserSubscriptionRequest</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLogin of the gifter (if is_gift is true).\nDisplay name of the gifter (if is_gift is true).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if the subscription is a gift.\nSubscription tier. 1000 is tier 1, 2000 is tier 2, and …\nUnique identifier of account to get subscription status …\nFilter the results for specific users.\nReturn Values for Get Broadcaster Subscriptions\nErrors when retrieving <code>points</code> in Get Broadcaster …\nDeserialization error\nQuery Parameters for Get Broadcaster Subscriptions\n<code>points</code> not found in the response\nCursor for forward pagination: tells the server where to …\nGet a broadcasters subscribers\nUser ID of the broadcaster. Must match the User ID in the …\nUser ID of the broadcaster.\nLogin of the broadcaster.\nDisplay name of the broadcaster.\nCreate a builder for building …\nSet amount of results returned per page.\nNumber of values to be returned per page. Limit: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUser ID of the broadcaster.\nLogin of the gifter.\nDisplay name of the gifter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if the subscription is a gift subscription.\nName of the subscription.\ncheck for specific users in broadcasters subscriptions\nType of subscription (Tier 1, Tier 2, Tier 3). 1000 = Tier …\nUnique identifier of account to get subscription status …\nID of the subscribed user.\nLogin of the subscribed user.\nDisplay name of the subscribed user.\nReturn Values for Get Broadcaster Subscriptions Events\nEvent data for broadcaster events.\nType of event\nQuery Parameters for Get Broadcaster Subscriptions Events\nUser shared a subscription in channel\nUser has subscribed\nUser has unsubscribed\nCursor for forward pagination: tells the server where to …\nGet events for this broadcaster\nMust match the User ID in the Bearer token.\nUser ID of the broadcaster.\nDisplay name of the broadcaster.\nCreate a builder for building …\nReturns <code>broadcaster_id</code>, <code>broadcaster_name</code>, <code>user_id</code>, …\nRFC3339 formatted timestamp for events.\n<code>subscriptions.subscribe</code>, <code>subscriptions.unsubscribe</code> or …\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the subscribed user.\nDisplay name of the gifter.\nRetreive a single event by event ID\nEvent ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if the subscription is a gift subscription.\nName of the subscription.\nType of subscription (Tier 1, Tier 2, Tier 3). 1000 = Tier …\nFilters the results and only returns a status object for …\nID of the subscribed user.\nFilter the results for specific users.\nDisplay name of the subscribed user.\nReturns the version of the endpoint.\nTag is auto-generated or not.\nWas not auto-generated\nQuery Parameters for Get All Stream Tags\nQuery Parameters for Get Stream Tags\nReturn Values for Get All Stream Tags\nLanguage code, formatted as 2 letter language by ISO …\nLanguage code, formatted as 2 letter language by ISO …\nWas auto-generated\nA stream tag as defined by Twitch.\nCursor for forward pagination: tells the server where to …\nProvides access to the underlying value as a string slice.\nID of the stream whose tags are going to be fetched\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new TagLanguage from a static reference\nTransparently reinterprets the static string slice as a …\nTransparently reinterprets the string slice as a …\nGets the list of all stream tags defined by Twitch, …\nGets the list of tags for a specified stream (channel). …\nID of the tag.\nID of the tag.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>TagLanguage</code> into a <code>Box&lt;TagLanguageRef&gt;</code>\nConverts a <code>Box&lt;TagLanguageRef&gt;</code> into a <code>TagLanguage</code> without …\ntrue if the tag is auto-generated; otherwise, false . An …\ntrue if the tag is auto-generated; otherwise, false . An …\nAll localized descriptions of the tag.\nAll localized descriptions of the tag.\nAll localized names of the tag.\nAll localized names of the tag.\nConstructs a new TagLanguage\nID of a tag. Multiple IDs can be specified. If provided, …\nUnwraps the underlying <code>String</code> value\nQuery Parameters for Get All Stream Tags\nReturn Values for Get All Stream Tags\nCursor for forward pagination: tells the server where to …\nCreate a builder for building <code>GetAllStreamTagsRequest</code>. On …\nSet amount of results returned per page.\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nID of the tag.\nCalls <code>U::from(self)</code>.\ntrue if the tag is auto-generated; otherwise, false . An …\nAll localized descriptions of the tag.\nAll localized names of the tag.\nID of a tag. Multiple IDs can be specified. If provided, …\nFilter the results for specific tag.\nQuery Parameters for Get Stream Tags\nReturn Values for Get Stream Tags\nID of the stream whose tags are going to be fetched\nID of the tag.\ntrue if the tag is auto-generated; otherwise, false . An …\nAll localized descriptions of the tag.\nAll localized names of the tag.\nInformation about a team. Get team <code>members</code> with …\nURL of the Team background <code>image</code>.\nURL for the Team banner.\nDate and time the Team was created.\nReturns the argument unchanged.\nGets information for a specific Twitch Team. <code>get-teams</code>\nGets information for a specific Twitch Team. <code>get-teams</code>\nTeam ID.\nTeam description.\nCalls <code>U::from(self)</code>.\nTeam display name.\nTeam name.\nImage URL for the Team logo.\nDate and time the Team was last updated.\nReturn Values for Get Channel Teams\nQuery Parameters for Get Channel Teams\nGet the team of this specific broadcaster\nTeam ID.\nUser ID of the broadcaster.\nLogin of the broadcaster.\nDisplay name of the broadcaster.\nCreate a builder for building <code>GetChannelTeamsRequest</code>. On …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTeam information\nQuery Parameters for Get Teams\nReturn Values for Get Teams\nCreate a builder for building <code>GetTeamsRequest</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet team with this <code>TeamId</code>\nTeam ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet team with this name\nTeam name.\nInformation about the team.\nUsers in the team.\nThe slot is configured\nReturn Values for Block User\nQuery Parameters for Block User\nDisplays as part of the video, taking up part of the …\nReturn Values for Get User Extensions\nReturn Values for Get User Active Extensions\nA slot for an extension to be active in\nInner body for Update User Extensions\nWhere an extension can appear.\nDescribes a follow relationship\nQuery Parameters for Get User Active Extensions\nQuery Parameters for Get Users Block List\nQuery Parameters for Get User Extensions\nQuery Parameters for Get Users Follows\nQuery Parameters for Get Users\nThe slot is not configured\nDisplays on mobile\nDisplays on top of the whole video as a transparent …\nDisplays in a box under the video.\n204 - User blocked successfully.\n204 - User unblocked successfully.\nReturn Values for Unblock User\nQuery Parameters for Unblock User\nAn unknown type, contains the raw string provided by …\nBody for Update User Extensions\nQuery Parameters for Update User Extensions\nQuery Parameters for Update User\nReturn Values for Get Users\nReturn Values for Get Users Block List\nReturn Values for Get Users Follows\nCursor for forward pagination: tells the server where to …\nCursor for forward pagination: tells the server where to …\nBlocks the specified user on behalf of the authenticated …\nUser ID for a Twitch user.\nUser’s broadcaster type: “partner”, “affiliate”, …\nA Boolean value that determines whether the extension is …\nA dictionary that contains the data for a video-component …\nA dictionary that contains the data for a video-component …\nDate when the user was created.\nThe specification for the user’s extensions (which …\nUser’s channel description.\nThe string to update the channel’s description to. The …\nDisplay name of the blocked user.\nUser’s display name.\nUser’s email address. Returned if the request includes …\nMaximum number of objects to return. Maximum: 100. …\nMaximum number of objects to return. Maximum: 100. …\nThe follow relationships returned by this endpoint on this …\nDate and time when the from_id user followed the to_id …\nReturns the argument unchanged.\nUser ID. The request returns information about users who …\nID of the user following the to_id user.\nLogin of the user following the to_id user.\nDisplay name corresponding to from_id.\nGets the active extensions that the broadcaster has …\nGets a specified user’s block list. The list is sorted …\nGets a list of all extensions (both active and inactive) …\nGets information about one or more specified Twitch users. …\nGets information on follow relationships between two …\nAn ID that identifies the extension.\nUser ID. Multiple user IDs can be specified. Limit: 100.\nUser’s ID.\nCalls <code>U::from(self)</code>.\nUser login name. Multiple login names can be specified. …\nUser’s login name.\nThe extension’s name.\nURL of the user’s offline image.\nA dictionary that contains the data for a video-overlay …\nA dictionary that contains the data for a video-overlay …\nA dictionary that contains the data for a panel extension.\nA dictionary that contains the data for a panel extension.\nURL of the user’s profile image.\nReason for blocking the user. Valid values: “spam”, “…\nSource context for blocking the user. Valid values: “chat…\nUser ID of the follower\nUser ID of the follower\nUser ID. The request returns information about users who …\nID of the user being followed by the from_id user.\nLogin of the user being followed by the from_id user.\nDisplay name corresponding to to_id.\nTotal number of items returned in all pages.\nThe extension types that you can activate for this …\nUser’s type: “staff”, “admin”, “global_mod”, …\nUnblocks the specified user on behalf of the authenticated …\nUpdates the specified user’s information.\nUpdates the specified user’s information.\nThe ID of the broadcaster whose active extensions you want …\nUser ID of the blocked user.\nLogin of the blocked user.\nThe extension’s version.\nTotal number of views of the user’s channel.\nReturn Values for Block User\nQuery Parameters for Block User\nChat\nHarassment\nOther\nReason for blocking the user.\nSource context for blocking the user.\nSpam\n204 - User blocked successfully.\nWhisper\nBlock a user\nCreate a builder for building <code>BlockUserRequest</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the reason for this block.\nReason for blocking the user. Valid values: “spam”, “…\nSet the source_context for this block.\nSource context for blocking the user. Valid values: “chat…\nUser ID of the follower\nAn active extension slot\nAn active extension slot where the extension can be …\nReturn Values for Get User Active Extensions\nQuery Parameters for Get User Active Extensions\nCreate a builder for building …\nA dictionary that contains the data for a video-component …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn ID that identifies the extension.\nAn ID that identifies the extension.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe extension’s name.\nThe extension’s name.\nGets the active extensions that the broadcaster has …\nA dictionary that contains the data for a video-overlay …\nA dictionary that contains the data for a panel extension.\nGets the active extensions that the user has installed for …\nThe ID of the broadcaster whose active extensions you want …\nThe extension’s version.\nThe extension’s version.\nThe x-coordinate where the extension is placed.\nThe y-coordinate where the extension is placed.\nQuery Parameters for Get Users Block List\nReturn Values for Get Users Block List\nCursor for forward pagination: tells the server where to …\nGet a specified user’s block list\nUser ID for a Twitch user.\nCreate a builder for building <code>GetUserBlockListRequest</code>. On …\nDisplay name of the blocked user.\nMaximum number of objects to return. Maximum: 100. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUser ID of the blocked user.\nLogin of the blocked user.\nDisplays as part of the video, taking up part of the …\nReturn Values for Get User Extensions\nWhere an extension can appear.\nQuery Parameters for Get User Extensions\nDisplays on mobile\nDisplays on top of the whole video as a transparent …\nDisplays in a box under the video.\nAn unknown type, contains the raw string provided by …\nCreate a builder for building <code>GetUserExtensionsRequest</code>. On …\nA Boolean value that determines whether the extension is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn ID that identifies the extension.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe extension’s name.\nGet a list of all extensions (both active and inactive) …\nThe extension types that you can activate for this …\nThe extension’s version.\nQuery Parameters for Get Users\nReturn Values for Get Users\nUser’s broadcaster type: “partner”, “affiliate”, …\nCreate a builder for building <code>GetUsersRequest</code>. On the …\nDate when the user was created.\nUser’s channel description.\nUser’s display name.\nUser’s email address. Returned if the request includes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nUser ID. Multiple user IDs can be specified. Limit: 100.\nUser’s ID.\nGet multiple user by their <code>UserId</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUser login name. Multiple login names can be specified. …\nUser’s login name.\nGet multiple user by their <code>UserName</code>\nReturns an empty <code>GetUsersRequest</code>\nURL of the user’s offline image.\nURL of the user’s profile image.\nUser’s type: “staff”, “admin”, “global_mod”, …\nTotal number of views of the user’s channel.\nDescribes a follow relationship\nQuery Parameters for Get Users Follows\nReturn Values for Get Users Follows\nCursor for forward pagination: tells the server where to …\nCreate a builder for building <code>GetUsersFollowsRequest</code>. On …\nReturns an empty <code>GetUsersFollowsRequest</code>\nMaximum number of objects to return. Maximum: 100. …\nThe follow relationships returned by this endpoint on this …\nDate and time when the from_id user followed the to_id …\nGet the followers of <code>to_id</code>\nGet the broadcasters that <code>from_id</code> is following\nCheck if user follows a specific broadcaster\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUser ID. The request returns information about users who …\nID of the user following the to_id user.\nLogin of the user following the to_id user.\nDisplay name corresponding to from_id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUser ID. The request returns information about users who …\nID of the user being followed by the from_id user.\nLogin of the user being followed by the from_id user.\nDisplay name corresponding to to_id.\nTotal number of items returned in all pages.\n204 - User unblocked successfully.\nReturn Values for Unblock User\nQuery Parameters for Unblock User\nCreate a builder for building <code>UnblockUserRequest</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUser ID of the follower\nCreate a new unblock request\nQuery Parameters for Update User\nCreate a builder for building <code>UpdateUserRequest</code>. On the …\nUpdate the description of the current user\nThe string to update the channel’s description to. The …\nUpdate nothing (returns the current user)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn active extension slot\nAn active extension slot where the extension can be …\nInner body for Update User Extensions\nBody for Update User Extensions\nQuery Parameters for Update User Extensions\nCreate a builder for building <code>UpdateUserExtensionsRequest</code>. …\nCreate a builder for building <code>UpdateUserExtensionsBody</code>. On …\nCreate a builder for building <code>ExtensionSpecification</code>. On …\nCreate a builder for building <code>ActiveExtension</code>. On the …\nCreate a builder for building <code>ActivePositionedExtension</code>. …\nSet the component extensions\nA dictionary that contains the data for a video-component …\nThe specification for the user’s extensions (which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn ID that identifies the extension.\nAn ID that identifies the extension.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new update request\nCreate a new specificaton for the user’s extensions\nCreate an empty specification\nCreate an active extension with an ID and a version\nCreate an active positioned extension with an ID, a …\nSet the overlay extensions\nA dictionary that contains the data for a video-overlay …\nSet the panel extensions\nA dictionary that contains the data for a panel extension.\nThe extension’s version.\nThe extension’s version.\nThe x-coordinate where the extension is placed.\nThe y-coordinate where the extension is placed.\nFilter by all. Effectively a no-op\nAll video types\nAn archived video\nFilter by from this day only\nQuery Parameters for Get Videos\nA highlight\nFilter by this month\nSort order of the videos\nSort by time\nSort by trending\nA uploaded video\nReturn Values for Get Videos\nPeriod during which the video was created\nType of video.\nSort by views\nFilter by this week\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nDate when the video was created.\nDeletes one or more videos. Videos are past broadcasts, …\nDescription of the video.\nLength of the video.\nNumber of values to be returned when getting videos by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the game the video is of.\nGets video information by video ID (one or more), user ID …\nID of the video being queried. Limit: 100. If this is …\nID of the video.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLanguage of the video being queried. Limit: 1.\nLanguage of the video.\nMuted segments in the video.\nPeriod during which the video was created. Valid values: …\nDate when the video was published.\nSort order of the videos. Valid values: “time”, “…\nID of the stream that the video originated from if the …\nTemplate URL for the thumbnail of the video.\nTitle of the video.\nType of video. Valid values: “all”, “upload”, “…\nType of video. Valid values: “upload”, “archive”, …\nURL of the video.\nID of the user who owns the video.\nID of the user who owns the video.\nLogin of the user who owns the video.\nDisplay name corresponding to user_id.\nNumber of times the video has been viewed.\nIndicates whether the video is publicly viewable. Valid …\nReturn Values for Delete Videos <code>delete-videos</code>\nQuery Parameters for Delete Videos\nVideo(s) deleted.\nCreate a builder for building <code>DeleteVideosRequest</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the video(s) to be deleted. Limit: 5.\nID of the videos to be deleted\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQuery Parameters for Get Videos\nmuted segment in a video.\nReturn Values for Get Videos\nCursor for forward pagination: tells the server where to …\nCursor for backward pagination: tells the server where to …\nCreate a builder for building <code>GetVideosRequest</code>. On the …\nDate when the video was created.\nDescription of the video.\nLength of the video.\nDuration of the muted segment.\nNumber of values to be returned when getting videos by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the game the video is of.\nID of the game the video is of.\nID of the video being queried. Limit: 100. If this is …\nID of the video.\nIDs of the videos being queried.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLanguage of the video being queried. Limit: 1.\nLanguage of the video.\nMuted segments in the video.\nOffset in the video at which the muted segment begins.\nPeriod during which the video was created. Valid values: …\nDate when the video was published.\nSort order of the videos. Valid values: “time”, “…\nID of the stream that the video originated from if the …\nTemplate URL for the thumbnail of the video.\nTitle of the video.\nType of video. Valid values: “all”, “upload”, “…\nType of video. Valid values: “upload”, “archive”, …\nURL of the video.\nID of the user who owns the video.\nID of the user who owns the video.\nID of the user who owns the video.\nLogin of the user who owns the video.\nDisplay name corresponding to user_id.\nNumber of times the video has been viewed.\nIndicates whether the video is publicly viewable. Valid …\nBody Parameters for Send Whisper\nQuery Parameters for Send Whisper\nReturn Values for Send Whisper\nSuccessfully sent the whisper message or the message was …\nThe ID of the user sending the whisper. This user must …\nThe whisper message to send. The message must not be empty.\nSends a whisper message to the specified user. <code>send-whisper</code>\nThe ID of the user to receive the whisper.\nBody Parameters for Send Whisper\nQuery Parameters for Send Whisper\nReturn Values for Send Whisper\nSuccessfully sent the whisper message or the message was …\nCreate a builder for building <code>SendWhisperRequest</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ID of the user sending the whisper. This user must …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe whisper message to send. The message must not be empty.\nCreate a new <code>SendWhisperRequest</code>\nCreate a new message\nThe ID of the user to receive the whisper.\nAutoMod flags a message as potentially inappropriate, and …\nResponse from the automod_queue::AutoModQueue topic.\nAnyone shares a bit badge in a specified channel.\nResponse from the …\nAnyone cheers in a specified channel.\nResponse from the channel_bits::ChannelBitsEventsV2 topic.\nA user redeems a cheer with shared rewards.\nResponse from the channel_cheer::ChannelCheerEventsPublicV1…\nA user redeems an reward using channel points.\nResponse from the channel_points::ChannelPointsChannelV1 …\nA user gifts subs.\nResponse from the channel_sub_gifts::ChannelSubGiftsV1 …\nA subscription event happens in channel\nResponse from the …\nA moderator performs an action in the channel.\nResponse from the moderation::ChatModeratorActions topic.\nA user redeems an reward using channel points.\nResponse from the …\nA user follows the channel\nResponse from the following::Following topic.\nA user redeems an reward using channel points.\nResponse from the hypetrain::HypeTrainEventsV1 topic.\nA user redeems an reward using channel points.\nResponse from the hypetrain::HypeTrainEventsV1Rewards …\nMessage received containing all applicable data\nResponse from a ping\nA user raids the channel\nResponse from the raid::Raid topic.\nRequest for the client to reconnect\nResponse from twitchs PubSub server. Either a response …\nResponse from a subscription/unsubscription\nScopes needed by this topic\nA logical partition of messages that clients may subscribe …\nMessage response from twitch PubSub.\nAll possible topics\nResponse from twitch PubSub\nA user’s message held by AutoMod has been approved or …\nA user’s message held by AutoMod has been approved or …\nStatistics about stream\nResponse from the video_playback::VideoPlayback topic.\nStatistics about stream\nResponse from the video_playback::VideoPlaybackById topic.\nPubSub messages for when AutoMod flags a message as …\nPubSub messages for bits\nPubSub messages for bits\nPubSub messages for cheer events\nPubSub messages for channel points\nPubSub messages for sub gifts\nPubSub messages for subscriptions\nPubSub messages for community points.\nThe error message associated with the request, or an empty …\nPubSub messages for follows\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPubSub messages for hype-trains\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this into a <code>Topics</code>\nWhether response indicates success or not\nCreate a listen command.\nPubSub messages for moderator actions\nThe nonce that was passed in the request, if one was …\nParse string slice as a response.\nPubSub messages for raids\nCreate a unlisten command.\nPubSub messages for user moderation notifications\nPubSub messages for (live) stream playback information\nData corresponding to topic message\nMessage reply from topic subscription\nMessage reply from topic subscription\nMessage reply from topic subscription\nMessage reply from topic subscription\nMessage reply from topic subscription\nMessage reply from topic subscription\nMessage reply from topic subscription\nMessage reply from topic subscription\nMessage reply from topic subscription\nMessage reply from topic subscription\nMessage reply from topic subscription\nMessage reply from topic subscription\nMessage reply from topic subscription\nMessage reply from topic subscription\nMessage reply from topic subscription\nMessage reply from topic subscription\nTopic message\nTopic message\nTopic message\nTopic message\nTopic message\nTopic message\nTopic message\nTopic message\nTopic message\nTopic message\nTopic message\nTopic message\nTopic message\nTopic message\nTopic message\nTopic message\nMessage held by automod\nMessage held by automod\nA user follows the channel\nReply from AutoModQueue\nSpecific AutoMod classification\nFragment that is classified under a AutoMod category which …\nThe contents of a AutoMod message\nClassification for content according to AutoMod\nA fragment of a AutoModded message\nA mentioned user in a fragment\nMessage that was caught by AutoMod\nA user according to Automod\nA users badges in the chat\nFragment that is not classified under a AutoMod category\nA text fragment that mentions another user\nSenders badges\nCategory for classification\nThe channel_id to watch. Can be fetched with the Get Users …\nColor of the user\nThe content of the message\nClassification of caught message\nDisplay name of user\nDisplay name of the user\nThe message split up in fragments.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChat ID of the message\nId or type of the badge\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLevel of classification, eg. how strongly related the …\nLogin name of the user, not capitalized\nUsername of the user\nThe message that was sent\nThe currently authenticated moderator\nLanguage of the part of the message that was caught\nCode for reason\nUser ID of who resolved the message in the queue\nUsername of who resolved the message in the queue\nUser that sent the message\nTime at which the message was sent\nStatus of the message in the queue\nThe full message that was sent\nThe different topics and their level for the automod …\nID of the user\nUser ID of the user\nVersion of the badge\nAutoMod classification of the fragment\nText associated with this fragment\nText associated with this fragment\nText associated with this fragment\nUser mentioned\n<code>ChannelBitsEventsV2Reply::BitsEvent</code> event unlocked new …\nContext that triggered pubsub message\nBits event\nData for bits event\nAnyone cheers in a specified channel.\nReply from ChannelBitsEventsV2\nCheer\nIf set, describes new unlocked badge for user\nThe number of bits that were sent.\nThe channel_id to watch. Can be fetched with the Get Users …\nID of channel where message was sent\nUsername of channel where message was sent\nThe full message that was sent with the bits.\nContext of <code>bits_event</code>, seems to only be <code>cheer</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the cheer was anonymous.\nTime when pubsub message was sent\nThe total number of bits that were ever sent by the user …\nID of user that sent message\nName of user that sent message\nData associated with reply\nMessage ID of message associated with this <code>bits_event</code>\nVersion of <code>channel-bits-events-v2</code> reply\nAnyone shares a bit badge in a specified channel.\nReply from ChannelBitsBadgeUnlocks\nValue of Bits badge tier that was earned (1000, 10000, …\nThe channel_id to watch. Can be fetched with the Get Users …\nID of channel where user earned the new Bits badge\nLogin of channel where user earned the new Bits badge\nCustom message included with share\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTime when the new Bits badge was earned.\nID of user who earned the new Bits badge\nLogin of user who earned the new Bits badge\nA user redeems a cheer with shared rewards.\nReply from ChannelCheerEventsPublicV1\nCheer\nA cheer bomb happened\nSubscription gift\nSubscription\nTrigger for cheer event/cheer bomb\nThe channel_id to watch. Can be fetched with the Get Users …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDisplay name of user\nDomain of cheer reward. Name of active twitch event\nSelected count for cheer. e.g How many that will receive …\nUnknown\nUnknown\nType of cheerbomb.\nId of the user\nLogin name of the user, not capitalized\nRedemption was updated. Rejected or completed\nA user redeems an reward using channel points.\nReply from ChannelPointsChannelV1\nA custom reward was updated\nRedemption was fullfilled, e.g it skipped reward queue\n`update-redemption-statuses-finished``progress\nA redemption users can “buy” with channel points to …\nStatus for redemption\nStatus of a redemption was changed\nReward data\nA reward was redeemed\nRedemption is not fullfilled, e.g is in reward queue.\nStatus of multiple redemptions were changed\nStatus of multiple redemptions were changed\nColor of background in rewards &amp; challenges screen on …\nThe channel_id to watch. Can be fetched with the Get Users …\nID of channel where the redemption was triggered\nID of channel where the redemption was triggered\nID of channel user\nCooldown will expire after this timestamp\nCost of reward.\nA cursor for something\nDefault image of reward in rewards &amp; challenges screen on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInformation about global cooldown\nID of the redemption. Also returned in twitch IRC\nID of reward.\nBASE64 representation of reward\nSet image of reward in rewards &amp; challenges screen on …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReward is enabled or not.\nReward is in stock\nReward is paused\nReward is sub only\nReward requires input from user on rewards &amp; challenges …\nMaximum redemptions per stream\nMaximum redemptions per user per stream\nMethod by which redemptions were set to new status\nNew status of redemptions\nTotal amount of redemptions changed\nPrompt shown when clicking reward on rewards &amp; challenges …\nTimestamp in which a reward was redeemed\nAmount of times this has been redeemed this stream.\nData about the reward that was redeemed\nDoes redemption skip queue?\nreward redemption status, will be FULFILLED if a user …\nTemplate ID\nTitle or Name of reward\nTotal redemptions\nUnknown\nUser that triggered the reward\nA string that the user entered if the reward requires input\nData about the reward that had status updated\nData about the reward that had status updated\nData about the redemption, includes unique id and user …\nData about the reward that had status updated\nTime the pubsub message was sent\nTime the pubsub message was sent\nTime the pubsub message was sent\nTime the pubsub message was sent\nTime the pubsub message was sent\nData about the reward that was updated\nA user gifts subs.\nReply from ChannelSubGiftsV1\nMystery gift\nMystery gift\nThe channel_id to watch. Can be fetched with the Get Users …\nChannel where mystery gifts were distributed\nAmount of mystery gifts\nDisplay name of user that purchased mystery gifts\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTier of mystery gifts\nUser ID of user that purchased mystery gifts\nUser name of user that purchased mystery gifts\nUnknown\nA subscription event happens in channel\nReply from ChannelSubscribeEventsV1\nDescribed where in a message an emote is\nUser extends a (gifted) sub\nUser extends sub through the month.\nA resubscription\nA resubscription\nGifted resubscription with optional message\nGifted resubscription with optional message\nA subscription\nA subscription\nA gifted subscription happened\nA gifted subscription happened\nMessage sent with subscription\nUnknown\nUnknown\nUnknown\nUnknown\nUnknown\nThe channel_id to watch. Can be fetched with the Get Users …\nID of the channel that has been subscribed or subgifted\nID of the channel that has been subscribed or subgifted\nID of the channel that has been subscribed or subgifted\nID of the channel that has been subscribed or subgifted\nID of the channel that has been subscribed or subgifted\nName of the channel that has been subscribed or subgifted\nName of the channel that has been subscribed or subgifted\nName of the channel that has been subscribed or subgifted\nName of the channel that has been subscribed or subgifted\nName of the channel that has been subscribed or subgifted\nCumulative months that user has been subscribed\nCumulative months that user has been subscribed\nCumulative months that user has been subscribed\nCumulative months that user has been subscribed\nDisplay name of user that subscribed\nDisplay name of user that subscribed\nDisplay name of user that purchased gifted subscription\nDisplay name of user that purchased gifted subscription\nDisplay name of user that purchased gifted subscription\nEmotes in subscription message\nEnd index of emote in message\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of emote\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResubscription is a gift\nResubscription is a gift\nMessage in subscription\nMonths\nMonths\nMonths\nDuration of subscription, e.g 1, 3 or 6\nDuration of subscription, e.g 1, 3 or 6\nDuration of subscription, e.g 1, 3 or 6\nDuration of subscription, e.g 1, 3 or 6\nDuration of subscription, e.g 1, 3 or 6\nDisplay name of user that received gifted subscription\nDisplay name of user that received gifted subscription\nUsername of user that received gifted subscription\nUsername of user that received gifted subscription\nUsername of user that received gifted subscription\nStart index of emote in message\nMonths the user has been subscribed for in a row.\nMonths the recipient has been subscribed for in a row.\nMessage sent with this subscription\nMessage sent with this subscription\nMessage sent with this subscription\nMessage sent with this subscription\nSubscription plan\nSubscription plan\nSubscription plan\nSubscription plan\nSubscription plan\nName of subscription plan\nName of subscription plan\nName of subscription plan\nName of subscription plan\nName of subscription plan\nTime when pubsub message was sent\nTime when pubsub message was sent\nTime when pubsub message was sent\nTime when pubsub message was sent\nTime when pubsub message was sent\nID of user that subscribed\nID of user that subscribed\nID of user that purchased gifted subscription\nID of user that purchased gifted subscription\nID of user that purchased gifted subscription\nUsername of user that subscribed\nUsername of user that subscribed\nUsername of user that purchased gifted subscription\nUsername of user that purchased gifted subscription\nUsername of user that purchased gifted subscription\nA user redeems an reward using channel points.\nThe channel_id to watch. Can be fetched with the Get Users …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA user follows the channel\nReply from Following\nThe channel_id to watch. Can be fetched with the Get Users …\nDisplay name of user that followed\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nID of the user that followed\nName of the user that followed\nThe specific action that was used\nReward is a badge\nBits\nRewards\nA cheer\nHype train was completed\nReward given to conductors\nUnknown\nConfiguration of hype train\nEasy difficulty\nReward is a emote\nReason hype-train ended\nHype train ended\nHard difficulty\nHype train is approaching\nHype train is approaching\nHype train conductor updated\nHype train conductor updated\nHype train cooldown expired\nHype train cooldown expired\nDifficulty of Hype Train\nHype train ended\nHype train ended\nA user redeems an reward using channel points.\nReply from HypeTrainEventsV1 or HypeTrainEventsV1Rewards\nA user redeems an reward using channel points.\nHype train leveled up\nHype train leveled up\nProgress of hype train\nHype train progression. Akin to Participations\nHype train progression. Akin to Participations\nHype train rewards\nHype train rewards\nHype train started in channel\nHype train started in channel\nInsane difficulty\nHow many support events needed to start Hype Train\nDescription of a hype-train level\nMedium difficulty\nThresholds for notifications\nConversion table of event to participation points\nParticipations in hype train\nA reward\nSource type, same as helix hype-train events type\nSubs\nRewards\nSuper Hard difficulty\nTier 1 sub\nTier 1 gifted sub\nTier 2 sub\nTier 2 gifted sub\nTier 3 sub\nTier 3 gifted sub\nAction done to progress\nID of the approaching hype train\nReward to conductor of bits\nBits\nBits\nBits\nBits by extension\nBits by extension\nBits by extension\nBits by poll\nBits by poll\nBits by poll\nHype train public callout emote ID\nHype train public callout emote token\nThe channel_id to watch. Can be fetched with the Get Users …\nThe channel_id to watch. Can be fetched with the Get Users …\nID of channel where hype-train was initiated\nID of channel where hype-train was initiated\nID of channel where hype-train was initiated\nID of channel\nLevel of hype-train that was initiated\nRewards for conductors\nConfig of this hype-train\nCooldown duration in nanoseconds for hype train\nCreator color\nRewards to bits conductor\nRewards to subscriptions conductor\nDifficulty of hype train\nDifficulty settings\nPeriod in nanoseconds that events must occur\nServer time epoch in milliseconds when hype train ended\nReason why hype train ended\nremaining events\nServer time epoch in milliseconds when hype train ends\nRewards to former bits conductor\nRewards to former subscriptions conductor\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParticipation points needed for this level\nParticipation points needed in this level\nParticipation points needed for this level\nID of hype train\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not Hype Train is enabled in channel\nSupport events that must occur within a duration of time …\nCurrent level\nDuration in nanoseconds of each level\nPossible rewards for level one\nMinimum participation points needed to kickoff hypetrain\nThresholds for notifications\nNumber of events needed to kickoff hypetrain\nParticipators\nConversion rates for participations\nParticipations in hype train\nParticipations in hype train\nPrimary color of hex\nProgress of hype train\nProgress of hype train\nProgress of hype train\nAmount of actions done. i.e 500 (five-hundred) bits or 1 …\nTime left\nRewards\nDescription of level rewards\nUnknown\nConductor source\nSource type of progression\nServer time epoch in milliseconds when hype train started\nReward to conductor of subscriptions\nTier 1 gifted subs\nTier 1 gifted subs\nTier 1 gifted subs\nTier 1 sub\nTier 1 sub\nTier 1 sub\nTier 2 gifted subs\nTier 2 gifted subs\nTier 2 gifted subs\nTier 2 sub\nTier 2 sub\nTier 2 sub\nTier 3 gifted subs\nTier 3 gifted subs\nTier 3 gifted subs\nTier 3 sub\nTier 3 sub\nTier 3 sub\nTheme color of channel\nServer time epoch in milliseconds when hype train expires\nCurrent amassed participation points in this level\nServer time epoch in milliseconds when hype train was …\nUse creator color or not\nUses personalized settings\nUse theme color or not\nUser information of conductor\nDisplay name of user\nId of the user\nLogin name of the user, not capitalized\nProfile picture of user\nCurrent total amassed participation points in all levels\nInteger value of reward. 1-5\nID of badge\nGroup ID of emote\nGroup ID of badge\nID of emote\nID of badge in this object\nURL to image of badge\nLevel that this emote is from\nLevel that this badge is from\nID of emote set\nToken for this emote\nAutomod blocked term added\nAutomod permitted term added\nAutomod message approved\nUnban request approved\nUnban Request Approved\nAutomod message rejected\nBan\nA command\nChannel Term actions\nA channel term was modified, added or removed\nChannel moderated\nChat moderated\nA moderator performs an action in the channel.\nReply from ChatModeratorActions\nChat targeted login moderation\nChat cleared for all viewers\nDelete\nAutomod blocked term removed\nUsers own message was deleted.\nAutomod permitted term removed\nAutomod message denied\nUnban request denied\nUnban Request Denied\nEmote-only chat enabled\nEmote-only chat disabled\nFollowers-only chat enabled\nFollowers-only chat disabled\nChannel host started\nMod\nA moderation action. <code>moderation_action</code>\nA moderation action. <code>moderation_action</code>\nA command\nModeration type\nA moderator was added. <code>moderator_added</code>\nA moderator was added. <code>moderator_added</code>\nA moderator was removed. <code>moderator_removed</code>\nA moderator was removed. <code>moderator_removed</code>\nModified automod properties\nUnique chat enabled\nUnique chat disabled\nRaid\nSlow-mode chat enabled\nSlow-mode chat disabled\nSubscriber-only chat enabled\nSubscriber-only chat disabled\nTimeout\nUnban\nUnban request\nChannel host removed\nUnmod\nUnraid\nUntimeout\nUser removed as VIP\nUser added as VIP\nUser added as VIP\nVIP Added\nArguments for moderation_action\nThe channel_id to listen to. Can be fetched with the Get …\nID of channel where moderator was added\nID of channel where moderator was added\nID of channel where channel terms were changed\nId of channel where VIP was added\nUser that did moderation action\nUsername of user that added moderator\nUsername of user that added moderator\nUser who made target VIP (usually broadcaster)\nUnban response created by user with id\nUnban response created by user with login\nID of user that did moderation action\nID of user that added moderator\nID of user that added moderator\nUser ID of who made target VIP (usually broadcaster)\nIf the term added is temporary or not and if not, when it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nModeration action is triggered from automod\nIf the term was permitted/denied because of a previous …\nId of term\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType of action\nModeration action. Should be <code>mod</code>\nModeration action. Should be <code>unmod</code>\nAction taken, should be …\nMessage attached to unban request response\nID of message associated with moderation action\nUser ID that caused the term\nUser name that caused the term\nTarget of moderation action\nID of added moderator\nID of added moderator\nUser ID of who was made VIP\nTarget user ID of unban request, e.g the user that was …\nUsername of added moderator\nUsername of added moderator\nUser who was made VIP\nTarget login of unban request, e.g the user that was banned\nTerm definition\nType of moderation\nType of action done\nDefined if the term was updated, None if new.\nThe user_id to listen as. Can be fetched with the Get Users…\nA user raids the channel\nRaid canceled\nRaid canceled\nRaid go\nRaid go\nReply from Raid\nRaid update\nRaid update\nThe channel_id to watch. Can be fetched with the Get Users …\nID of user would be raided\nID of user would be raided\nID of user would be raided\nRaid will be force started in this many seconds\nRaid will be force started in this many seconds\nRaid would have be force started in this many seconds\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of raid\nID of raid\nID of raid\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nID of broadcaster doing raid\nID of broadcaster doing raid\nID of broadcaster doing raid\nDisplay name of targeted broadcaster/user\nDisplay name of targeted broadcaster/user\nDisplay name of targeted broadcaster/user\nID of targeted broadcaster/user\nID of targeted broadcaster/user\nID of targeted broadcaster/user\nUsername of targeted broadcaster/user\nUsername of targeted broadcaster/user\nUsername of targeted broadcaster/user\nProfile picture of targeted broadcaster/user\nProfile picture of targeted broadcaster/user\nProfile picture of targeted broadcaster/user\nJitter amount\nJitter amount\nJitter amount\nAmount of viewers that will join raid\nAmount of viewers that will join raid\nAmount of viewers that would join raid\nMessage held by automod\nA user follows the channel\nReply from UserModerationNotifications\nThe channel_id to watch. Can be fetched with the Get Users …\nThe currently authenticated user for whose automod …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIdentifier of the message\nCurrent status of the message\nArchive\nType of broadcast\nCommercial started\nA premiere, i.e a uploaded video\nA rerun, i.e a highlight or saved broadcast\nStream ended\nStream started\nChannel hit by TOS strike, meaning it will end\nStatistics about stream\nStatistics about stream\nReply from VideoPlayback and VideoPlaybackById\nCurrent viewcount on playback\nVideo on Demand\nVOD Watchparty.\nWatch party type\nType of broadcast\nThe channel_login to watch.\nThe channel_login to watch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUrl increment picture. Unknown usage\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTitle of VOD\nAvailability of VOD\nID of current VOD\nID of current watch party\nType of current watch party\nLength of commercial\nDelay as set in broadcaster settings.\nEpoch Server time when commercial started\nEpoch Server time\nEpoch Server time\nEpoch Server time\nEpoch Server time\nCurrent viewers\ninformation about VOD.")